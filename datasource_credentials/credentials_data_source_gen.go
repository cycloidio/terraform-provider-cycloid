// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_credentials

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CredentialsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"credential_types": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Filter credential by types, allowed types are [ssh aws custom azure azure_storage gcp basic_auth elasticsearch swift]",
				MarkdownDescription: "Filter credential by types, allowed types are [ssh aws custom azure azure_storage gcp basic_auth elasticsearch swift]",
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
			"credentials": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"canonical": schema.StringAttribute{
							Computed:            true,
							Description:         "The canonical of the credential.",
							MarkdownDescription: "The canonical of the credential.",
							Validators: []validator.String{
								stringvalidator.LengthBetween(3, 100),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
							},
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the credential displayed in the UI.",
							MarkdownDescription: "The description of the credential displayed in the UI.",
						},
						"keys": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of all the keys available for the Credential",
							MarkdownDescription: "List of all the keys available for the Credential",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the credential displayed in the UI.",
							MarkdownDescription: "The name of the credential displayed in the UI.",
						},
						"owner": schema.StringAttribute{
							Computed:            true,
							Description:         "User canonical that owns this credential. If omitted then the person creating this\ncredential will be assigned as owner. When a user is the owner of a credential he has\nall the permissions on it.\n",
							MarkdownDescription: "User canonical that owns this credential. If omitted then the person creating this\ncredential will be assigned as owner. When a user is the owner of a credential he has\nall the permissions on it.\n",
						},
						"path": schema.StringAttribute{
							Computed:            true,
							Description:         "Vault path of the credential, mainly used in concourse.",
							MarkdownDescription: "Vault path of the credential, mainly used in concourse.",
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-z0-9_\\-./]"), ""),
							},
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of the credential.",
							MarkdownDescription: "Type of the credential.",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"ssh",
									"aws",
									"custom",
									"azure",
									"azure_storage",
									"gcp",
									"basic_auth",
									"elasticsearch",
									"swift",
									"vmware",
								),
							},
						},
					},
					CustomType: CredentialsType{
						ObjectType: types.ObjectType{
							AttrTypes: CredentialsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"organization": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The canonical of an organization, will default to the provider organization settings.",
				MarkdownDescription: "The canonical of an organization, will default to the provider organization settings.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
				},
			},
		},
	}
}

type CredentialsModel struct {
	CredentialTypes types.List   `tfsdk:"credential_types"`
	Credentials     types.List   `tfsdk:"credentials"`
	Organization    types.String `tfsdk:"organization"`
}

var _ basetypes.ObjectTypable = CredentialsType{}

type CredentialsType struct {
	basetypes.ObjectType
}

func (t CredentialsType) Equal(o attr.Type) bool {
	other, ok := o.(CredentialsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CredentialsType) String() string {
	return "CredentialsType"
}

func (t CredentialsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	canonicalAttribute, ok := attributes["canonical"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`canonical is missing from object`)

		return nil, diags
	}

	canonicalVal, ok := canonicalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`canonical expected to be basetypes.StringValue, was: %T`, canonicalAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	keysAttribute, ok := attributes["keys"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keys is missing from object`)

		return nil, diags
	}

	keysVal, ok := keysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keys expected to be basetypes.ListValue, was: %T`, keysAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownerAttribute, ok := attributes["owner"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner is missing from object`)

		return nil, diags
	}

	ownerVal, ok := ownerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner expected to be basetypes.StringValue, was: %T`, ownerAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CredentialsValue{
		Canonical:       canonicalVal,
		Description:     descriptionVal,
		Keys:            keysVal,
		Name:            nameVal,
		Owner:           ownerVal,
		Path:            pathVal,
		CredentialsType: typeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCredentialsValueNull() CredentialsValue {
	return CredentialsValue{
		state: attr.ValueStateNull,
	}
}

func NewCredentialsValueUnknown() CredentialsValue {
	return CredentialsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCredentialsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CredentialsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CredentialsValue Attribute Value",
				"While creating a CredentialsValue value, a missing attribute value was detected. "+
					"A CredentialsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CredentialsValue Attribute Type",
				"While creating a CredentialsValue value, an invalid attribute value was detected. "+
					"A CredentialsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CredentialsValue Attribute Value",
				"While creating a CredentialsValue value, an extra attribute value was detected. "+
					"A CredentialsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CredentialsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCredentialsValueUnknown(), diags
	}

	canonicalAttribute, ok := attributes["canonical"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`canonical is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	canonicalVal, ok := canonicalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`canonical expected to be basetypes.StringValue, was: %T`, canonicalAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	keysAttribute, ok := attributes["keys"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keys is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	keysVal, ok := keysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keys expected to be basetypes.ListValue, was: %T`, keysAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownerAttribute, ok := attributes["owner"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	ownerVal, ok := ownerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner expected to be basetypes.StringValue, was: %T`, ownerAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewCredentialsValueUnknown(), diags
	}

	return CredentialsValue{
		Canonical:       canonicalVal,
		Description:     descriptionVal,
		Keys:            keysVal,
		Name:            nameVal,
		Owner:           ownerVal,
		Path:            pathVal,
		CredentialsType: typeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCredentialsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CredentialsValue {
	object, diags := NewCredentialsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCredentialsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CredentialsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCredentialsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCredentialsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCredentialsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCredentialsValueMust(CredentialsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CredentialsType) ValueType(ctx context.Context) attr.Value {
	return CredentialsValue{}
}

var _ basetypes.ObjectValuable = CredentialsValue{}

type CredentialsValue struct {
	Canonical       basetypes.StringValue `tfsdk:"canonical"`
	Description     basetypes.StringValue `tfsdk:"description"`
	Keys            basetypes.ListValue   `tfsdk:"keys"`
	Name            basetypes.StringValue `tfsdk:"name"`
	Owner           basetypes.StringValue `tfsdk:"owner"`
	Path            basetypes.StringValue `tfsdk:"path"`
	CredentialsType basetypes.StringValue `tfsdk:"type"`
	state           attr.ValueState
}

func (v CredentialsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["canonical"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["keys"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["owner"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Canonical.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["canonical"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Keys.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["keys"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Owner.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner"] = val

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		val, err = v.CredentialsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CredentialsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CredentialsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CredentialsValue) String() string {
	return "CredentialsValue"
}

func (v CredentialsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var keysVal basetypes.ListValue
	switch {
	case v.Keys.IsUnknown():
		keysVal = types.ListUnknown(types.StringType)
	case v.Keys.IsNull():
		keysVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		keysVal, d = types.ListValue(types.StringType, v.Keys.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"canonical":   basetypes.StringType{},
			"description": basetypes.StringType{},
			"keys": basetypes.ListType{
				ElemType: types.StringType,
			},
			"name":  basetypes.StringType{},
			"owner": basetypes.StringType{},
			"path":  basetypes.StringType{},
			"type":  basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"canonical":   basetypes.StringType{},
		"description": basetypes.StringType{},
		"keys": basetypes.ListType{
			ElemType: types.StringType,
		},
		"name":  basetypes.StringType{},
		"owner": basetypes.StringType{},
		"path":  basetypes.StringType{},
		"type":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"canonical":   v.Canonical,
			"description": v.Description,
			"keys":        keysVal,
			"name":        v.Name,
			"owner":       v.Owner,
			"path":        v.Path,
			"type":        v.CredentialsType,
		})

	return objVal, diags
}

func (v CredentialsValue) Equal(o attr.Value) bool {
	other, ok := o.(CredentialsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Canonical.Equal(other.Canonical) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Keys.Equal(other.Keys) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Owner.Equal(other.Owner) {
		return false
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	if !v.CredentialsType.Equal(other.CredentialsType) {
		return false
	}

	return true
}

func (v CredentialsValue) Type(ctx context.Context) attr.Type {
	return CredentialsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CredentialsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"canonical":   basetypes.StringType{},
		"description": basetypes.StringType{},
		"keys": basetypes.ListType{
			ElemType: types.StringType,
		},
		"name":  basetypes.StringType{},
		"owner": basetypes.StringType{},
		"path":  basetypes.StringType{},
		"type":  basetypes.StringType{},
	}
}
