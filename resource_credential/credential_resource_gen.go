// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_credential

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CredentialResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"body": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"access_key": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"account_name": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"auth_url": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"ca_cert": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"client_id": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"client_secret": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"domain_id": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"environment": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"public",
								"usgovernment",
								"china",
								"german",
							),
						},
					},
					"json_key": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"password": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"raw": schema.MapAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "custom credential fields",
						MarkdownDescription: "custom credential fields",
					},
					"secret_key": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"ssh_key": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"subscription_id": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"tenant_id": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"username": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: BodyType{
					ObjectType: types.ObjectType{
						AttrTypes: BodyValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Sensitive:           true,
				Description:         "All the possible fields inside it",
				MarkdownDescription: "All the possible fields inside it",
			},
			"canonical": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
				},
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"organization_canonical": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A canonical of an organization.",
				MarkdownDescription: "A canonical of an organization.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
				},
			},
			"owner": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "User canonical that owns this credential. If omitted then the person creating this\ncredential will be assigned as owner. When a user is the owner of a credential he has\nall the permissions on it.\n",
				MarkdownDescription: "User canonical that owns this credential. If omitted then the person creating this\ncredential will be assigned as owner. When a user is the owner of a credential he has\nall the permissions on it.\n",
			},
			"path": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-z0-9_\\-./]"), ""),
				},
			},
			"type": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ssh",
						"aws",
						"custom",
						"azure",
						"azure_storage",
						"gcp",
						"basic_auth",
						"elasticsearch",
						"swift",
						"vmware",
					),
				},
			},
		},
	}
}

type CredentialModel struct {
	Body                  BodyValue    `tfsdk:"body"`
	Canonical             types.String `tfsdk:"canonical"`
	Description           types.String `tfsdk:"description"`
	Name                  types.String `tfsdk:"name"`
	OrganizationCanonical types.String `tfsdk:"organization_canonical"`
	Owner                 types.String `tfsdk:"owner"`
	Path                  types.String `tfsdk:"path"`
	Type                  types.String `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = BodyType{}

type BodyType struct {
	basetypes.ObjectType
}

func (t BodyType) Equal(o attr.Type) bool {
	other, ok := o.(BodyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BodyType) String() string {
	return "BodyType"
}

func (t BodyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accessKeyAttribute, ok := attributes["access_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_key is missing from object`)

		return nil, diags
	}

	accessKeyVal, ok := accessKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_key expected to be basetypes.StringValue, was: %T`, accessKeyAttribute))
	}

	accountNameAttribute, ok := attributes["account_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_name is missing from object`)

		return nil, diags
	}

	accountNameVal, ok := accountNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_name expected to be basetypes.StringValue, was: %T`, accountNameAttribute))
	}

	authUrlAttribute, ok := attributes["auth_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_url is missing from object`)

		return nil, diags
	}

	authUrlVal, ok := authUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_url expected to be basetypes.StringValue, was: %T`, authUrlAttribute))
	}

	caCertAttribute, ok := attributes["ca_cert"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_cert is missing from object`)

		return nil, diags
	}

	caCertVal, ok := caCertAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_cert expected to be basetypes.StringValue, was: %T`, caCertAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return nil, diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return nil, diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	domainIdAttribute, ok := attributes["domain_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`domain_id is missing from object`)

		return nil, diags
	}

	domainIdVal, ok := domainIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`domain_id expected to be basetypes.StringValue, was: %T`, domainIdAttribute))
	}

	environmentAttribute, ok := attributes["environment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment is missing from object`)

		return nil, diags
	}

	environmentVal, ok := environmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment expected to be basetypes.StringValue, was: %T`, environmentAttribute))
	}

	jsonKeyAttribute, ok := attributes["json_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`json_key is missing from object`)

		return nil, diags
	}

	jsonKeyVal, ok := jsonKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`json_key expected to be basetypes.StringValue, was: %T`, jsonKeyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	rawAttribute, ok := attributes["raw"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`raw is missing from object`)

		return nil, diags
	}

	rawVal, ok := rawAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`raw expected to be basetypes.MapValue, was: %T`, rawAttribute))
	}

	secretKeyAttribute, ok := attributes["secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret_key is missing from object`)

		return nil, diags
	}

	secretKeyVal, ok := secretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret_key expected to be basetypes.StringValue, was: %T`, secretKeyAttribute))
	}

	sshKeyAttribute, ok := attributes["ssh_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssh_key is missing from object`)

		return nil, diags
	}

	sshKeyVal, ok := sshKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssh_key expected to be basetypes.StringValue, was: %T`, sshKeyAttribute))
	}

	subscriptionIdAttribute, ok := attributes["subscription_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subscription_id is missing from object`)

		return nil, diags
	}

	subscriptionIdVal, ok := subscriptionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subscription_id expected to be basetypes.StringValue, was: %T`, subscriptionIdAttribute))
	}

	tenantIdAttribute, ok := attributes["tenant_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant_id is missing from object`)

		return nil, diags
	}

	tenantIdVal, ok := tenantIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant_id expected to be basetypes.StringValue, was: %T`, tenantIdAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BodyValue{
		AccessKey:      accessKeyVal,
		AccountName:    accountNameVal,
		AuthUrl:        authUrlVal,
		CaCert:         caCertVal,
		ClientId:       clientIdVal,
		ClientSecret:   clientSecretVal,
		DomainId:       domainIdVal,
		Environment:    environmentVal,
		JsonKey:        jsonKeyVal,
		Password:       passwordVal,
		Raw:            rawVal,
		SecretKey:      secretKeyVal,
		SshKey:         sshKeyVal,
		SubscriptionId: subscriptionIdVal,
		TenantId:       tenantIdVal,
		Username:       usernameVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewBodyValueNull() BodyValue {
	return BodyValue{
		state: attr.ValueStateNull,
	}
}

func NewBodyValueUnknown() BodyValue {
	return BodyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBodyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BodyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BodyValue Attribute Value",
				"While creating a BodyValue value, a missing attribute value was detected. "+
					"A BodyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BodyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BodyValue Attribute Type",
				"While creating a BodyValue value, an invalid attribute value was detected. "+
					"A BodyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BodyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BodyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BodyValue Attribute Value",
				"While creating a BodyValue value, an extra attribute value was detected. "+
					"A BodyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BodyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBodyValueUnknown(), diags
	}

	accessKeyAttribute, ok := attributes["access_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_key is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	accessKeyVal, ok := accessKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_key expected to be basetypes.StringValue, was: %T`, accessKeyAttribute))
	}

	accountNameAttribute, ok := attributes["account_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_name is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	accountNameVal, ok := accountNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_name expected to be basetypes.StringValue, was: %T`, accountNameAttribute))
	}

	authUrlAttribute, ok := attributes["auth_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_url is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	authUrlVal, ok := authUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_url expected to be basetypes.StringValue, was: %T`, authUrlAttribute))
	}

	caCertAttribute, ok := attributes["ca_cert"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_cert is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	caCertVal, ok := caCertAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_cert expected to be basetypes.StringValue, was: %T`, caCertAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	domainIdAttribute, ok := attributes["domain_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`domain_id is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	domainIdVal, ok := domainIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`domain_id expected to be basetypes.StringValue, was: %T`, domainIdAttribute))
	}

	environmentAttribute, ok := attributes["environment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	environmentVal, ok := environmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment expected to be basetypes.StringValue, was: %T`, environmentAttribute))
	}

	jsonKeyAttribute, ok := attributes["json_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`json_key is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	jsonKeyVal, ok := jsonKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`json_key expected to be basetypes.StringValue, was: %T`, jsonKeyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	rawAttribute, ok := attributes["raw"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`raw is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	rawVal, ok := rawAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`raw expected to be basetypes.MapValue, was: %T`, rawAttribute))
	}

	secretKeyAttribute, ok := attributes["secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret_key is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	secretKeyVal, ok := secretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret_key expected to be basetypes.StringValue, was: %T`, secretKeyAttribute))
	}

	sshKeyAttribute, ok := attributes["ssh_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssh_key is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	sshKeyVal, ok := sshKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssh_key expected to be basetypes.StringValue, was: %T`, sshKeyAttribute))
	}

	subscriptionIdAttribute, ok := attributes["subscription_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subscription_id is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	subscriptionIdVal, ok := subscriptionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subscription_id expected to be basetypes.StringValue, was: %T`, subscriptionIdAttribute))
	}

	tenantIdAttribute, ok := attributes["tenant_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant_id is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	tenantIdVal, ok := tenantIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant_id expected to be basetypes.StringValue, was: %T`, tenantIdAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewBodyValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewBodyValueUnknown(), diags
	}

	return BodyValue{
		AccessKey:      accessKeyVal,
		AccountName:    accountNameVal,
		AuthUrl:        authUrlVal,
		CaCert:         caCertVal,
		ClientId:       clientIdVal,
		ClientSecret:   clientSecretVal,
		DomainId:       domainIdVal,
		Environment:    environmentVal,
		JsonKey:        jsonKeyVal,
		Password:       passwordVal,
		Raw:            rawVal,
		SecretKey:      secretKeyVal,
		SshKey:         sshKeyVal,
		SubscriptionId: subscriptionIdVal,
		TenantId:       tenantIdVal,
		Username:       usernameVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewBodyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BodyValue {
	object, diags := NewBodyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBodyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BodyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBodyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBodyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBodyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBodyValueMust(BodyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BodyType) ValueType(ctx context.Context) attr.Value {
	return BodyValue{}
}

var _ basetypes.ObjectValuable = BodyValue{}

type BodyValue struct {
	AccessKey      basetypes.StringValue `tfsdk:"access_key"`
	AccountName    basetypes.StringValue `tfsdk:"account_name"`
	AuthUrl        basetypes.StringValue `tfsdk:"auth_url"`
	CaCert         basetypes.StringValue `tfsdk:"ca_cert"`
	ClientId       basetypes.StringValue `tfsdk:"client_id"`
	ClientSecret   basetypes.StringValue `tfsdk:"client_secret"`
	DomainId       basetypes.StringValue `tfsdk:"domain_id"`
	Environment    basetypes.StringValue `tfsdk:"environment"`
	JsonKey        basetypes.StringValue `tfsdk:"json_key"`
	Password       basetypes.StringValue `tfsdk:"password"`
	Raw            basetypes.MapValue    `tfsdk:"raw"`
	SecretKey      basetypes.StringValue `tfsdk:"secret_key"`
	SshKey         basetypes.StringValue `tfsdk:"ssh_key"`
	SubscriptionId basetypes.StringValue `tfsdk:"subscription_id"`
	TenantId       basetypes.StringValue `tfsdk:"tenant_id"`
	Username       basetypes.StringValue `tfsdk:"username"`
	state          attr.ValueState
}

func (v BodyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 16)

	var val tftypes.Value
	var err error

	attrTypes["access_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["account_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ca_cert"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["domain_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["environment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["json_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["raw"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["secret_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ssh_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subscription_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tenant_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 16)

		val, err = v.AccessKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["access_key"] = val

		val, err = v.AccountName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["account_name"] = val

		val, err = v.AuthUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_url"] = val

		val, err = v.CaCert.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ca_cert"] = val

		val, err = v.ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_id"] = val

		val, err = v.ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_secret"] = val

		val, err = v.DomainId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["domain_id"] = val

		val, err = v.Environment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["environment"] = val

		val, err = v.JsonKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["json_key"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Raw.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["raw"] = val

		val, err = v.SecretKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secret_key"] = val

		val, err = v.SshKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ssh_key"] = val

		val, err = v.SubscriptionId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subscription_id"] = val

		val, err = v.TenantId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenant_id"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BodyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BodyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BodyValue) String() string {
	return "BodyValue"
}

func (v BodyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var rawVal basetypes.MapValue
	switch {
	case v.Raw.IsUnknown():
		rawVal = types.MapUnknown(types.StringType)
	case v.Raw.IsNull():
		rawVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		rawVal, d = types.MapValue(types.StringType, v.Raw.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"access_key":    basetypes.StringType{},
			"account_name":  basetypes.StringType{},
			"auth_url":      basetypes.StringType{},
			"ca_cert":       basetypes.StringType{},
			"client_id":     basetypes.StringType{},
			"client_secret": basetypes.StringType{},
			"domain_id":     basetypes.StringType{},
			"environment":   basetypes.StringType{},
			"json_key":      basetypes.StringType{},
			"password":      basetypes.StringType{},
			"raw": basetypes.MapType{
				ElemType: types.StringType,
			},
			"secret_key":      basetypes.StringType{},
			"ssh_key":         basetypes.StringType{},
			"subscription_id": basetypes.StringType{},
			"tenant_id":       basetypes.StringType{},
			"username":        basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"access_key":    basetypes.StringType{},
		"account_name":  basetypes.StringType{},
		"auth_url":      basetypes.StringType{},
		"ca_cert":       basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
		"domain_id":     basetypes.StringType{},
		"environment":   basetypes.StringType{},
		"json_key":      basetypes.StringType{},
		"password":      basetypes.StringType{},
		"raw": basetypes.MapType{
			ElemType: types.StringType,
		},
		"secret_key":      basetypes.StringType{},
		"ssh_key":         basetypes.StringType{},
		"subscription_id": basetypes.StringType{},
		"tenant_id":       basetypes.StringType{},
		"username":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"access_key":      v.AccessKey,
			"account_name":    v.AccountName,
			"auth_url":        v.AuthUrl,
			"ca_cert":         v.CaCert,
			"client_id":       v.ClientId,
			"client_secret":   v.ClientSecret,
			"domain_id":       v.DomainId,
			"environment":     v.Environment,
			"json_key":        v.JsonKey,
			"password":        v.Password,
			"raw":             rawVal,
			"secret_key":      v.SecretKey,
			"ssh_key":         v.SshKey,
			"subscription_id": v.SubscriptionId,
			"tenant_id":       v.TenantId,
			"username":        v.Username,
		})

	return objVal, diags
}

func (v BodyValue) Equal(o attr.Value) bool {
	other, ok := o.(BodyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccessKey.Equal(other.AccessKey) {
		return false
	}

	if !v.AccountName.Equal(other.AccountName) {
		return false
	}

	if !v.AuthUrl.Equal(other.AuthUrl) {
		return false
	}

	if !v.CaCert.Equal(other.CaCert) {
		return false
	}

	if !v.ClientId.Equal(other.ClientId) {
		return false
	}

	if !v.ClientSecret.Equal(other.ClientSecret) {
		return false
	}

	if !v.DomainId.Equal(other.DomainId) {
		return false
	}

	if !v.Environment.Equal(other.Environment) {
		return false
	}

	if !v.JsonKey.Equal(other.JsonKey) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Raw.Equal(other.Raw) {
		return false
	}

	if !v.SecretKey.Equal(other.SecretKey) {
		return false
	}

	if !v.SshKey.Equal(other.SshKey) {
		return false
	}

	if !v.SubscriptionId.Equal(other.SubscriptionId) {
		return false
	}

	if !v.TenantId.Equal(other.TenantId) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v BodyValue) Type(ctx context.Context) attr.Type {
	return BodyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BodyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"access_key":    basetypes.StringType{},
		"account_name":  basetypes.StringType{},
		"auth_url":      basetypes.StringType{},
		"ca_cert":       basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
		"domain_id":     basetypes.StringType{},
		"environment":   basetypes.StringType{},
		"json_key":      basetypes.StringType{},
		"password":      basetypes.StringType{},
		"raw": basetypes.MapType{
			ElemType: types.StringType,
		},
		"secret_key":      basetypes.StringType{},
		"ssh_key":         basetypes.StringType{},
		"subscription_id": basetypes.StringType{},
		"tenant_id":       basetypes.StringType{},
		"username":        basetypes.StringType{},
	}
}
