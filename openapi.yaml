openapi: 3.0.1
info:
  title: Welcome!
  description: "This is the Cycloid's API Reference. It provides descriptions, syntax,\
    \ and usage examples for each of the actions and data types available within our\
    \ console."
  termsOfService: https://console.cycloid.io/terms
  contact:
    name: The Great Owl
    url: https://www.cycloid.io
    email: contact@cycloid.io
  license:
    name: Cycloid @copyrights
    url: https://cycloid.io
  version: "0"
servers:
- url: https://http-api.cycloid.io/
security:
- api_key: []
tags:
- name: Cycloid
  description: Operation related to Cycloid's application.
- name: Organizations
  description: Operations for organizations.
- name: Organization teams
  description: Operations for teams which belong to an organization.
- name: Organization projects
  description: Operations for projects which belong to an organization.
- name: Organization members
  description: Operations for members of an organization.
- name: User
  description: Operations for the authenticated user.
- name: Organization pipelines
  description: Operations regarding pipelines in an organization.
- name: Organization pipelines jobs
  description: Operations on jobs belonging to a pipeline.
- name: Organization pipelines jobs build
  description: Operations on build of a job from a pipeline.
- name: Organization Infrastructure
  description: Operations on the infrastructure of an organization
- name: Organization Environments
  description: Operations to perform on an environment associated to a project of
    an organization.
- name: Organization Logs
  description: Operations on the logs of a project
- name: Organization Children
  description: Operations on the children of an organization
- name: Organization Infrastructure Policies
  description: Operations on the infrastructure policies of an organization
- name: Organization Subscriptions
  description: Operations on the subscriptions
- name: Cost Estimation
  description: Operations related to estimating cost of infrastructure.
- name: Organization kpis
  description: Operations on KPIs of an organization
paths:
  /appearance/{organization_canonical}:
    get:
      tags:
      - Appearance
      description: Get the active appearance available in the organization
      operationId: getActiveAppearance
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Default Appearance available in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appearance'
              example:
                data:
                  canonical: default
                  name: Default
                  display_name: Cycloid
                  tab_title: Cycloid
                  color:
                    r: 28
                    g: 151
                    b: 151
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: true
                  created_at: 1503225026
                  updated_at: 1503335026
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /appearance:
    get:
      tags:
      - Appearance
      description: Get the default appearance available in the platform
      operationId: getDefaultAppearance
      responses:
        "200":
          description: Default Appearance available in the platform.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appearance'
              example:
                data:
                  canonical: default
                  name: Default
                  display_name: Cycloid
                  tab_title: Cycloid
                  color:
                    r: 28
                    g: 151
                    b: 151
                  logo: /static/logos/logo.svg
                  favicon: /static/favicons/favicon.ico
                  footer: ""
                  is_active: true
                  created_at: 1503225026
                  updated_at: 1503335026
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /organizations/{organization_canonical}/code_generation/terraform/jsontohcl:
    post:
      tags:
      - Code Generation
      description: Transforms a JSON to a HCL
      operationId: terraformJSONToHCL
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The Terraform JSON config
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
        required: true
      responses:
        "200":
          description: The HCL translation of the config
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformHCLConfig'
              example:
                data:
                  config: " \"data\" \"aws_ami\" \"debian_jessie_latest\" { \"most_recent\"\
                    \ = true } \"locals\" = { \"codecommit_repository_name\" = \"\
                    something\" } \"output\" \"sensitive\" { \"sensitive\" = true\n\
                    \"value\" = \"VALUE\" } \"provider\" \"aws\" { \"access_key\"\
                    \ = \"${var.access_key}\" } \"resource\" \"aws_elb\" \"front\"\
                    \ { \"name\" = \"${var.project}-front-${var.env}\" \"tags\" =\
                    \ { \"name\" = \"some name\" } } \"variable\" \"front_disk_size\"\
                    \ { \"default\" = 60 } "
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/presets:
    get:
      tags:
      - Code Generation
      description: List Infra Import Presets
      operationId: getInfraImportPresets
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The Infra Import Presets
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InfraImportPreset'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - name: Preset1
                  resources:
                  - aws_route53_zone
                  - aws_security_group
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/resources/{resource_canonical}
  : post:
      tags:
      - Code Generation
      description: List Provider's Resource
      operationId: getInfraImportResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: resource_canonical
        in: path
        description: A canonical of a Resource
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: Information for filtering and access the Cloud Provider's Resources.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/InfraImportResourceBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InfraImportResourceBody'
        required: true
      responses:
        "200":
          description: The Infra Import's Resources
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InfraImportResource'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: i-1234567890abcdef0
                - id: i-1234567890abcdef1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/resources:
    post:
      tags:
      - Code Generation
      description: List infrastructure import provider's resources
      operationId: getInfraImportResources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: Access information of the Cloud Provider's Resources.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/InfraImportResourcesBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InfraImportResourcesBody'
        required: true
      responses:
        "200":
          description: The InfraImport's Resources Types
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TerraformProviderResourceSimple'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: aws_instance
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
                - canonical: aws_elb
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/code_generation/terraform/providers:
    get:
      tags:
      - Code Generation
      description: Return all the Providers
      operationId: getTerraformProviders
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the Providers
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TerraformProviderSimple'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - name: Amazon Web Service
                  canonical: aws
                  abbreviation: AWS
                  cloud: true
                  image: http://via.placeholder.com/150x150
                - name: Terraform Template
                  canonical: template
                  abbreviation: Template
                  cloud: false
                  image: http://via.placeholder.com/150x150
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/data_sources:
    get:
      tags:
      - Code Generation
      description: Return all the DataSources for the Provider
      operationId: getTerraformProviderDataSources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the DataSources
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TerraformProviderResourceSimple'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: aws_instance
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
                - canonical: aws_elb
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/data_sources/{resource_canonical}
  : get:
      tags:
      - Code Generation
      description: Get the information of the DataSource
      operationId: getTerraformProviderDataSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: resource_canonical
        in: path
        description: A canonical of a Resource
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the DataSource
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformProviderResource'
              example:
                data:
                  canonical: aws_lb
                  is_node: true
                  is_edge: false
                  image: http://via.placeholder.com/150x150
                  schema:
                    dns_name:
                      required: false
                      optional: false
                      type: TypeString
                      default: ""
                    internal:
                      required: false
                      optional: true
                      type: TypeBool
                      default: "null"
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}:
    get:
      tags:
      - Code Generation
      description: Get the information of the Provider
      operationId: getTerraformProvider
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the Provider
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformProvider'
              example:
                data:
                  name: Amazon Web Service
                  canonical: aws
                  abbreviation: AWS
                  image: http://via.placeholder.com/150x150
                  cloud: true
                  schema:
                    access_key:
                      required: false
                      optional: true
                      type: TypeString
                      default: ""
                    secret_key:
                      required: false
                      optional: true
                      type: TypeString
                      default: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/resources:
    get:
      tags:
      - Code Generation
      description: Return all the Resources for the Provider
      operationId: getTerraformProviderResources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the Resources
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TerraformProviderResourceSimple'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: aws_instance
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
                - canonical: aws_elb
                  image: http://via.placeholder.com/150x150
                  is_node: true
                  is_edge: false
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/resources/{resource_canonical}:
    get:
      tags:
      - Code Generation
      description: Get the information of the Resource
      operationId: getTerraformProviderResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: resource_canonical
        in: path
        description: A canonical of a Resource
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the Resource
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformProviderResource'
              example:
                data:
                  canonical: aws_lb
                  is_node: true
                  is_edge: false
                  image: http://via.placeholder.com/150x150
                  attributes:
                    important:
                    - count
                    status: status
                    normalized_status:
                      "on": running
                  schema:
                    dns_name:
                      required: false
                      optional: false
                      type: TypeString
                      default: ""
                    internal:
                      required: false
                      optional: true
                      type: TypeBool
                      default: "null"
                  category: SomeCategory
                  keywords: []
                  description: detailed resource description
                  short_description: resource description
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/code_generation/terraform/validate:
    post:
      tags:
      - Code Generation
      description: Validates a TF configuration
      operationId: terraformValidate
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The Terraform JSON config
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
        required: true
      responses:
        "200":
          description: The result of validating the provided configuration
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformValidationResult'
              example:
                data:
                  errors:
                  - "resource 'aws_elb.front' config: unknown variable referenced:\
                    \ 'name'; define it with a 'variable' block"
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /config:
    get:
      tags:
      - Cycloid
      description: Get the Cycloid configuration.
      operationId: getConfig
      responses:
        "200":
          description: "Cycloid configuration, including available authentication\
            \ methods."
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AppConfig'
              example:
                data:
                  authentication:
                    local:
                      enabled: true
                    oauth:
                    - provider: azuread
                      tenant_id: 67b96869-421d-4897-9f95-dc66aacbe915
                      client_id: 67b96869-421d-4897-9f95-dc66aacbe915
                      type: AzureADAuthConfig
                    - provider: google
                      client_id: 741192805913-s10ibou8065iofnb9rcir9269skiqts9.apps.googleusercontent.com
                      type: GoogleOAuthConfig
                    - provider: github
                      host_address: https://api.github.com
                      client_id: 6a94210b44f4a612952e
                      type: GitHubOAuthConfig
                    saml2:
                    - provider: https://samltest.id/saml/idp
                      sso_url: https://samltest.id/idp/profile/SAML2/Redirect/SSO?SAMLRequest=fJLPbtswDIdfReDdkeV0aU3UAbwGwwJ...
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /countries:
    get:
      tags:
      - Cycloid
      description: Get the Cycloid supported countries.
      operationId: getCountries
      responses:
        "200":
          description: Cycloid supported countries
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Country'
              example:
                data:
                - code: AD
                  name: Andorra
                - code: FR
                  name: France
                - code: GB
                  name: United Kingdom
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /status:
    get:
      tags:
      - Cycloid
      description: Get the status of the Cycloid's services.
      operationId: getStatus
      responses:
        "200":
          description: General application status and services statuses.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GeneralStatus'
              example:
                data:
                  status: Error
                  message: "some services returned an unknown state (s1), while some\
                    \ other returned errors (s2, s3)"
                  checks:
                  - canonical: s0
                    category: internal
                    status: Success
                    message: no issue reported while connecting to s0
                  - canonical: s1
                    category: internal
                    status: Unknown
                    message: unknown state for s1 service
                  - canonical: s2
                    category: internal
                    status: Error
                    message: issue detected while connecting to s2
                  - canonical: s3
                    category: internal
                    status: Success
                    message: issue detected while connecting to s3
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /status/{service_status_canonical}:
    get:
      tags:
      - Cycloid
      description: Get the status of the Cycloid's service. It uses 200 and 500 to
        also identify the status
      operationId: getServiceStatus
      parameters:
      - name: service_status_canonical
        in: path
        description: The canonical of the service you want to get the status from
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: General application status and services statuses.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CheckReport'
              example:
                data:
                  canonical: s0
                  category: internal
                  status: Success
                  message: no issue reported while connecting to s0
        "500":
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /version:
    get:
      tags:
      - Cycloid
      description: Get the version of the Cycloid's API.
      operationId: getAppVersion
      responses:
        "200":
          description: Application version.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AppVersion'
              example:
                data:
                  version: 1.0.0
                  branch: master
                  revision: 9d3d4d97
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /organizations/{organization_canonical}/api_keys:
    get:
      tags:
      - Organization API keys
      description: Get list of API keys of the organization.
      operationId: getAPIKeys
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: user_id
        in: query
        description: Search by entity's owner
        schema:
          type: integer
          format: uint32
      responses:
        "200":
          description: List of the API keys which the organization has.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: ak-1
                  name: AK 1
                  description: this is ak-1
                  role:
                    id: 5
                    name: Organization API key
                    description: Role for API key
                    policies: []
                  token: jwt...
                  id: 5
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                - canonical: ak-2
                  name: AK 2
                  description: this is ak-2
                  role:
                    id: 5
                    name: Organization API key
                    description: Role for API key
                    policies: []
                  token: jwt...
                  id: 5
                  owner:
                    username: user-3
                    id: 2
                    given_name: Jorge
                    family_name: Hombre
                    email: jorge.hombre@test.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579203
                    created_at: 1503225001
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization API keys
      description: Create a new API key in the organization.
      operationId: createAPIKey
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the API key to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewAPIKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewAPIKey'
        required: true
      responses:
        "200":
          description: API key created. The body contains the information of the new
            API key of the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
              example:
                data:
                  canonical: ak-1
                  name: AK 1
                  description: this is ak-1
                  role:
                    id: 5
                    name: Organization API key
                    description: Role for API key
                    policies: []
                  token: jwt...
                  id: 5
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/api_keys/{api_key_canonical}:
    get:
      tags:
      - Organization API keys
      description: Get an API key of the organization.
      operationId: getAPIKey
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: api_key_canonical
        in: path
        description: A canonical of an API key.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the API key of the organization which has
            the specified canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
              example:
                data:
                  canonical: ak-1
                  name: AK 1
                  description: this is ak-1
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
                  token: jwt...
                  id: 5
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization API keys
      description: "Update the information of an API key of the organization. If the\
        \ API key has some information on the fields which aren't required and they\
        \ are not sent or set to their default values, which depend of their types,\
        \ the information will be removed."
      operationId: updateAPIkey
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: api_key_canonical
        in: path
        description: A canonical of an API key.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the API key to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateAPIKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateAPIKey'
        required: true
      responses:
        "200":
          description: API ey updated. The body contains information of the updated
            API key.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
              example:
                data:
                  canonical: ak-1
                  name: AK 1
                  description: this is ak-1
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
                  token: jwt...
                  id: 5
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization API keys
      description: Delete an API key of the organization.
      operationId: deleteAPIKey
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: api_key_canonical
        in: path
        description: A canonical of an API key.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: API key has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/appearances:
    get:
      tags:
      - Organization Appearances
      description: List of appearances available in the organization.
      operationId: listAppearances
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of appearances which are available in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appearance'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: default
                  name: Default
                  display_name: Cycloid
                  tab_title: Cycloid
                  color:
                    r: 28
                    g: 151
                    b: 151
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: false
                  created_at: 1503225026
                  updated_at: 1503335026
                - canonical: custom
                  name: Custom
                  display_name: Brand Name
                  tab_title: Brand Name
                  color:
                    r: 28
                    g: 151
                    b: 151
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: true
                  created_at: 1503225026
                  updated_at: 1503335026
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Appearances
      description: Create a new appearance for the organization.
      operationId: createAppearance
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's appearance to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewAppearance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewAppearance'
        required: true
      responses:
        "200":
          description: New appearance created in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appearance'
              example:
                data:
                  display_name: Brand Name
                  tab_title: Brand Name
                  color:
                    r: 0
                    g: 0
                    b: 0
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: false
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/appearances/{appearance_canonical}:
    get:
      tags:
      - Organization Appearances
      description: Get the appearance available in the organization with a canonical
      operationId: getAppearance
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: appearance_canonical
        in: path
        description: A canonical of an appearance.
        required: true
        schema:
          $ref: '#/components/schemas/AppearanceCanonical'
      responses:
        "200":
          description: Appearance available in the organization with such canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appearance'
              example:
                data:
                  canonical: custom
                  name: Default
                  display_name: Cycloid
                  tab_title: Cycloid
                  color:
                    r: 28
                    g: 151
                    b: 151
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: false
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Appearances
      description: Update an existing appearance in the organization.
      operationId: updateAppearance
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: appearance_canonical
        in: path
        description: A canonical of an appearance.
        required: true
        schema:
          $ref: '#/components/schemas/AppearanceCanonical'
      requestBody:
        description: The information of the organization's appearance to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/Appearance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Appearance'
        required: true
      responses:
        "200":
          description: Updated appearance belonging to the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appearance'
              example:
                data:
                  canonical: custom
                  name: Custom
                  display_name: Brand Name
                  tab_title: Brand Name
                  color:
                    r: 0
                    g: 0
                    b: 0
                  logo: https://console.cycloid.io/static/images/app-logo-square.svg
                  favicon: https://console.cycloid.io/static/favicons/favicon.ico
                  footer: ""
                  is_active: true
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Appearances
      description: Delete an existing appearance in the organization.
      operationId: deleteAppearance
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: appearance_canonical
        in: path
        description: A canonical of an appearance.
        required: true
        schema:
          $ref: '#/components/schemas/AppearanceCanonical'
      responses:
        "204":
          description: Organization appearance has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/children:
    get:
      tags:
      - Organization Children
      description: Get the children organizations that the authenticated user has
        access.
      operationId: getChildren
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: organization_name
        in: query
        description: Search by the organization's name
        schema:
          type: string
      - name: organization_created_at
        in: query
        description: Search by organization's creation date
        schema:
          type: string
          format: date-time
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      responses:
        "200":
          description: List of the children organizations which the authenticated
            user has access.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: org1
                  id: 1
                  name: Organization 1
                  blocked: []
                  ci_team_name: asfdOPNljk
                  has_children: true
                  created_at: 1503225026
                  updated_at: 1503335026
                - canonical: org2
                  id: 1
                  name: Organization 2
                  blocked: []
                  ci_team_name: asfdOPNljk
                  has_children: false
                  created_at: 1501131026
                  updated_at: 1503333026
                - canonical: org3
                  id: 1
                  name: Organization 3
                  blocked: []
                  ci_team_name: asfdOPNljk
                  has_children: false
                  created_at: 1500135021
                  updated_at: 1503332021
                pagination:
                  index: 1
                  size: 10
                  total: 3
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Children
      description: "Create a new organization child, making the authenticated user\
        \ the owner of it."
      operationId: createChild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewOrganization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewOrganization'
        required: true
      responses:
        "200":
          description: Organization created. The body contains the information of
            the new created organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
              example:
                data:
                  id: 1
                  canonical: org1
                  name: Organization 1
                  blocked: []
                  ci_team_name: asfdOPNljk
                  created_at: 1503225026
                  updated_at: 1503335026
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/cloud_cost_management:
    get:
      tags:
      - Organization Cloud Cost Management Dashboard
      description: "Return the dashboard of the Cloud Cost Management. It contains\
        \ one histogram per \ncloud provider, five top projects, the list of projects\
        \ resources \naggregated by cloud provider and the cost of the new resource\
        \ in the \nperiod.\n"
      operationId: getCloudCostManagementDashboard
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: granularity
        in: query
        description: "Sets the cost granularity, it can be month, week, day."
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - month
          - week
          - day
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: currency
        in: query
        description: The currency required for the results.
        required: true
        schema:
          type: string
          enum:
          - USD
          - EUR
          - CNY
          - GBP
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: record_types
        in: query
        description: The type of records that you can use to filter your results.
          For example usage or credit.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Cloud Cost Management dashboard.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementDashboard'
              example:
                data:
                  providers:
                    cost: 400
                    buckets:
                    - cost: 300
                      value: aws
                      buckets:
                      - cost: 170
                        value: 2021-03
                      - cost: 130
                        value: 2021-04
                    - cost: 100
                      value: google
                      buckets:
                      - cost: 40
                        value: 2021-03
                      - cost: 60
                        value: 2021-04
                  projects:
                    cost: 300
                    buckets:
                    - cost: 100
                      value: 2021-03
                      buckets:
                      - cost: 50
                        value: proj1
                      - cost: 50
                        value: proj2
                    - cost: 200
                      value: 2021-04
                      buckets:
                      - cost: 150
                        value: proj1
                      - cost: 50
                        value: proj2
                  resources:
                  - project: proj1
                    providers:
                    - provider: aws
                      resources: 12
                      new_resources: 10
                    - provider: google
                      resources: 23
                      new_resources: 7
                  - project: proj2
                    providers:
                    - provider: aws
                      resources: 7
                      new_resources: 4
                  filter_values:
                    providers:
                    - aws
                    - gcp
                    projects:
                    - proj1
                    - proj2
                    currencies:
                    - USD
                    - EUR
                    tags:
                      key1:
                      - value1
                      - value2
                      key2:
                      - value1
                      - value2
                      - value3
                      key3:
                      - value1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/filter_values:
    get:
      tags:
      - Organization Cloud Cost Management filter vaules
      description: Return a map with all the possible filter vaules
      operationId: getCloudCostManagementFilterVaules
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: environments
        in: query
        description: The names of the environments that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: services
        in: query
        description: The names of the services that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: tag
        in: query
        description: The key and value of a tag concatenated by a ;.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 127
            minLength: 4
            pattern: "^[^;]+;[^;]+$"
            type: string
      - name: categories
        in: query
        description: The names of the categories that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - other
            - compute
            - storage
            - database
            - dev_tools
            - networking
            - analytics
            - containers
            - machine_learning
            - multimedia
            - security
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: regions
        in: query
        description: The names of the regions that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: resource_tagging
        in: query
        description: Filter results by only tagged or not tagged resources
        schema:
          type: string
          enum:
          - tagged_resources
          - untagged_resources
      - name: group_by
        in: query
        description: "Represents a group when you specify a group by criteria, or\
          \ in the response to a query with a specific grouping."
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - environment
            - service
            - instance_type
            - category
            - location
            - linked_account
            - project
            - record_type
      - name: dashboard
        in: query
        description: Specifies if the filter values are for the dashboard
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: |
            Cloud Cost Management histogram for a period of time and a single provider.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementFilterValues'
              example:
                data:
                  projects:
                  - proj1
                  - proj2
                  linked_account:
                  - acc1
                  - acc2
                  regions:
                  - us-east-1
                  - eu-west-1
                  components:
                  - storage
                  - compute
                  - containers
                  tags:
                    key1:
                    - value1
                    - value2
                    key2:
                    - value1
                    - value2
                    - value3
                    key3:
                    - value1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/projects:
    get:
      tags:
      - Organization Cloud Cost Management Projects Dashboard
      description: "Return the projects dashboard of the Cloud Cost Management. \n\
        It contains one date histogram with the aggregation by project,\nand a histogram\
        \ with the aggregation by project and provider.\n"
      operationId: getCloudCostManagementProjectsDashboard
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: granularity
        in: query
        description: "Sets the cost granularity, it can be month, week, day."
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - month
          - week
          - day
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: currency
        in: query
        description: The currency required for the results.
        required: true
        schema:
          type: string
          enum:
          - USD
          - EUR
          - CNY
          - GBP
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Cloud Cost Management dashboard.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementProjectsDashboard'
              example:
                data:
                  projects:
                    cost: 300
                    buckets:
                    - cost: 100
                      value: 2021-03
                      buckets:
                      - cost: 50
                        value: proj1
                      - cost: 50
                        value: proj2
                    - cost: 200
                      value: 2021-04
                      buckets:
                      - cost: 150
                        value: proj1
                      - cost: 50
                        value: proj2
                  project_providers:
                  - project: proj1
                    providers:
                    - provider:
                      - aws: null
                        cost: 50
                      - google: null
                        cost: 10
                  - project: proj2
                    providers:
                    - provider:
                      - azure: null
                        cost: 50
                      - google: null
                        cost: 10
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}:
    get:
      tags:
      - Organization Cloud Cost Management Provider Histograms
      description: "Return a histogram of the costs generated in a given period aggregated\
        \ by time granularity and other terms, for a single provider."
      operationId: getCloudCostManagementProvider
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: granularity
        in: query
        description: "Sets the cost granularity, it can be month, week, day."
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - month
          - week
          - day
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: currency
        in: query
        description: The currency required for the results.
        required: true
        schema:
          type: string
          enum:
          - USD
          - EUR
          - CNY
          - GBP
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: environments
        in: query
        description: The names of the environments that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: services
        in: query
        description: The names of the services that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: tag
        in: query
        description: The key and value of a tag concatenated by a ;.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 127
            minLength: 4
            pattern: "^[^;]+;[^;]+$"
            type: string
      - name: categories
        in: query
        description: The names of the categories that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - other
            - compute
            - storage
            - database
            - dev_tools
            - networking
            - analytics
            - containers
            - machine_learning
            - multimedia
            - security
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: regions
        in: query
        description: The names of the regions that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: resource_tagging
        in: query
        description: Filter results by only tagged or not tagged resources
        schema:
          type: string
          enum:
          - tagged_resources
          - untagged_resources
      - name: group_by
        in: query
        description: "Represents a group when you specify a group by criteria, or\
          \ in the response to a query with a specific grouping."
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - environment
            - service
            - instance_type
            - category
            - location
            - linked_account
            - project
            - record_type
      - name: record_types
        in: query
        description: The type of records that you can use to filter your results.
          For example usage or credit.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: |
            Cloud Cost Management histogram for a period of time and a single provider.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementProviderDetails'
              example:
                data:
                  cost: 200
                  buckets:
                  - cost: 100
                    value: 2021-03
                    buckets:
                    - cost: 50
                      value: us-est-1
                      buckets:
                      - cost: 25
                        value: storage
                      - cost: 25
                        value: compute
                    - cost: 50
                      value: us-est-2
                      buckets:
                      - cost: 20
                        value: storge
                      - cost: 30
                        value: compute
                  - cost: 100
                    value: 2021-04
                    buckets:
                    - cost: 70
                      value: us-est-1
                      buckets:
                      - cost: 50
                        value: storage
                      - cost: 20
                        value: compute
                    - cost: 30
                      value: us-est-2
                      buckets:
                      - cost: 15
                        value: storage
                      - cost: 15
                        value: compute
                  filter_values:
                    projects:
                    - proj1
                    - proj2
                    linked_account:
                    - acc1
                    - acc2
                    regions:
                    - us-east-1
                    - eu-west-1
                    components:
                    - storage
                    - compute
                    - containers
                    tags:
                      key1:
                      - value1
                      - value2
                      key2:
                      - value1
                      - value2
                      - value3
                      key3:
                      - value1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/providers/{provider_canonical}:
    get:
      tags:
      - Organization Cloud Cost Management Provider Details
      description: "Return a histogram of the costs generated in a given period aggregated\
        \ by time granularity and other terms, for a single provider."
      operationId: getCloudCostManagementProviderDetails
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: provider_canonical
        in: path
        description: A canonical of a Provider
        required: true
        schema:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: granularity
        in: query
        description: "Sets the cost granularity, it can be month, week, day."
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - month
          - week
          - day
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: currency
        in: query
        description: The currency required for the results.
        required: true
        schema:
          type: string
          enum:
          - USD
          - EUR
          - CNY
          - GBP
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: environments
        in: query
        description: The names of the environments that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: services
        in: query
        description: The names of the services that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: tag
        in: query
        description: The key and value of a tag concatenated by a ;.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 127
            minLength: 4
            pattern: "^[^;]+;[^;]+$"
            type: string
      - name: categories
        in: query
        description: The names of the categories that you can use to filter and group
          your results.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - other
            - compute
            - storage
            - database
            - dev_tools
            - networking
            - analytics
            - containers
            - machine_learning
            - multimedia
            - security
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: regions
        in: query
        description: The names of the regions that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: resource_tagging
        in: query
        description: Filter results by only tagged or not tagged resources
        schema:
          type: string
          enum:
          - tagged_resources
          - untagged_resources
      - name: group_by
        in: query
        description: "Represents a group when you specify a group by criteria, or\
          \ in the response to a query with a specific grouping."
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - environment
            - service
            - instance_type
            - category
            - location
            - linked_account
            - project
            - record_type
      - name: record_types
        in: query
        description: The type of records that you can use to filter your results.
          For example usage or credit.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: |
            Cloud Cost Management histogram for a period of time and a single provider.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementHistogram'
              example:
                data:
                  cost: 200
                  buckets:
                  - cost: 100
                    value: 2021-03
                    buckets:
                    - cost: 50
                      value: us-est-1
                      buckets:
                      - cost: 25
                        value: storage
                      - cost: 25
                        value: compute
                    - cost: 50
                      value: us-est-2
                      buckets:
                      - cost: 20
                        value: storge
                      - cost: 30
                        value: compute
                  - cost: 100
                    value: 2021-04
                    buckets:
                    - cost: 70
                      value: us-est-1
                      buckets:
                      - cost: 50
                        value: storage
                      - cost: 20
                        value: compute
                    - cost: 30
                      value: us-est-2
                      buckets:
                      - cost: 15
                        value: storage
                      - cost: 15
                        value: compute
                  filter_values:
                    projects:
                    - proj1
                    - proj2
                    linked_account:
                    - acc1
                    - acc2
                    regions:
                    - us-east-1
                    - eu-west-1
                    components:
                    - storage
                    - compute
                    - containers
                    tags:
                      key1:
                      - value1
                      - value2
                      key2:
                      - value1
                      - value2
                      - value3
                      key3:
                      - value1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/providers:
    get:
      tags:
      - Organization Cloud Cost Management Provider Histograms
      description: "Return a histogram of the costs generated in a given period aggregated\
        \ by time granularity and other terms, for a single provider."
      operationId: getCloudCostManagementProviders
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: granularity
        in: query
        description: "Sets the cost granularity, it can be month, week, day."
        required: true
        allowEmptyValue: false
        schema:
          type: string
          enum:
          - month
          - week
          - day
      - name: begin
        in: query
        description: Sets the start date for retrieving AWS costs. The start date
          is inclusive.
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: query
        description: Sets the end dates for retrieving AWS costs. The end date is
          exclusive.
        required: true
        schema:
          type: string
          format: date
      - name: currency
        in: query
        description: The currency required for the results.
        required: true
        schema:
          type: string
          enum:
          - USD
          - EUR
          - CNY
          - GBP
      - name: projects
        in: query
        description: The names of the projects that you can use to filter your results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: linked_accounts
        in: query
        description: The ids of the linked accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: master_accounts
        in: query
        description: The ids of the master accounts that you can use to filter your
          results
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: |
            Cloud Cost Management histogram for a period of time and a single provider.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementProviders'
              example:
                data:
                - gcp: null
                  cost: 200
                  buckets:
                  - cost: 100
                    value: 2021-03
                    buckets:
                    - cost: 50
                      value: us-est-1
                      buckets:
                      - cost: 25
                        value: storage
                      - cost: 25
                        value: compute
                    - cost: 50
                      value: us-est-2
                      buckets:
                      - cost: 20
                        value: storge
                      - cost: 30
                        value: compute
                  - cost: 100
                    value: 2021-04
                    buckets:
                    - cost: 70
                      value: us-est-1
                      buckets:
                      - cost: 50
                        value: storage
                      - cost: 20
                        value: compute
                    - cost: 30
                      value: us-est-2
                      buckets:
                      - cost: 15
                        value: storage
                      - cost: 15
                        value: compute
                - aws: null
                  cost: 200
                  buckets:
                  - cost: 100
                    value: 2021-03
                    buckets:
                    - cost: 50
                      value: us-est-1
                      buckets:
                      - cost: 25
                        value: storage
                      - cost: 25
                        value: compute
                    - cost: 50
                      value: us-est-2
                      buckets:
                      - cost: 20
                        value: storge
                      - cost: 30
                        value: compute
                  - cost: 100
                    value: 2021-04
                    buckets:
                    - cost: 70
                      value: us-est-1
                      buckets:
                      - cost: 50
                        value: storage
                      - cost: 20
                        value: compute
                    - cost: 30
                      value: us-est-2
                      buckets:
                      - cost: 15
                        value: storage
                      - cost: 15
                        value: compute
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/tags:
    get:
      tags:
      - Organization Cloud Cost Management
      description: Return a list of tags used in Cloud Cost Management records.
      operationId: getCloudCostManagementTags
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: List of Cloud Cost Management records' tags.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/accounts:
    get:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Return a list of Cloud Cost Management accounts which matches the
        scope specified by the filter.
      operationId: getCloudCostManagementAccounts
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: cloud_cost_management_account_created_at_query
        in: query
        description: Search by Cloud Cost Management account's creation date
        schema:
          type: integer
          format: uint64
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      responses:
        "200":
          description: List of Cloud Cost Management accounts.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudCostManagementAccount'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_ingestion_ended_at: 1503335026
                  account_id: account_id
                  canonical: my-cloud-cost-management-account
                  name: My AWS Cloud Cost Managment account
                  external_backend:
                    credential_canonical: credential
                    purpose: cost_explorer
                    configuration:
                      engine: AWSStorage
                      region: eu-west1
                      bucket: b
                      key: k
                  cloud_provider:
                    canonical: aws
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Create a new Cloud Cost Management account.
      operationId: createCloudCostManagementAccount
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewCloudCostManagementAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewCloudCostManagementAccount'
        required: true
      responses:
        "200":
          description: The new Cloud Cost Management account created.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementAccount'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_ingestion_ended_at: 1503335026
                  account_id: account_id
                  canonical: my-cloud-cost-management-account
                  name: My AWS Cloud Cost Managment account
                  external_backend:
                    credential_canonical: credential
                    purpose: cost_explorer
                    configuration:
                      engine: AWSStorage
                      region: eu-west1
                      bucket: b
                      key: k
                  cloud_provider:
                    canonical: aws
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/cloud_cost_management/accounts/has_parent:
    get:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Return whether account under provided credentials is a child account
      operationId: getCloudCostManagementAccountsHasParent
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: CE Account of the parent
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementAccountParent'
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/child-accounts:
    post:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Create a new Cloud Cost Management account.
      operationId: createCloudCostManagementAccountChild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewCloudCostManagementAccountChild'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewCloudCostManagementAccountChild'
        required: true
      responses:
        "200":
          description: The new Cloud Cost Management account created.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementAccount'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_ingestion_ended_at: 1503335026
                  account_id: account_id
                  canonical: my-cloud-cost-management-account
                  credential_canonical: this-credential-is-cool
                  parent_account_id: 123456-78900
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  ? /organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}/linked_accounts
  : get:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Return a list of cloud provider accounts linked to a specific Cloud
        Cost Management account.
      operationId: getCloudCostManagementLinkedAccounts
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_cost_management_account_canonical
        in: path
        description: The canonical of an CloudCostManagementAccount.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: List of linked accounts of a Cloud Cost Management account.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudCostManagementLinkedAccount'
              example:
                data:
                - id: 102
                  name: A linked account
                  account_id: xxxxxx-xxxxxx-xxxxxxx
                  cloud_provider: aws
                - id: 109
                  name: Another linked account
                  account_id: yyyyyy-yyyyyy-yyyyyyy
                  cloud_provider: aws
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}/linked_accounts/{cloud_provider_account_id}
  : put:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Update a Cloud Cost Management linked account
      operationId: updateCloudCostManagementLinkedAccount
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_cost_management_account_canonical
        in: path
        description: The canonical of an CloudCostManagementAccount.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_provider_account_id
        in: path
        description: The id of an account in the Cloud Provider.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated attributes of the Cloud Cost Management linked account
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementLinkedAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementLinkedAccount'
        required: true
      responses:
        "200":
          description: Updated Cloud Cost Management linked account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudCostManagementLinkedAccount'
              example:
                data:
                  id: 99
                  name: Updated linked account name
                  account_id: "123456789"
                  cloud_provider: aws
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}:
    get:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Get the information of the CloudCostManagementAccount.
      operationId: getCloudCostManagementAccount
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_cost_management_account_canonical
        in: path
        description: The canonical of an CloudCostManagementAccount.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the CloudCostManagementAccount which has
            the specified canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementAccount'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_ingestion_ended_at: 1503335026
                  account_id: account_id
                  canonical: my-cloud-cost-management-account
                  external_backend:
                    credential_canonical: credential
                    purpose: cost_explorer
                    configuration:
                      engine: AWSStorage
                      region: eu-west1
                      bucket: b
                      key: k
                  cloud_provider:
                    canonical: aws
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Update an existing CloudCostManagementAccount
      operationId: updateCloudCostManagementAccount
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_cost_management_account_canonical
        in: path
        description: The canonical of an CloudCostManagementAccount.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementAccount'
        required: true
      responses:
        "200":
          description: CloudCostManagementAccount updated.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementAccount'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_ingestion_ended_at: 1503335026
                  account_id: account_id
                  canonical: my-cloud-cost-management-account
                  external_backend:
                    credential_canonical: credential
                    purpose: cost_explorer
                    configuration:
                      engine: AWSStorage
                      region: eu-west1
                      bucket: b
                      key: k
                  cloud_provider:
                    canonical: aws
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Cloud Cost Management Accounts
      description: Delete the CloudCostManagementAccount.
      operationId: deleteCloudCostManagementAccount
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: cloud_cost_management_account_canonical
        in: path
        description: The canonical of an CloudCostManagementAccount.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: CloudCostManagementAccount has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cloud_cost_management/tag_mapping:
    get:
      tags:
      - Organization Cloud Cost Management Tag Mappings
      description: Return the Cloud Cost Management tag mapping for the organization
      operationId: getCloudCostManagementTagMapping
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The CloudCostManagementTagMapping for the organization
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementTagMapping'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  project_tags:
                  - proj
                  - project
                  project_regex: ^Project$
                  environment_tags:
                  - env
                  - environment
                  environment_regex: ^Environment$
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Cloud Cost Management Tag Mappings
      description: Create or Update a Cloud Cost Management Tag Mapping.
      operationId: putCloudCostManagementTagMapping
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementTagMapping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateCloudCostManagementTagMapping'
        required: true
      responses:
        "200":
          description: The new or updated Cloud Cost Management Tag Mapping
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CloudCostManagementTagMapping'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  project_tags:
                  - proj
                  - project
                  project_regex: ^Project$
                  environment_tags:
                  - env
                  - environment
                  environment_regex: ^Environment$
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/cloud_providers:
    get:
      tags:
      - Cloud providers
      description: Get the list of Cloud Providers
      operationId: getCloudProviders
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of Cloud Providers
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudProvider'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  canonical: aws
                  abbreviation: AWS
                  name: Amazon Web Services
                  regions:
                  - af-south-1
                  - eu-west-2
                  - us-east-1
                  - us-east-2
                - id: 2
                  canonical: google
                  abbreviation: GCP
                  name: Google Cloud Platform
                - id: 3
                  canonical: azurerm
                  abbreviation: Azure
                  name: Azure
                  regions:
                  - asia
                  - asiapacific
                  - australia
                  - australiacentral
                - id: 4
                  canonical: flexibleengine
                  abbreviation: FlexibleEngine
                  name: Flexible Engine
                - id: 5
                  canonical: openstack
                  abbreviation: OpenStack
                  name: OpenStack
                - id: 6
                  canonical: scaleway
                  abbreviation: Scaleway
                  name: Scaleway
                - id: 7
                  canonical: vmware
                  abbreviation: VMware
                  name: VMware
                - id: 8
                  canonical: ovh
                  abbreviation: OVH
                  name: OVH Cloud
                - id: 9
                  canonical: alibaba
                  abbreviation: Alibaba
                  name: Alibaba Cloud
                - id: 10
                  canonical: oracle
                  abbreviation: OCI
                  name: Oracle Cloud Infrastructure
                pagination:
                  index: 1
                  size: 10
                  total: 2
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/config_repositories:
    get:
      tags:
      - Organization Config Repositories
      description: Return all the config repositories
      operationId: listConfigRepositories
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: default
        in: query
        description: Value describing whether to return default
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: List of the config repositories.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConfigRepository'
              example:
                data:
                - id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  branch: configs
                  default: true
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 2
                  canonical: my-personal-repo2
                  name: My personal repo 2
                  url: git@github.com:myuser/repository.git
                  branch: configs
                  default: false
                  created_at: 1503225026
                  updated_at: 1503335026
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Config Repositories
      description: Creates a config repository
      operationId: createConfigRepository
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the config repository to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewConfigRepository'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewConfigRepository'
        required: true
      responses:
        "200":
          description: Success creation
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ConfigRepository'
              example:
                data:
                  id: 1
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  canonical: my-personal-repo
                  branch: configs
                  default: true
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/config_repositories/{config_repository_canonical}/config:
    post:
      tags:
      - Organization Config Repositories
      description: Create Service Catalog config files in the Config Repository.
      operationId: createConfigRepositoryConfig
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: config_repository_canonical
        in: path
        description: Organization Config Repositories canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: |
          The body contains Service Catalog's config files and paths where they'll be created in the Config Repository.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/SCConfig'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SCConfig'
        required: true
      responses:
        "204":
          description: SC config files have been created successfully
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/config_repositories/{config_repository_canonical}:
    get:
      tags:
      - Organization Config Repositories
      description: Return the Config Repository
      operationId: getConfigRepository
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: config_repository_canonical
        in: path
        description: Organization Config Repositories canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: Organization Config Repository.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ConfigRepository'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  branch: configs
                  default: true
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Config Repositories
      description: Update a config repository
      operationId: updateConfigRepository
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: config_repository_canonical
        in: path
        description: Organization Config Repositories canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the config repository to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRepository'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateConfigRepository'
        required: true
      responses:
        "200":
          description: Success creation
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ConfigRepository'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  branch: configs
                  default: true
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Config Repositories
      description: delete a Config Repositories
      operationId: deleteConfigRepository
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: config_repository_canonical
        in: path
        description: Organization Config Repositories canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Organization Config repository has been deleted
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/cost_estimation/tfplan:
    post:
      tags:
      - Cost Estimation
      description: Estimate costs of a Terraform plan in JSON format.
      operationId: costEstimateTfPlan
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformPlanInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformPlanInput'
        required: true
      responses:
        "200":
          description: The result of estimating the costs of a Terraform plan.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CostEstimationResult'
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/credentials:
    get:
      tags:
      - Organization Credentials
      description: "Return all the Credentials, depending on the caller permissions\
        \ it'll return the Raw data or not. If the caller has List and not Get it'll\
        \ not return the Raw, if it has List and Read it'll return the Raw."
      operationId: listCredentials
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: credential_type
        in: query
        description: |
          Deprecated. Please use credential_types.
          A Credential type
        schema:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - swift
      - name: credential_types
        in: query
        description: Multiple Credential types
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - ssh
            - aws
            - custom
            - azure
            - azure_storage
            - gcp
            - basic_auth
            - elasticsearch
            - swift
      responses:
        "200":
          description: List of the Credentials
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CredentialSimple'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  canonical: name-key1
                  name: name-key
                  type: ssh
                  path: my/path
                  raw:
                    ssh_key: key
                  created_at: 1503225026
                  updated_at: 1503335026
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                - id: 2
                  canonical: name-key2
                  name: name-key
                  type: ssh
                  path: my/path
                  raw:
                    ssh_key: key
                  created_at: 1503225026
                  updated_at: 1503335026
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Credentials
      description: |-
        Create a new Credential, based on the type you will have to pass different parameters within the body:
        * ssh: ssh_key
        * aws: access_key, secret_key
        * gcp: json_key
        * azure: client_id, client_secret, subscription_id, tenant_id
        * azure_storage: account_name, access_key
        * basic_auth: username, password
        * elasticsearch: username, password, ca_cert
        * swift: auth_url, username, password, domain_id, tenant_id
        * vmware: username, password
      operationId: createCredential
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewCredential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewCredential'
        required: true
      responses:
        "200":
          description: Credential created. The body contains the information of the
            new created Credential.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Credential'
              example:
                data:
                  id: 2
                  canonical: name-key
                  name: name-key
                  type: ssh
                  path: my/path
                  raw:
                    ssh_key: key
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/credentials/{credential_canonical}:
    get:
      tags:
      - Organization Credentials
      description: Get the information of the Credential.
      operationId: getCredential
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: path
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the Credential which has the specified ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Credential'
              example:
                data:
                  id: 2
                  canonical: name-key
                  name: name-key
                  type: ssh
                  path: my/path
                  raw:
                    ssh_key: key
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Credentials
      description: |-
        Update an existing Credential, based on the type you will have to pass different parameters within the body:
        * ssh: ssh_key
        * aws: access_key, secret_key
        * gcp: json_key
        * azure: client_id, client_secret, subscription_id, tenant_id
        * azure_storage: account_name, access_key
        * basic_auth: username, password
        * elasticsearch: username, password, ca_cert
        * swift: auth_url, username, password, domain_id, tenant_id
        * vmware: username, password
      operationId: updateCredential
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: path
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateCredential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateCredential'
        required: true
      responses:
        "200":
          description: Credential updated.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Credential'
              example:
                data:
                  id: 2
                  canonical: name-key
                  name: name-key
                  type: ssh
                  path: my/path
                  raw:
                    ssh_key: key
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Credentials
      description: Delete the Credential.
      operationId: deleteCredential
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: path
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Credential has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "409":
          description: Credential deletion has internal conflict
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/credentials/{credential_canonical}/options:
    get:
      tags:
      - Organization Credentials
      description: Get options of the Credential.
      operationId: getCredentialOptions
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: path
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service
        in: query
        required: true
        schema:
          type: string
          enum:
          - gcp_bigquery
      responses:
        "200":
          description: Service-specific options for the Credential with the specified
            ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    description: "The credential options. The shape of the items could\
                      \ be anything,  since each service can have very different options."
              example:
                data:
                  projects:
                  - id: cycloid-xxx
                    datasets:
                    - id: all_billing_data
                      tables:
                      - id: cloud_pricing_export
                      - id: gcp_billing_export_resource_v1_GOOGLE_CLOUD_ACCOUNT_ID
                      - id: gcp_billing_export_v1_GOOGLE_CLOUD_ACCOUNT_ID
                  - id: cycloid-demo
                    datasets: []
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/environments:
    get:
      tags:
      - Organization Environments
      description: Get all the environments of the Organization
      operationId: getEnvironments
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: Returns all the Environments
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Environment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 2
                  canonical: staging
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 3
                  canonical: dev
                  created_at: 1503225026
                  updated_at: 1503335026
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/events:
    get:
      tags:
      - Organizations
      description: |-
        Retrieve the list of events which has been registered on the organization. The events to request can be filtered using Unix timestamps in milliseconds (begin and end timestamps range), the event type and severity; when more than one are applied then they are applied with a logical AND.
        - The Unix timestamps must always be specified, the rest of the filters
          are not mandatory.
      operationId: getEvents
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: begin
        in: query
        description: "The unix timestamp in milliseconds, which indicate the start\
          \ of the time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in milliseconds, which indicate the end of\
          \ the time range."
        schema:
          type: integer
          format: uint64
      - name: type
        in: query
        description: Specify the types of the events to be requested. The returned
          events must have one of the specified types.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - Cycloid
            - AWS
            - Monitoring
            - Custom
      - name: severity
        in: query
        description: Specify the severities of the events to be requested. The returned
          events must have one of the specified severities.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - info
            - warn
            - err
            - crit
      responses:
        "200":
          description: The list of events which fulfills the query parameters filter
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                description: The list of log lines
              example:
                data:
                - timestamp: "0123456789"
                  id: 42
                  type: Cycloid
                  title: A build has been created
                  message: Cyclobot created the build cleanup-deployment#42 of pipeline
                    awesome-project-pr_1337
                  icon: fa-info-circle
                  severity: info
                  tags:
                  - key: action
                    value: create
                  - key: entity
                    value: build
                  - key: name
                    value: awesome-project-pr_1337/cleanup-deployment
                  - key: user
                    value: cyclobot
                - timestamp: "0123456795"
                  id: 2
                  title: Success deployment of awesome-project version 1.1.93-rc.5
                    on staging environment
                  type: Custom
                  message: A new deployment of awesome-project version 1.1.93-rc.5
                    has been done on staging environment
                  severity: info
                  icon: fa-info-circle
                  tags:
                  - key: env
                    value: staging
                  - key: project
                    value: awesome-project
                - timestamp: "0123456810"
                  id: 3
                  type: Monitoring
                  title: Nodes are overloaded
                  message: Kubernetes nodes of the deployment awesome-project are
                    under heavy load
                  severity: warn
                  tags:
                  - key: Name
                    value: my-mum-kubernetes-prod
                  - key: UUID
                    value: 3ec0a46e-435e-4c5e-989b-02179efb49b5
                  - key: alertname
                    value: K8SNodeDiskPressure
                  - key: condition
                    value: DiskPressure
                  - key: customer
                    value: awesome-customer
                  - key: env
                    value: prod
                  - key: instance
                    value: 172.30.12.2338080
                  - key: job
                    value: kube-state-metrics
                  - key: node
                    value: ip-127-0-0-1.eu-west-1.compute.internal
                  - key: project
                    value: kubernetes
                  - key: receiver
                    value: on_call
                  - key: service
                    value: k8s
                  - key: severity
                    value: warning
                  - key: status
                    value: false
                - timestamp: "0123456823"
                  id: 5
                  type: AWS
                  title: AWS created
                  message: A new AWS instance has been created
                  icon: fa-aws
                  severity: info
                  tags:
                  - key: env
                    value: testing
                  - key: project
                    value: awesome-project
                - timestamp: "0123456834"
                  id: 7
                  type: AWS
                  title: AWS is ready
                  message: A new AWS instance is ready to accept requests
                  icon: fa-aws
                  severity: info
                  tags:
                  - key: env
                    value: testing
                  - key: project
                    value: secret-project
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organizations
      description: Send a event on the organization to be registered.
      operationId: sendEvent
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information associated with the event to register.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewEvent'
        required: true
      responses:
        "200":
          description: Event has been registered
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Event'
                description: The newly created event
              example:
                data:
                - timestamp: "0123456789"
                  type: Cycloid
                  title: New member added
                  message: A new member has been added to the project Website
                  icon: fa-info-circle
                  severity: info
                  tags:
                  - key: project_canonical
                    value: website
                  - key: environment_canonical
                    value: development
                  - key: user
                    value: batman
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/events/tags:
    get:
      tags:
      - Organizations
      description: Retrieve the list of tags and set of values for all the events
        of the organization.
      operationId: getEventsTags
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The list of tags and set of values for all the events of the
            organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                description: The list of tags with associated set of values
              example:
                data:
                  user:
                  - cycloidbot
                  - geralt-of-rivia
                  env:
                  - prod
                  - staging
                  - testing
                  action:
                  - create
                  - delete
                  - update
                  project:
                  - awesome-project
                  - pet-project
                  - secret-project
                  entity:
                  - build
                  - pipeline
                  name:
                  - awesome-project-pr_1337
                  - awesome-project-pr_42
                  customer:
                  - awesome-customer
                  - cycloid
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/external_backends:
    get:
      tags:
      - Organization External Backends
      description: Get the list of organization external backends
      operationId: getExternalBackends
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment
        in: query
        description: The environment canonical to use a query filter
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      responses:
        "200":
          description: The list of the external backends
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalBackend'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  project_canonical: project1
                  credential_id: 1
                  purpose: logs
                  configuration:
                    engine: AWSCloudWatchLogs
                    region: eu-west1
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 2
                  project_canonical: project2
                  credential_id: 2
                  purpose: logs
                  configuration:
                    engine: AWSCloudWatchLogs
                    region: eu-west1
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 3
                  project_canonical: project1
                  environment_canonical: envA
                  credential: 3
                  purpose: remote_tfstate
                  configuration:
                    engine: AWSStorage
                    region: eu-west1
                    bucket: mybucket
                    key: /my/key
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 4
                  project_canonical: project2
                  environment_canonical: envA
                  credential: 4
                  purpose: logs
                  configuration:
                    engine: AWSStorage
                    container: mycontainer
                    blob: /my/blob
                  created_at: 1503225026
                  updated_at: 1503335026
                - id: 5
                  project_canonical: project2
                  environment_canonical: envB
                  credential_id: 5
                  purpose: remote_tfstate
                  configuration:
                    engine: GCPStorage
                    bucket: mybucket
                    object: /my/object
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization External Backends
      description: Save information about the external backend
      operationId: createExternalBackend
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: environment
        in: query
        description: The environment canonical to use a query filter
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      requestBody:
        description: The information of the external backend
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewExternalBackend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewExternalBackend'
        required: true
      responses:
        "200":
          description: external backend has been registered
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalBackend'
              example:
                data:
                  id: 1
                  project_canonical: project1
                  credential_id: 1
                  purpose: logs
                  configuration:
                    engine: AWSCloudWatchLogs
                    region: eu-west1
                  created_at: 1503225026
                  updated_at: 1503335026
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/external_backends/{external_backend_id}:
    get:
      tags:
      - Organization External Backends
      description: Get the external backend
      operationId: getExternalBackend
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: external_backend_id
        in: path
        description: External Backend ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "200":
          description: The external backend
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalBackend'
              example:
                data:
                  id: 1
                  project_canonical: project1
                  credential_id: 1
                  purpose: logs
                  configuration:
                    engine: AWSCloudWatchLogs
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization External Backends
      description: Update an External Backend
      operationId: updateExternalBackend
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: external_backend_id
        in: path
        description: External Backend ID
        required: true
        schema:
          type: integer
          format: uint32
      requestBody:
        description: The information of the external backend new data
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateExternalBackend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateExternalBackend'
        required: true
      responses:
        "200":
          description: Success update
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalBackend'
              example:
                data:
                  id: 1
                  project_canonical: project1
                  credential_id: 1
                  purpose: logs
                  configuration:
                    engine: AWSCloudWatchLogs
                    region: eu-west1
                  created_at: 1503225026
                  updated_at: 1503335026
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization External Backends
      description: delete an External Backend
      operationId: deleteExternalBackend
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: external_backend_id
        in: path
        description: External Backend ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "204":
          description: Organization Service Catalog Sources has been deleted
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/forms/config:
    post:
      tags:
      - Organization Forms
      description: Generate a set of configs based on the forms inputs
      operationId: createFormsConfig
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      requestBody:
        description: The information of the filled forms for a new project.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/FormInputs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormInputs'
        required: true
      responses:
        "200":
          description: Set of config to create the project / push onto repositories
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
              example:
                data:
                  prod:
                    pipeline:
                      pipeline:
                        path: pipeline/magento.yml
                        content: |
                          groups:

                          - name: magento-((env))
                            jobs:
                            - magento-((env))-build
                            - full-deploy-front-magento-((env))
                            - app-deploy-front-magento-((env))
                            - terraform-plan-magento-((env))
                            - terraform-apply-magento-((env))
                            - magento-((env))-unittests
                            - magento-((env))-functional-tests

                          resource_types:

                          - name: terraform
                            type: docker-image
                            source:
                              repository: ljfranklin/terraform-resource

                          resources:

                          - name: terraform-magento-((env))
                            type: terraform
                            source:
                              storage:
                                bucket: ((terraform_storage_bucket_name))
                                bucket_path: ((terraform_storage_bucket_path))
                                region_name: ((aws_default_region))
                                access_key_id: "((terraform_storage_access_key))"
                                secret_access_key: "((terraform_storage_secret_key))"
                              vars:
                                access_key: ((aws_access_key))
                                secret_key: ((aws_secret_key))
                              env:
                                AWS_ACCESS_KEY_ID: ((aws_access_key))
                                AWS_DEFAULT_REGION: ((aws_default_region))
                                AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
                      variables:
                        path: pipeline/variables.sample.yml
                        destination: pipeline/prod-variables.yml
                        content: |
                          env: prod
                          magento_deploy_bucket_name: magento-deploy
                          magento_deploy_bucket_object_path: /catalog-magento/prod/magento.tar.gz
                          magento_deploy_bucket_region: eu-west-1
                          magento_deploy_bucket_access_key: ...
                          magento_deploy_bucket_secret_access_key: ...
                          terraform_storage_access_key: ...
                          terraform_storage_secret_key: ...
                          terraform_storage_bucket_name: magento-terraform-remote-state
                          terraform_storage_bucket_path: magento/prod
                          aws_access_key: ...
                          aws_secret_key: ...
                          aws_default_region: eu-west-1

                          ansible_vault_password: ...
                          bastion_url: admin@bastion.server.com
                          bastion_private_key_pair: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          catalog_magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          magento_git_repository: git@github.com:myuser/code-magento.git
                          magento_git_branch: master
                          magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----


                          magento_config_git_repository: git@github.com:myuser/config-magento.git
                          magento_config_git_branch: master
                          magento_config_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----
                    ansible:
                      magento:
                        path: ansible/environments/front.yml.sample
                        destination: ansible/environments/prod-front.yml
                        content: |
                          # In this file you could override any variables present in default_front.yaml file

                          # Usually you might want to override those variables :
                          # magento_backend_frontname: admin
                          # magento_admin_firstname: admin
                          # magento_admin_lastname: admin
                          # magento_admin_email: root@localhost.local
                          # magento_admin_user: admin

                          # magento_admin_password: 4Bigs3cr3t

                          # In case you want to use vault to encrypt this password use the following command to generate the ansible vault var :
                          # echo -n "4Bigs3cr3t" | ansible-vault encrypt_string --stdin-name=magento_admin_password
                          #>> magento_admin_password: !vault |
                          #>>           $ANSIBLE_VAULT;1.1;AES256
                          #>>           37363232383334316164366337366430316535636130376134323366313565356365363662653539
                          #>>           3161303331303565643831383839626263653362636466660a316530613935393464366536383839
                          #>>           30303836326138306339623431356234333239343435623333343333623938633761636132303662
                          #>>           3135343861383531660a393934316237363961663865393939313966373838653339326565353263
                          #>>           6238
                    terraform:
                      magento:
                        path: terraform/magento.tf.sample
                        destination: terraform/magento/prod/magento.tf
                        content: |
                          variable "rds_password" {
                              default = "ChangeMePls"
                          }

                          module "magento" {
                            source = "module-magento"

                            env                      = "prod"
                            vpc_id                   = "<vpc-id>"
                            private_subnets_ids      = ["private-subnets"]
                            magento_ssl_cert         = "<ssl-cert-arn>"
                            bastion_sg_allow         = "<bastion-sg>"
                            public_subnets_ids       = ["<public-subnets>"]

                            rds_password             = "${var.rds_password}"

                            # project = "magento"

                            # FIXME optimized false : should be changes with the instance type ?

                            # rds_database         = "magento"
                            # rds_disk_size        = 10
                            # rds_multiaz          = false
                            # rds_storage_type     = "gp2"
                            # rds_subnet           = "<rds-subnet-id>"
                            # rds_type             = "db.t2.small"
                            # rds_username         = "magento"
                            # rds_engine           = ""mysql"
                            # rds_engine_version   = "5.7.16"
                            # rds_backup_retention = 7
                            # rds_parameters       = ""

                            # cache_subnet                     = "cache-subnet-id"
                            # elasticache_type                 = "cache.t2.micro"
                            # elasticache_nodes                = "1
                            # elasticache_parameter_group_name = "default.redis3.2"
                            # elasticache_engine               = "redis"
                            # elasticache_port                 = "6379"
                            # front_count           = "1"
                            # front_disk_size       = "60"
                            # front_disk_type       = "gp2"
                            # front_type            = "t2.small"

                          }
                  dev:
                    pipeline:
                      pipeline:
                        path: pipeline/magento.yml
                        content: |
                          groups:

                          - name: magento-((env))
                            jobs:
                            - magento-((env))-build
                            - full-deploy-front-magento-((env))
                            - app-deploy-front-magento-((env))
                            - terraform-plan-magento-((env))
                            - terraform-apply-magento-((env))
                            - magento-((env))-unittests
                            - magento-((env))-functional-tests

                          resource_types:

                          - name: terraform
                            type: docker-image
                            source:
                              repository: ljfranklin/terraform-resource

                          resources:

                          - name: terraform-magento-((env))
                            type: terraform
                            source:
                              storage:
                                bucket: ((terraform_storage_bucket_name))
                                bucket_path: ((terraform_storage_bucket_path))
                                region_name: ((aws_default_region))
                                access_key_id: "((terraform_storage_access_key))"
                                secret_access_key: "((terraform_storage_secret_key))"
                              vars:
                                access_key: ((aws_access_key))
                                secret_key: ((aws_secret_key))
                              env:
                                AWS_ACCESS_KEY_ID: ((aws_access_key))
                                AWS_DEFAULT_REGION: ((aws_default_region))
                                AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
                      variables:
                        path: pipeline/variables.sample.yml
                        destination: pipeline/prod-variables.yml
                        content: |
                          env: dev
                          magento_deploy_bucket_name: magento-deploy
                          magento_deploy_bucket_object_path: /catalog-magento/dev/magento.tar.gz
                          magento_deploy_bucket_region: eu-west-1
                          magento_deploy_bucket_access_key: ...
                          magento_deploy_bucket_secret_access_key: ...
                          terraform_storage_access_key: ...
                          terraform_storage_secret_key: ...
                          terraform_storage_bucket_name: magento-terraform-remote-state
                          terraform_storage_bucket_path: magento/dev
                          aws_access_key: ...
                          aws_secret_key: ...
                          aws_default_region: eu-west-1

                          ansible_vault_password: ...
                          bastion_url: admin@bastion.server.com
                          bastion_private_key_pair: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          catalog_magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          magento_git_repository: git@github.com:myuser/code-magento.git
                          magento_git_branch: master
                          magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----


                          magento_config_git_repository: git@github.com:myuser/config-magento.git
                          magento_config_git_branch: master
                          magento_config_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----
                    ansible:
                      magento:
                        path: ansible/environments/front.yml.sample
                        destination: ansible/environments/dev-front.yml
                        content: |
                          # In this file you could override any variables present in default_front.yaml file

                          # Usually you might want to override those variables :
                          # magento_backend_frontname: admin
                          # magento_admin_firstname: admin
                          # magento_admin_lastname: admin
                          # magento_admin_email: root@localhost.local
                          # magento_admin_user: admin

                          # magento_admin_password: 4Bigs3cr3t

                          # In case you want to use vault to encrypt this password use the following command to generate the ansible vault var :
                          # echo -n "4Bigs3cr3t" | ansible-vault encrypt_string --stdin-name=magento_admin_password
                          #>> magento_admin_password: !vault |
                          #>>           $ANSIBLE_VAULT;1.1;AES256
                          #>>           37363232383334316164366337366430316535636130376134323366313565356365363662653539
                          #>>           3161303331303565643831383839626263653362636466660a316530613935393464366536383839
                          #>>           30303836326138306339623431356234333239343435623333343333623938633761636132303662
                          #>>           3135343861383531660a393934316237363961663865393939313966373838653339326565353263
                          #>>           6238
                    terraform:
                      magento:
                        path: terraform/magento.tf.sample
                        destination: terraform/magento/dev/magento.tf
                        content: |
                          variable "rds_password" {
                              default = "ChangeMePls"
                          }

                          module "magento" {
                            source = "module-magento"

                            env                      = "prod"
                            vpc_id                   = "<vpc-id>"
                            private_subnets_ids      = ["private-subnets"]
                            magento_ssl_cert         = "<ssl-cert-arn>"
                            bastion_sg_allow         = "<bastion-sg>"
                            public_subnets_ids       = ["<public-subnets>"]

                            rds_password             = "${var.rds_password}"

                            # project = "magento"

                            # FIXME optimized false : should be changes with the instance type ?

                            # rds_database         = "magento"
                            # rds_disk_size        = 10
                            # rds_multiaz          = false
                            # rds_storage_type     = "gp2"
                            # rds_subnet           = "<rds-subnet-id>"
                            # rds_type             = "db.t2.small"
                            # rds_username         = "magento"
                            # rds_engine           = ""mysql"
                            # rds_engine_version   = "5.7.16"
                            # rds_backup_retention = 7
                            # rds_parameters       = ""

                            # cache_subnet                     = "cache-subnet-id"
                            # elasticache_type                 = "cache.t2.micro"
                            # elasticache_nodes                = "1
                            # elasticache_parameter_group_name = "default.redis3.2"
                            # elasticache_engine               = "redis"
                            # elasticache_port                 = "6379"
                            # front_count           = "1"
                            # front_disk_size       = "60"
                            # front_disk_type       = "gp2"
                            # front_type            = "t2.small"

                          }
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/forms/validate:
    post:
      tags:
      - Organization Forms
      description: Validate a forms file definition
      operationId: validateFormsFile
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The content of the forms file to be validated.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/FormsValidation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormsValidation'
        required: true
      responses:
        "200":
          description: The result of validating the provided configuration
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormsValidationResult'
              example:
                data:
                  forms:
                    version: 2
                    use_cases:
                    - name: prod
                      sections:
                      - name: ansible
                        groups:
                        - name: database
                          technologies:
                          - ansible
                          vars:
                          - widget: radios
                            default:
                              foo: bar
                            unit: "($, GHz, GB)"
                            type: map
                            values:
                            - foo: bar
                            - bar: foo
                            description: ""
                            key: key-one
                            name: map variable
                          - widget: checkbox
                            default: true
                            type: boolean
                            description: ""
                            key: key-oneb
                            name: checkbox variable
                          - widget: dropdown
                            required: false
                            default:
                            - bar
                            - foo
                            values:
                            - - foo
                              - bar
                            - - bar
                              - foo
                            unit: "($, GHz, GB)"
                            type: array
                            description: something k2
                            key: key-two
                            name: array variable
                          - widget: number
                            required: true
                            unit: something
                            type: integer
                            description: something k3
                            key: key-three
                            name: required variable without default
                          - widget: number
                            required: false
                            type: float
                            description: something k3b
                            key: key-threeb
                            name: some float
                          - widget: dropdown
                            required: false
                            default: 20
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k5
                            values:
                            - 20
                            key: key-five
                            name: dropdown one value
                          - widget: radios
                            required: false
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k6
                            values:
                            - 20
                            key: key-six
                            name: radios one value
                          - widget: slider_list
                            required: false
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k7
                            values:
                            - 20
                            key: key-seven
                            name: slider list one value
                      - name: terraform
                        groups:
                        - name: database
                          technologies:
                          - terraform
                          vars:
                          - widget: slider_range
                            required: false
                            default: 2
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k1
                            values:
                            - 1
                            - 10
                            key: key-eight
                            name: integer variable
                          - widget: dropdown
                            required: true
                            default: 20
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k2
                            values:
                            - 10
                            - 20
                            - 30
                            key: key-nine
                            name: required with default
                          - widget: slider_list
                            required: false
                            values:
                            - 1
                            - 5
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k3
                            key: key-ten
                            name: not required no default
                      - name: pipeline
                        groups:
                        - name: database
                          technologies:
                          - pipeline
                          vars:
                          - widget: auto_complete
                            default: t2.micro
                            unit: "($, GHz, GB)"
                            type: string
                            description: something
                            values:
                            - t2.micro
                            - t2.medium
                            - t2.large
                            key: key-eleven
                            name: string with values and default
                          - widget: dropdown
                            required: false
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k5
                            key: key-twelve
                            values:
                            - 100
                            - 200
                            name: "not required no default, but values"
                          - widget: dropdown
                            required: false
                            unit: "($, GHz, GB)"
                            type: integer
                            description: something k6
                            key: key-thirteen
                            name: "not required no default, but values"
                            values:
                            - 10
                            - 40
                            - 80
                    - name: dev
                      sections:
                      - name: ansible
                        groups:
                        - name: database
                          technologies:
                          - ansible
                          vars:
                          - widget: dropdown
                            default:
                              foo: bar
                            unit: "($, GHz, GB)"
                            type: map
                            values:
                            - foo: bar
                            - bar: foo
                            description: something k1
                            key: key-one
                            name: map variable
                    - name: extra-one
                      sections:
                      - name: ansible
                        groups:
                        - name: database
                          technologies:
                          - ansible
                          vars:
                          - widget: switch
                            type: boolean
                            description: ""
                            key: key-two
                            name: switch variable
                          - widget: dropdown
                            default:
                              foo: bar
                            unit: "($, GHz, GB)"
                            type: map
                            values:
                            - foo: bar
                            - bar: foo
                            description: something k1
                            key: key-one
                            name: map variable
                  errors:
                  - "The Forms File has an invalid format: use case \"use-caseX\"\
                    \ invalid definition for variable \"key-one\" (key) in section\
                    \ \"ansible\" of \"database\": The Forms Widget has an invalid\
                    \ format"
                  - "The Forms File has an invalid format: use case \"use-caseX\"\
                    \ invalid definition for variable \"key-two\" (key) in section\
                    \ \"ansible\" of \"database\": The Forms Widget has an invalid\
                    \ format"
                  - "The Forms File has an invalid format: use case \"use-caseX\"\
                    \ invalid definition for variable \"key-four\" (key) in section\
                    \ \"ansible\" of \"database\": The Forms Widget has an invalid\
                    \ format"
                  - "The Forms File has an invalid format: use case \"use-caseX\"\
                    \ invalid definition for variable \"key-five\" (key) in section\
                    \ \"ansible\" of \"database\": The Forms Widget has an invalid\
                    \ format"
                  - "The Forms File has an invalid format: use case \"default\" invalid\
                    \ definition for variable \"key-two\" (key) in section \"ansible\"\
                    \ of \"database\": The Forms Widget has an invalid format"
                  - "The Forms File has an invalid format: use case \"default\" -\
                    \ key \"key-one\" has been found twice"
                  - "The Forms File has an invalid format: use case \"default\" -\
                    \ key \"key-two\" has been found twice"
                  - "The Forms File has an invalid format: Forms Technology \"INVALID-TECH\"\
                    \ is unknown"
                  - "The Forms File has an invalid format: use case \"default\" invalid\
                    \ definition for variable \"key-two\" (key) in section \"ansible\"\
                    \ of \"groupX\": The Forms File Branch Source has an invalid format"
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/forms/estimate:
    post:
      tags:
      - Cost Estimation
      description: Estimates the Cost from the Froms Inputs
      operationId: costEstimateForms
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      requestBody:
        description: The information of the filled forms for a new project.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/FormInputs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormInputs'
        required: true
      responses:
        "200":
          description: The result of estimating the costs of a stack.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
              example:
                data:
                  prod:
                    usecase:
                    - name: some name
                      info: some potential info here
                      prior_cost: "10.544"
                      prior_hourly_cost: "0.01444"
                      planned_cost: "30.252"
                      planned_hourly_cost: "0.04144"
                      resource_estimates:
                      - provider: aws
                        type: aws_instance
                        address: aws_instance.example
                        prior_cost: "10.544"
                        prior_hourly_cost: "0.01444"
                        planned_cost: "30.252"
                        planned_hourly_cost: "0.04144"
                        components:
                        - label: Compute
                          prior:
                            cost: "5.00"
                            hourly_cost: "0.00685"
                            quantity: 1
                          planned:
                            cost: "5.00"
                            hourly_cost: "0.00685"
                            quantity: 1
                        - label: Storage
                          prior:
                            cost: "5.544"
                            hourly_cost: "0.00759"
                            quantity: 30
                          planned:
                            cost: "25.252"
                            hourly_cost: "0.03459"
                            quantity: 150
                    - name: some 2
                      info: some potential info here
                      prior_cost: "10.544"
                      prior_hourly_cost: "0.01444"
                      planned_cost: "30.252"
                      planned_hourly_cost: "0.04144"
                      resource_estimates:
                      - provider: aws
                        type: aws_instance
                        address: aws_instance.example
                        prior_cost: "10.544"
                        prior_hourly_cost: "0.01444"
                        planned_cost: "30.252"
                        planned_hourly_cost: "0.04144"
                        components:
                        - label: Compute
                          prior:
                            cost: "5.00"
                            hourly_cost: "0.00685"
                            quantity: 1
                          planned:
                            cost: "5.00"
                            hourly_cost: "0.00685"
                            quantity: 1
                        - label: Storage
                          prior:
                            cost: "5.544"
                            hourly_cost: "0.00759"
                            quantity: 30
                          planned:
                            cost: "25.252"
                            hourly_cost: "0.03459"
                            quantity: 150
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/forms/quotas:
    post:
      tags:
      - Organization Quotas
      description: Estimates the Quotas from the Form Inputs
      operationId: quotasEstimateForms
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      requestBody:
        description: The information of the filled forms for a new project.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/FormInputs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormInputs'
        required: true
      responses:
        "200":
          description: The result of estimating the costs of a stack.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
              example:
                data:
                  prod:
                    usecase:
                      cpu: 10
                      memory: 20
                      storage: 30
                    usecase2:
                      cpu: 20
                      memory: 20
                      storage: 10
                  dev:
                    usecase-dev:
                      cpu: 10
                      memory: 20
                      storage: 30
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/infra_imports:
    post:
      tags:
      - Organization Infra Imports
      description: Create a new Infra Import
      operationId: createInfraImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the Infra Import to create
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewInfraImport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewInfraImport'
        required: true
      responses:
        "202":
          description: The Infra Import has been created and processing in the background
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/import:
    get:
      tags:
      - Organization Infra Imports
      description: Get the Project Import of the organization.
      operationId: getProjectImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "200":
          description: The information of the Project import process.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraImport'
              example:
                data:
                  status: Importing
                  project_canonical: my-project-1
                  service_catalog_ref: cycloidio:stack-magento
                  logs: The Provider1 Resource has been imported
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    delete:
      tags:
      - Organization Infra Imports
      description: Delete the Project Import of the organization.
      operationId: deleteProjectImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "204":
          description: The Project Import has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/import/retry:
    put:
      tags:
      - Organization Infra Imports
      description: Retry to import a Project.
      operationId: retryProjectImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "202":
          description: The request to retry the Project import has been accepted and
            processing in the background
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import:
    get:
      tags:
      - Organization Infra Imports
      description: Get the import of a new Stack of the organization.
      operationId: getServiceCatalogImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the Stack import process.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraImport'
              example:
                data:
                  status: Importing
                  project_canonical: my-project-1
                  service_catalog_ref: cycloidio:stack-magento
                  logs:
                  - Imported Resource 1
                  - Imported Resource 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    delete:
      tags:
      - Organization Infra Imports
      description: Delete the Stack import of the organization.
      operationId: deleteServiceCatalogImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: The Stack import has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry:
    put:
      tags:
      - Organization Infra Imports
      description: Retry to import a Stack.
      operationId: retryServiceCatalogImport
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "202":
          description: The request to retry the Stack import has been accepted and
            processing in the background
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/infra_policies:
    get:
      tags:
      - Organization Infrastructure Policies
      description: Return a list of infrastructure policies which matches the scope
        specified by the filter.
      operationId: getInfraPolicies
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: infra_policy_name
        in: query
        description: Search by InfraPolicy's name
        schema:
          type: string
      - name: infra_policy_created_at
        in: query
        description: Search by InfraPolicy's creation date
        schema:
          type: integer
          format: uint64
      - name: infra_policy_severity
        in: query
        description: Search by InfraPolicy's severity
        schema:
          type: string
          enum:
          - critical
          - warning
          - advisory
      - name: infra_policy_enabled
        in: query
        description: Search by InfraPolicy's enabled
        schema:
          type: boolean
      - name: infra_policy_canonical
        in: query
        description: Search by infra policy canonical
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      responses:
        "200":
          description: List of infrastructure policies.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InfraPolicy'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: My Infra Policy
                  description: Apply changes across my infrastructure in a safe way!
                  canonical: my-infra-policy
                  raw: "allow = true {count(violation) == 0}"
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      policies:
                      - id: 1
                        code: team:create
                        description: this is the policy
                  enabled: true
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Infrastructure Policies
      description: Create a new policy.
      operationId: createInfraPolicy
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewInfraPolicy'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewInfraPolicy'
        required: true
      responses:
        "200":
          description: The new InfraPolicy created.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraPolicy'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: My Infra Policy
                  description: Apply changes across my infrastructure in a safe way!
                  canonical: my-infra-policy
                  raw: "allow = true {count(violation) == 0}"
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      policies:
                      - id: 1
                        code: team:create
                        description: this is the policy
                  enabled: true
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}:
    get:
      tags:
      - Organization Infrastructure Policies
      description: Get the information of the InfraPolicy.
      operationId: getInfraPolicy
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: infra_policy_canonical
        in: path
        description: The canonical of an InfraPolicy.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the InfraPolicy which has the specified
            canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraPolicy'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: My Infra Policy
                  description: Apply changes across my infrastructure in a safe way!
                  canonical: my-infra-policy
                  raw: "allow = true {count(violation) == 0}"
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      policies:
                      - id: 1
                        code: team:create
                        description: this is the policy
                  enabled: true
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Infrastructure Policies
      description: Update an existing InfraPolicy
      operationId: updateInfraPolicy
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: infra_policy_canonical
        in: path
        description: The canonical of an InfraPolicy.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateInfraPolicy'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateInfraPolicy'
        required: true
      responses:
        "200":
          description: InfraPolicy updated.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraPolicy'
              example:
                data:
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: My Infra Policy
                  description: Apply changes across my infrastructure in a safe way!
                  canonical: my-infra-policy
                  body: "allow = true {count(violation) == 0}"
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 42
                      name: standard role
                      description: this is the standard role
                      policies:
                      - id: 1
                        code: team:create
                        description: this is the policy
                  enabled: true
                  severity: critical
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Infrastructure Policies
      description: Delete the InfraPolicy.
      operationId: deleteInfraPolicy
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: infra_policy_canonical
        in: path
        description: The canonical of an InfraPolicy.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: InfraPolicy has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/validate_infra_policies
  : post:
      tags:
      - Organization Infrastructure Policies
      description: Check the InfraPolicies assigned to the Project and the Environment
        to identify if some are not respected.
      operationId: validateProjectInfraPolicies
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      requestBody:
        description: The project's attributes to check before to apply an infrastructure
          change.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformPlanInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformPlanInput'
        required: true
      responses:
        "200":
          description: The list of the policies not respected.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfraPoliciesValidationResult'
              example:
                data:
                  criticals:
                  - infra_policy: null
                    id: 8
                    created_at: 1606735667
                    updated_at: 1606735667
                    canonical: infrapolicy-1
                    name: InfraPolicy 1
                    description: This is an example
                    body: |-
                      package example

                      deny[reason] {
                          reason := "This is a failing error example"
                      }
                    owner:
                      username: user-1
                      id: 1
                      given_name: Mariano
                      family_name: Jimenez
                      email: mariano.jimenez@fakeemail.com
                      picture_url: https://avatars2.githubusercontent.com/u/14579210
                      created_at: 1503225026
                      role:
                        id: 42
                        name: standard role
                        description: this is the standard role
                        policies:
                        - id: 1
                          code: team:read
                          description: this is the policy
                    severity: critical
                    enabled: true
                  reasons:
                  - This is a failing error example
                  warnings: []
                  advisories: []
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/infrastructures/aws/buckets:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of S3 buckets of the running AWS infrastructure and
        associated with the AWS account (credential). The parameters allow to select
        the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSBuckets
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS S3 buckets which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceBucket'
                description: "Although this response contains a collection of items,\
                  \ it doesn't have pagination because the AWS SDK, to request the\
                  \ S3 Buckets resources, doesn't provide any pagination mechanism."
              example:
                data:
                - CreationDate: 2017-03-29T05:15:27Z
                  Name: config-bucket-123456789101
                  Tags: []
                - CreationDate: 2017-03-29T01:12:21Z
                  Name: data-some-log-dbm
                  Tags:
                  - Key: client
                    Value: Cycloid
                - CreationDate: 2017-03-29T10:28:14Z
                  Name: dev-sdk.web.fr
                  Tags: []
                - CreationDate: 2017-06-19T14:57:15Z
                  Name: marianorajoy.es
                  Tags:
                  - Key: owner
                    Value: Mariano Rajoy
                - CreationDate: 2017-03-29T18:01:25Z
                  Name: dtrump.com
                  Tags: []
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws:
    get:
      tags:
      - Organization Infrastructure
      description: "Get the number of resources classified by types, of the running\
        \ AWS infrastructure of the organization and associated AWS account (credential).\
        \ The parameters allow to select the scope of the request to one project of\
        \ the organization and/or a set of type of resource."
      operationId: getRunningInfraAWS
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: resource
        in: query
        description: Supported AWS type of resource to query. The parameter can be
          specified several times in order to request for different kind of resources.
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - instances
            - vpcs
            - images
            - security_groups
            - subnets
            - volumes
            - snapshots
            - cache_clusters
            - load_balancers_v1
            - load_balancers_v2
            - db_instances
            - buckets
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The number of resources classified per type which matches the
            scope specified by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AWSInfrastructureResourcesAggregation'
              example:
                data:
                  instances:
                    total_amount: 94875
                  vpcs:
                    total_amount: 98
                  images:
                    total_amount: 6
                  security_groups:
                    total_amount: 9
                  subnets:
                    total_amount: 31
                  volumes:
                    total_amount: 45
                  snapshots:
                    total_amount: 786
                  load_balancers_v2:
                    total_amount: 4
                  db_instances:
                    total_amount: 34
                  buckets:
                    total_amount: 10
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/db_instances:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of RDS DB instances of the running AWS infrastructure
        and associated with the AWS account (credential). The parameters allow to
        select the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSDBInstances
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS RDS DB Instances which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceDBInstance'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - AllocatedStorage: 50
                  AutoMinorVersionUpgrade: true
                  AvailabilityZone: eu-west-1b
                  BackupRetentionPeriod: 7
                  CACertificateIdentifier: rds-ca-2015
                  CharacterSetName: null
                  CopyTagsToSnapshot: false
                  DBClusterIdentifier: null
                  DBInstanceArn: arn:aws:rds:eu-west-1:123456789101:db:amazon-rds-api-gateway-dev
                  DBInstanceClass: db.t2.small
                  DBInstanceIdentifier: amazon-rds-api-gateway-dev
                  DBInstanceStatus: available
                  DBName: api_gateway_dev
                  DBParameterGroups:
                  - DBParameterGroupName: rds-optimized-postgresql-amazon-dev
                    ParameterApplyStatus: in-sync
                  DBSecurityGroups: null
                  DBSubnetGroup:
                    DBSubnetGroupArn: null
                    DBSubnetGroupDescription: subnet-rds-amazon-dev
                    DBSubnetGroupName: subnet-rds-amazon-dev
                    SubnetGroupStatus: Complete
                    Subnets:
                    - SubnetAvailabilityZone:
                        Name: eu-west-1b
                      SubnetIdentifier: subnet-1ee9cf68
                      SubnetStatus: Active
                    - SubnetAvailabilityZone:
                        Name: eu-west-1c
                      SubnetIdentifier: subnet-5ccca204
                      SubnetStatus: Active
                    - SubnetAvailabilityZone:
                        Name: eu-west-1a
                      SubnetIdentifier: subnet-53614d37
                      SubnetStatus: Active
                    VpcId: vpc-257d2d41
                  DbInstancePort: 0
                  DbiResourceId: db-LLW4DT3OHVULRQ4GLZWSJ3MOVQ
                  DomainMemberships: null
                  EnabledCloudwatchLogsExports: null
                  Endpoint:
                    Address: amazon-rds-api-gateway-dev.cwhghoaxsi70.eu-west-1.rds.amazonaws.com
                    HostedZoneId: Z29XKXDKYMONMX
                    Port: 5432
                  Engine: postgres
                  EngineVersion: 9.4.7
                  EnhancedMonitoringResourceArn: null
                  IAMDatabaseAuthenticationEnabled: false
                  InstanceCreateTime: 2017-12-05T18:21:34.311Z
                  Iops: null
                  KmsKeyId: null
                  LatestRestorableTime: 2018-02-06T11:40:39Z
                  LicenseModel: postgresql-license
                  MasterUsername: amazon
                  MonitoringInterval: 0
                  MonitoringRoleArn: null
                  MultiAZ: false
                  OptionGroupMemberships:
                  - OptionGroupName: default:postgres-9-4
                    Status: in-sync
                  PendingModifiedValues:
                    AllocatedStorage: null
                    BackupRetentionPeriod: null
                    CACertificateIdentifier: null
                    DBInstanceClass: null
                    DBInstanceIdentifier: null
                    DBSubnetGroupName: null
                    EngineVersion: null
                    Iops: null
                    LicenseModel: null
                    MasterUserPassword: null
                    MultiAZ: null
                    PendingCloudwatchLogsExports: null
                    Port: null
                    StorageType: null
                  PerformanceInsightsEnabled: false
                  PerformanceInsightsKMSKeyId: null
                  PreferredBackupWindow: 02:00-04:00
                  PreferredMaintenanceWindow: tue:06:00-tue:07:00
                  PromotionTier: null
                  PubliclyAccessible: false
                  ReadReplicaDBClusterIdentifiers: null
                  ReadReplicaDBInstanceIdentifiers: null
                  ReadReplicaSourceDBInstanceIdentifier: null
                  SecondaryAvailabilityZone: null
                  StatusInfos: null
                  StorageEncrypted: false
                  StorageType: gp2
                  TdeCredentialArn: null
                  Timezone: null
                  VpcSecurityGroups:
                  - Status: active
                    VpcSecurityGroupId: sg-64d29802
                  Tags: []
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/elasticache_clusters:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of Elasticache clusters of the running AWS infrastructure
        and associated with the AWS account (credential). The parameters allow to
        select the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSElasticacheClusters
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS elasticache clusters which matches the scope
            specified by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceElasticacheCluster'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - AtRestEncryptionEnabled: false
                  AuthTokenEnabled: false
                  AutoMinorVersionUpgrade: true
                  CacheClusterCreateTime: 2015-11-23T11:24:24.677Z
                  CacheClusterId: cache0
                  CacheClusterStatus: available
                  CacheNodeType: cache.t2.micro
                  CacheNodes: null
                  CacheParameterGroup:
                    CacheNodeIdsToReboot: null
                    CacheParameterGroupName: default.redis2.8
                    ParameterApplyStatus: in-sync
                  CacheSecurityGroups: null
                  CacheSubnetGroupName: amazon-cache0-eu-we1
                  ClientDownloadLandingPage: 'https://console.aws.amazon.com/elasticache/home#client-download:'
                  ConfigurationEndpoint: null
                  Engine: redis
                  EngineVersion: 2.8.23
                  NotificationConfiguration: null
                  NumCacheNodes: 1
                  PendingModifiedValues:
                    CacheNodeIdsToRemove: null
                    CacheNodeType: null
                    EngineVersion: null
                    NumCacheNodes: null
                  PreferredAvailabilityZone: eu-west-1a
                  PreferredMaintenanceWindow: tue:06:00-tue:07:00
                  ReplicationGroupId: null
                  SecurityGroups:
                  - SecurityGroupId: sg-fff37b9b
                    Status: active
                  SnapshotRetentionLimit: null
                  SnapshotWindow: null
                  TransitEncryptionEnabled: false
                  Tags:
                  - Key: project
                    Value: website
                  - Key: client
                    Value: cycloid
                  - Key: env
                    Value: prod
                  - Key: role
                    Value: cache
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/images:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of images of the running AWS infrastructure and associated
        with the AWS account (credential). The parameters allow to select the scope
        of the request to one project of the organization.
      operationId: getRunningInfraAWSImages
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS images which matches the scope specified by
            the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceImage'
                description: "Although this response contains a collection of items,\
                  \ it doesn't have pagination because the AWS SDK, to request the\
                  \ images resources, doesn't provide any pagination mechanism."
              example:
                data:
                - Architecture: x86_64
                  BlockDeviceMappings:
                  - DeviceName: /dev/xvda
                    Ebs:
                      DeleteOnTermination: true
                      Encrypted: false
                      Iops: null
                      KmsKeyId: null
                      SnapshotId: snap-e978d105
                      VolumeSize: 8
                      VolumeType: standard
                    NoDevice: null
                    VirtualName: null
                  CreationDate: 2016-05-24T21:14:11.000Z
                  Description: hashicorp vault
                  EnaSupport: null
                  Hypervisor: xen
                  ImageId: ami-01d94872
                  ImageLocation: 123456789101/vault
                  ImageOwnerAlias: null
                  ImageType: machine
                  KernelId: null
                  Name: vault
                  OwnerId: "123456789101"
                  Platform: null
                  ProductCodes: null
                  Public: false
                  RamdiskId: null
                  RootDeviceName: /dev/xvda
                  RootDeviceType: ebs
                  SriovNetSupport: null
                  State: available
                  StateReason: null
                  Tags: []
                  VirtualizationType: hvm
                - Architecture: x86_64
                  BlockDeviceMappings:
                  - DeviceName: /dev/xvda
                    Ebs:
                      DeleteOnTermination: true
                      Encrypted: false
                      Iops: null
                      KmsKeyId: null
                      SnapshotId: snap-0d4d246f98692cab9
                      VolumeSize: 8
                      VolumeType: gp2
                    NoDevice: null
                    VirtualName: null
                  CreationDate: 2017-09-15T17:45:50.000Z
                  Description: null
                  EnaSupport: null
                  Hypervisor: xen
                  ImageId: ami-34995b4d
                  ImageLocation: 123456789101/pipeline_demo 1505497225
                  ImageOwnerAlias: null
                  ImageType: machine
                  KernelId: null
                  Name: pipeline_demo 1505497225
                  OwnerId: "123456789101"
                  Platform: null
                  ProductCodes: null
                  Public: false
                  RamdiskId: null
                  RootDeviceName: /dev/xvda
                  RootDeviceType: ebs
                  SriovNetSupport: simple
                  State: available
                  StateReason: null
                  Tags:
                  - Key: client
                    Value: cycloid
                  - Key: env
                    Value: demo
                  - Key: Name
                    Value: demo-pipeline-1505497225
                  - Key: role
                    Value: front
                  - Key: project
                    Value: demo-website
                  VirtualizationType: hvm
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/instances:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of instances of the running AWS infrastructure and
        associated with the AWS account (credential). The parameters allow to select
        the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSInstances
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS instances which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceInstance'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - AmiLaunchIndex: 0
                  Architecture: x86_64
                  BlockDeviceMappings:
                  - DeviceName: /dev/xvda
                    Ebs:
                      AttachTime: 2016-09-02T08:07:12Z
                      DeleteOnTermination: true
                      Status: attached
                      VolumeId: vol-c888994f
                  ClientToken: ""
                  EbsOptimized: false
                  ElasticGpuAssociations: null
                  EnaSupport: null
                  Hypervisor: xen
                  IamInstanceProfile:
                    Arn: arn:aws:iam::123456789101:instance-profile/profile-front-website-prod
                    Id: AIPAJFKQFTYM7KEEE2SWU
                  ImageId: ami-e079f893
                  InstanceId: i-2000dcad
                  InstanceLifecycle: null
                  InstanceType: t2.micro
                  KernelId: null
                  KeyName: cycloid
                  LaunchTime: 2016-09-19T07:11:18Z
                  Monitoring:
                    State: disabled
                  NetworkInterfaces:
                  - Association:
                      IpOwnerId: amazon
                      PublicDnsName: ec2-54-192-0-1.eu-west-1.compute.amazonaws.com
                      PublicIp: 54.192.0.1
                    Attachment:
                      AttachTime: 2016-09-02T08:07:11Z
                      AttachmentId: eni-attach-10d509cf
                      DeleteOnTermination: true
                      DeviceIndex: 0
                      Status: attached
                    Description: ""
                    Groups:
                    - GroupId: sg-64565003
                      GroupName: website-front-prod
                    - GroupId: sg-3543334e
                      GroupName: allow_metrics
                    - GroupId: sg-c1db70a6
                      GroupName: allow_bastion
                    Ipv6Addresses: null
                    MacAddress: 06:9a:1a:77:6c:db
                    NetworkInterfaceId: eni-b1f859fd
                    OwnerId: "123456789101"
                    PrivateDnsName: ip-10-42-0-2.eu-west-1.compute.internal
                    PrivateIpAddress: 10.42.0.2
                    PrivateIpAddresses:
                    - Association:
                        IpOwnerId: amazon
                        PublicDnsName: ec2-54-192-0-1.eu-west-1.compute.amazonaws.com
                        PublicIp: 54.192.0.1
                      Primary: true
                      PrivateDnsName: ip-10-42-0-2.eu-west-1.compute.internal
                      PrivateIpAddress: 10.42.0.2
                    SourceDestCheck: true
                    Status: in-use
                    SubnetId: subnet-6b5a8f1d
                    VpcId: vpc-21fb3e45
                  Placement:
                    Affinity: null
                    AvailabilityZone: eu-west-1b
                    GroupName: ""
                    HostId: null
                    SpreadDomain: null
                    Tenancy: default
                  Platform: null
                  PrivateDnsName: ip-10-42-0-2.eu-west-1.compute.internal
                  PrivateIpAddress: 10.42.0.2
                  ProductCodes: null
                  PublicDnsName: ec2-54-192-0-1.eu-west-1.compute.amazonaws.com
                  PublicIpAddress: 54.192.0.1
                  RamdiskId: null
                  RootDeviceName: /dev/xvda
                  RootDeviceType: ebs
                  SecurityGroups:
                  - GroupId: sg-64565003
                    GroupName: website-front-prod
                  - GroupId: sg-3543334e
                    GroupName: allow_metrics
                  - GroupId: sg-c1db70a6
                    GroupName: allow_bastion
                  SourceDestCheck: true
                  SpotInstanceRequestId: null
                  SriovNetSupport: null
                  State:
                    Code: 16
                    Name: running
                  StateReason:
                    Code: Client.UserInitiatedShutdown
                    Message: "Client.UserInitiatedShutdown: User initiated shutdown"
                  StateTransitionReason: ""
                  SubnetId: subnet-6b5a8f1d
                  Tags:
                  - Key: project
                    Value: website
                  - Key: client
                    Value: cycloid
                  - Key: Name
                    Value: CYCLOID-WEBSITE-FRONT1-EU-WE1-PROD
                  - Key: env
                    Value: prod
                  - Key: role
                    Value: front
                  VirtualizationType: hvm
                  VpcId: vpc-21fb3e45
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/load_balancers_v1:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of load balancers (ELB) of the running AWS infrastructure
        and associated with the AWS account (credential). The parameters allow to
        select the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSLoadBalancersV1
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS load balancers (ELB) which matches the scope
            specified by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceLoadBalancerV1'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - AvailabilityZones:
                  - eu-west-1b
                  - eu-west-1c
                  - eu-west-1a
                  BackendServerDescriptions: null
                  CanonicalHostedZoneName: WEBSITE-FRONT-PROD-1234567890.eu-west-1.elb.amazonaws.com
                  CanonicalHostedZoneNameID: Z32O12XQLNTSW2
                  CreatedTime: 2016-09-02T08:07:35.52Z
                  DNSName: WEBSITE-FRONT-PROD-1234567890.eu-west-1.elb.amazonaws.com
                  HealthCheck:
                    HealthyThreshold: 2
                    Interval: 30
                    Target: HTTP:80/
                    Timeout: 20
                    UnhealthyThreshold: 2
                  Instances:
                  - InstanceId: i-2000dcdd
                  - InstanceId: i-911b05af
                  ListenerDescriptions:
                  - Listener:
                      InstancePort: 80
                      InstanceProtocol: HTTP
                      LoadBalancerPort: 80
                      Protocol: HTTP
                      SSLCertificateId: null
                    PolicyNames: null
                  - Listener:
                      InstancePort: 80
                      InstanceProtocol: HTTP
                      LoadBalancerPort: 443
                      Protocol: HTTPS
                      SSLCertificateId: arn:aws:iam::123456789101:server-certificate/cloudfront/example
                    PolicyNames:
                    - website-front-prod
                    - ELBSecurityPolicy-2016-08
                  LoadBalancerName: WEBSITE-FRONT-PROD
                  Policies:
                    AppCookieStickinessPolicies: null
                    LBCookieStickinessPolicies:
                    - CookieExpirationPeriod: 3600
                      PolicyName: website-front-prod
                    OtherPolicies:
                    - ELBSecurityPolicy-2016-08
                  Scheme: internet-facing
                  SecurityGroups:
                  - sg-9c494ffb
                  SourceSecurityGroup:
                    GroupName: website-elb-front-prod
                    OwnerAlias: "123456789101"
                  Subnets:
                  - subnet-550fac31
                  - subnet-6b5a8f1d
                  - subnet-b95dbde1
                  VPCId: vpc-21fb3e45
                  Tags:
                  - Key: client
                    Value: cycloid
                - AvailabilityZones:
                  - eu-west-1b
                  - eu-west-1c
                  - eu-west-1a
                  BackendServerDescriptions: null
                  CanonicalHostedZoneName: WEBSITE-FRONT-PREPROD-1234567890.eu-west-1.elb.amazonaws.com
                  CanonicalHostedZoneNameID: Z32O12XQLNTSW2
                  CreatedTime: 2016-09-02T08:07:35.91Z
                  DNSName: WEBSITE-FRONT-PREPROD-1234567890.eu-west-1.elb.amazonaws.com
                  HealthCheck:
                    HealthyThreshold: 2
                    Interval: 30
                    Target: HTTP:80/
                    Timeout: 20
                    UnhealthyThreshold: 2
                  Instances:
                  - InstanceId: i-ab00dc26
                  - InstanceId: i-9ec9a815
                  ListenerDescriptions:
                  - Listener:
                      InstancePort: 80
                      InstanceProtocol: HTTP
                      LoadBalancerPort: 80
                      Protocol: HTTP
                      SSLCertificateId: null
                    PolicyNames: null
                  - Listener:
                      InstancePort: 80
                      InstanceProtocol: HTTP
                      LoadBalancerPort: 443
                      Protocol: HTTPS
                      SSLCertificateId: arn:aws:iam::123456789101:server-certificate/cloudfront/example
                    PolicyNames:
                    - website-front-preprod
                    - ELBSecurityPolicy-2016-08
                  LoadBalancerName: WEBSITE-FRONT-PREPROD
                  Policies:
                    AppCookieStickinessPolicies: null
                    LBCookieStickinessPolicies:
                    - CookieExpirationPeriod: 3600
                      PolicyName: AWSConsole-LBCookieStickinessPolicy-WEBSITE-FRONT-PREPROD-1473338142315
                    - CookieExpirationPeriod: 3600
                      PolicyName: AWSConsole-LBCookieStickinessPolicy-WEBSITE-FRONT-PREPROD-1473337367977
                    - CookieExpirationPeriod: 3600
                      PolicyName: website-front-preprod
                    - CookieExpirationPeriod: 3600
                      PolicyName: AWSConsole-LBCookieStickinessPolicy-WEBSITE-FRONT-PREPROD-1473337375883
                    OtherPolicies:
                    - ELBSecurityPolicy-2016-08
                  Scheme: internet-facing
                  SecurityGroups:
                  - sg-9b494ffc
                  SourceSecurityGroup:
                    GroupName: website-elb-front-preprod
                    OwnerAlias: "123456789101"
                  Subnets:
                  - subnet-550fac31
                  - subnet-6b5a8f1d
                  - subnet-b95dbde1
                  VPCId: vpc-21fb3e45
                  Tags: []
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/load_balancers_v2:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of load balancers (ELB v2 or a.k.a ALB)  of the running
        AWS infrastructure and associated with the AWS account (credential). The parameters
        allow to select the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSLoadBalancersV2
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS load balancers (ELB v2 or a.k.a ALB) which
            matches the scope specified by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceLoadBalancerV2'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - AvailabilityZones:
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-225f3155
                    ZoneName: eu-west-1b
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-74f1712d
                    ZoneName: eu-west-1c
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-cd793fa8
                    ZoneName: eu-west-1a
                  CanonicalHostedZoneId: Z32O12XQLNTSW2
                  CreatedTime: 2016-12-14T15:32:58.83Z
                  DNSName: alb-amazon-front-prex-1234567890.eu-west-1.elb.amazonaws.com
                  IpAddressType: ipv4
                  LoadBalancerArn: arn:aws:elasticloadbalancing:eu-west-1:123456789101:loadbalancer/app/alb-amazon-front-prex/f81f78ed3ec382cf
                  LoadBalancerName: alb-amazon-front-prex
                  Scheme: internet-facing
                  SecurityGroups:
                  - sg-4c10e028
                  State:
                    Code: active
                    Reason: null
                  Type: application
                  VpcId: vpc-315ed454
                  Tags: []
                - AvailabilityZones:
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-3ba8a072
                    ZoneName: eu-west-1b
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-45d1d622
                    ZoneName: eu-west-1a
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-6b034030
                    ZoneName: eu-west-1c
                  CanonicalHostedZoneId: Z32O12XQLNTSW2
                  CreatedTime: 2017-12-19T09:12:39.84Z
                  DNSName: amazon-apicache-staging-1234567890.eu-west-1.elb.amazonaws.com
                  IpAddressType: ipv4
                  LoadBalancerArn: arn:aws:elasticloadbalancing:eu-west-1:123456789101:loadbalancer/app/amazon-apicache-staging/f6404ce290fc3434
                  LoadBalancerName: amazon-apicache-staging
                  Scheme: internet-facing
                  SecurityGroups:
                  - sg-02510079
                  State:
                    Code: active
                    Reason: null
                  Type: application
                  VpcId: vpc-d7d3cdb0
                  Tags:
                  - Key: client
                    Value: cycloid
                - AvailabilityZones:
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-1fe9cf69
                    ZoneName: eu-west-1b
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-5e614d3a
                    ZoneName: eu-west-1a
                  - LoadBalancerAddresses: null
                    SubnetId: subnet-5ecca206
                    ZoneName: eu-west-1c
                  CanonicalHostedZoneId: Z32O12XQLNTSW2
                  CreatedTime: 2017-12-19T17:08:25.2Z
                  DNSName: amazon-apicache-dev-1234567890.eu-west-1.elb.amazonaws.com
                  IpAddressType: ipv4
                  LoadBalancerArn: arn:aws:elasticloadbalancing:eu-west-1:123456789101:loadbalancer/app/amazon-apicache-dev/9f76887ef888cf4a
                  LoadBalancerName: amazon-apicache-dev
                  Scheme: internet-facing
                  SecurityGroups:
                  - sg-3980d042
                  State:
                    Code: active
                    Reason: null
                  Type: application
                  VpcId: vpc-257d2d41
                  Tags: []
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/security_groups:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of security groups of the running AWS infrastructure
        and associated with the AWS account (credential). The parameters allow to
        select the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSSecurityGroups
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS security groups which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceSecurityGroup'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - Description: Allow metrics server to collect metrics
                  GroupId: sg-35c7b54e
                  GroupName: test_allow_metrics
                  IpPermissions:
                  - FromPort: 9100
                    IpProtocol: tcp
                    IpRanges: null
                    Ipv6Ranges: null
                    PrefixListIds: null
                    ToPort: 9100
                    UserIdGroupPairs:
                    - Description: null
                      GroupId: sg-cada71ad
                      GroupName: null
                      PeeringStatus: active
                      UserId: "123456789101"
                      VpcId: vpc-21fb3e45
                      VpcPeeringConnectionId: pcx-ab75ccc2
                  IpPermissionsEgress:
                  - FromPort: null
                    IpProtocol: "-1"
                    IpRanges:
                    - CidrIp: 0.0.0.0/0
                      Description: null
                    Ipv6Ranges: null
                    PrefixListIds: null
                    ToPort: null
                    UserIdGroupPairs: null
                  OwnerId: "123456789101"
                  Tags:
                  - Key: project
                    Value: infra
                  - Key: Name
                    Value: allow-metrics
                  - Key: client
                    Value: cycloid
                  VpcId: vpc-0296ad66
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/snapshots:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of snapshots of the running AWS infrastructure and
        associated with the AWS account (credential). The parameters allow to select
        the scope of the request to one project of the organization.
      operationId: getRunningInfraAWSSnapshots
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS snapshots which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceSnapshot'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - DataEncryptionKeyId: null
                  Description: Created by CreateImage(i-7c6ea6bc) for ami-67affc14
                    from vol-fadc527c
                  Encrypted: false
                  KmsKeyId: null
                  OwnerAlias: null
                  OwnerId: "123456789101"
                  Progress: 100%
                  SnapshotId: snap-f4c73492
                  StartTime: 2016-11-17T16:17:18Z
                  State: completed
                  StateMessage: null
                  Tags: []
                  VolumeId: vol-fadc527c
                  VolumeSize: 8
                - DataEncryptionKeyId: null
                  Description: Created by CreateImage(i-78a845ee) for ami-9d5a09ee
                    from vol-73d82bc3
                  Encrypted: false
                  KmsKeyId: null
                  OwnerAlias: null
                  OwnerId: "123456789101"
                  Progress: 100%
                  SnapshotId: snap-94f92ff2
                  StartTime: 2016-11-16T16:46:39Z
                  State: completed
                  StateMessage: null
                  Tags: []
                  VolumeId: vol-73d82bc3
                  VolumeSize: 8
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/subnets:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of subnets of the running AWS infrastructure and associated
        with the AWS account (credential). The parameters allow to select the scope
        of the request to one project of the organization.
      operationId: getRunningInfraAWSSubnets
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS subnets instances which matches the scope specified
            by the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceSubnet'
                description: "Although this response contains a collection of items,\
                  \ it doesn't have pagination because the AWS SDK, to request the\
                  \ subnets resources, doesn't provide any pagination mechanism."
              example:
                data:
                - AssignIpv6AddressOnCreation: false
                  AvailabilityZone: eu-west-1b
                  AvailableIpAddressCount: 251
                  CidrBlock: 10.50.3.0/24
                  DefaultForAz: false
                  Ipv6CidrBlockAssociationSet: null
                  MapPublicIpOnLaunch: false
                  State: available
                  SubnetId: subnet-373f3241
                  Tags:
                  - Key: client
                    Value: cycloid
                  - Key: Name
                    Value: private-subnet-eu-west-1b
                  VpcId: vpc-0296ad66
                - AssignIpv6AddressOnCreation: false
                  AvailabilityZone: eu-west-1a
                  AvailableIpAddressCount: 251
                  CidrBlock: 10.50.1.0/24
                  DefaultForAz: false
                  Ipv6CidrBlockAssociationSet: null
                  MapPublicIpOnLaunch: false
                  State: available
                  SubnetId: subnet-6e131c0a
                  Tags:
                  - Key: client
                    Value: cycloid
                  - Key: Name
                    Value: private-subnet-eu-west-1a
                  VpcId: vpc-0296ad66
                - AssignIpv6AddressOnCreation: false
                  AvailabilityZone: eu-west-1a
                  AvailableIpAddressCount: 251
                  CidrBlock: 10.51.1.0/24
                  DefaultForAz: false
                  Ipv6CidrBlockAssociationSet: null
                  MapPublicIpOnLaunch: false
                  State: available
                  SubnetId: subnet-76131c12
                  Tags:
                  - Key: client
                    Value: cycloid
                  - Key: Name
                    Value: private-subnet-eu-west-1a
                  VpcId: vpc-0c96ad68
                - AssignIpv6AddressOnCreation: false
                  AvailabilityZone: eu-west-1c
                  AvailableIpAddressCount: 251
                  CidrBlock: 10.42.0.0/24
                  DefaultForAz: false
                  Ipv6CidrBlockAssociationSet: null
                  MapPublicIpOnLaunch: true
                  State: available
                  SubnetId: subnet-b95dbde1
                  Tags:
                  - Key: client
                    Value: cycloid
                  - Key: Name
                    Value: public-subnet-eu-west-1c
                  VpcId: vpc-21fb3e45
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/volumes:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of volumes of the running AWS infrastructure and associated
        with the AWS account (credential). The parameters allow to select the scope
        of the request to one project of the organization.
      operationId: getRunningInfraAWSVolumes
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: next
        in: query
        description: The token to retrieve the next page of results
        schema:
          minLength: 1
          type: string
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS volumes which matches the scope specified by
            the filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceVolume'
                  pagination:
                    $ref: '#/components/schemas/PaginationAWS'
              example:
                data:
                - Attachments:
                  - AttachTime: 2017-04-26T09:31:12Z
                    DeleteOnTermination: false
                    Device: /dev/xvdf
                    InstanceId: i-02e0848c23c9cf89d
                    State: attached
                    VolumeId: vol-0e976363ad5f4f523
                  AvailabilityZone: eu-west-1c
                  CreateTime: 2017-04-26T09:30:51.516Z
                  Encrypted: false
                  Iops: null
                  KmsKeyId: null
                  Size: 10
                  SnapshotId: ""
                  State: in-use
                  Tags:
                  - Key: Name
                    Value: cycloid-kubernetes-etcd2-eu-we1-prod
                  VolumeId: vol-0e976363ad5f4f523
                  VolumeType: standard
                - Attachments:
                  - AttachTime: 2016-09-02T08:07:12Z
                    DeleteOnTermination: true
                    Device: /dev/xvda
                    InstanceId: i-2000dcad
                    State: attached
                    VolumeId: vol-c888994f
                  AvailabilityZone: eu-west-1b
                  CreateTime: 2016-09-02T08:07:12.162Z
                  Encrypted: false
                  Iops: null
                  KmsKeyId: null
                  Size: 10
                  SnapshotId: snap-de88bcce
                  State: in-use
                  Tags: []
                  VolumeId: vol-c888994f
                  VolumeType: standard
                - Attachments:
                  - AttachTime: 2016-09-02T08:07:12Z
                    DeleteOnTermination: true
                    Device: /dev/xvda
                    InstanceId: i-ab00dc26
                    State: attached
                    VolumeId: vol-01889986
                  AvailabilityZone: eu-west-1b
                  CreateTime: 2016-09-02T08:07:12.887Z
                  Encrypted: false
                  Iops: null
                  KmsKeyId: null
                  Size: 10
                  SnapshotId: snap-de88bcce
                  State: in-use
                  Tags: []
                  VolumeId: vol-01889986
                  VolumeType: standard
                pagination:
                  next: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /organizations/{organization_canonical}/infrastructures/aws/vpcs:
    get:
      tags:
      - Organization Infrastructure
      description: Get the list of VPCs of the running AWS infrastructure and associated
        with the AWS account (credential). The parameters allow to select the scope
        of the request to one project of the organization.
      operationId: getRunningInfraAWSVPCs
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: tag
        in: query
        description: "An amazon tag, represented as `key|value` and where `key` or\
          \ `value` could be omitted but not both, in order to select resources which\
          \ has a `key` or a `value` whatever is its counterpart. `key` nor `value`\
          \ can contains the `|` character. The parameter can be specified several\
          \ times in order to request resources which match with at least one of the\
          \ `tag|value` pairs"
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            maxLength: 383
            minLength: 2
            pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
              -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
            type: string
      responses:
        "200":
          description: The list of AWS VPCs which matches the scope specified by the
            filter.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureResourceVPC'
                description: "Although this response contains a collection of items,\
                  \ it doesn't have pagination because the AWS SDK, to request the\
                  \ VPCs resources, doesn't provide any pagination mechanism."
              example:
                data:
                - CidrBlock: 172.31.0.0/16
                  CidrBlockAssociationSet:
                  - AssociationId: vpc-cidr-assoc-5bd62d32
                    CidrBlock: 172.31.0.0/16
                    CidrBlockState:
                      State: associated
                      StatusMessage: null
                  DhcpOptionsId: dopt-2e748c47
                  InstanceTenancy: default
                  Ipv6CidrBlockAssociationSet: null
                  IsDefault: true
                  State: available
                  Tags: []
                  VpcId: vpc-462bd42f
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      deprecated: true
  /inventory:
    get:
      tags:
      - Organization Inventory
      description: Get the state
      operationId: getState
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get the state of an organization
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                description: The state of an organization
              example:
                data:
                  terraform version: 0.12.28
                  version: 1
                  serial: 1
                  lineage: 2f9ab173-9fc7-965b-c17d-2e43868f14cf
                  resources:
                  - id: 1
                    provider: aws
                    type: aws_instance
                    name: front
                    module: module.kapsule
                    instances:
                      attributes:
                        id: sg-0e74bbe876eba7e6f
                        ingress:
                          cidr_blocks: []
                          description: ""
                          from_port: 80
                          ipv6_cidr_blocks: []
                          prefix_list_ids: []
                          protocol: tcp
                          security_groups:
                          - sg-0cfe32960213dea69
                          self: false
                          to_port: 80
                      custom_attributes:
                        custom_att: sg-0e74bbe876eba7e6f
                    outputs:
                      alb_front_dns_name:
                        value: cycloidio-website-front-prod-119239496.eu-west-1.elb.amazonaws.com
                        type: string
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
    post:
      tags:
      - Organization Inventory
      description: Create or update an Inventory State
      operationId: createOrUpdateState
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      requestBody:
        description: The information of the Inventory new data
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "204":
          description: Success update
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "423":
          description: The operation couldn't be executed or completed because the
            state is locked.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/inventory:
    get:
      tags:
      - Organization Inventory
      description: List the inventory resources
      operationId: listInventoryResources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: List the Inventory Resources
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryResource'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  filters:
                    $ref: '#/components/schemas/Filters'
              example:
                data:
                - id: 1
                  provider: aws
                  type: aws_instance
                  name: front
                  module: module.kapsule
                  attributes:
                    id: sg-0e74bbe876eba7e6f
                    ingress:
                      cidr_blocks: []
                      description: ""
                      from_port: 80
                      ipv6_cidr_blocks: []
                      prefix_list_ids: []
                      protocol: tcp
                      security_groups:
                      - sg-0cfe32960213dea69
                      self: false
                      to_port: 80
                  custom_attributes:
                    custom_att: sg-0e74bbe876eba7e6f
                filters:
                  types:
                  - aws_instance
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/inventory/resources:
    post:
      tags:
      - Organization Inventory
      description: Create an Inventory Resource
      operationId: createInventoryResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the Inventory new resource data
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewInventoryResource'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewInventoryResource'
        required: true
      responses:
        "204":
          description: Resource Created
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/inventory/resource_types:
    get:
      tags:
      - Organization Inventory
      description: List Resource Types
      operationId: listResourceTypes
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: resources_provider
        in: query
        description: Provider of Inventory Resource
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get Resource Types
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/inventory/resource_labels:
    get:
      tags:
      - Organization Inventory
      description: List Resource Labels
      operationId: listResourceLabels
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Get Resource Labels
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryResourceLabel'
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /inventory/lock:
    post:
      tags:
      - Organization Inventory
      description: Locks an Inventory State
      operationId: lockState
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      requestBody:
        description: The information of the Inventory new data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateLock'
        required: true
      responses:
        "200":
          description: Lock ID of the Organization Inventory State
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StateLock'
                description: The Inventory from the Project's environment
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Inventory
      description: unlocks an State of Inventory
      operationId: unlockState
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Unlocking the Status of an Organization Status Inventory Item
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}:
    get:
      tags:
      - Organization Inventory
      description: Get the inventory resource by the ID
      operationId: getInventoryResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: inventory_resource_id
        in: path
        description: Inventory Resource ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "200":
          description: Resource with the given ID
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InventoryResource'
              example:
                id: 1
                provider: aws
                type: aws_instance
                name: front
                module: module.kapsule
                attributes:
                  id: sg-0e74bbe876eba7e6f
                  ingress:
                    cidr_blocks: []
                    description: ""
                    from_port: 80
                    ipv6_cidr_blocks: []
                    prefix_list_ids: []
                    protocol: tcp
                    security_groups:
                    - sg-0cfe32960213dea69
                    self: false
                    to_port: 80
                custom_attributes:
                  custom_att: sg-0e74bbe876eba7e6f
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Inventory
      description: Create an Inventory Resource
      operationId: updateInventoryResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: inventory_resource_id
        in: path
        description: Inventory Resource ID
        required: true
        schema:
          type: integer
          format: uint32
      requestBody:
        description: The information of the Inventory new data
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewInventoryResource'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewInventoryResource'
        required: true
      responses:
        "200":
          description: The updated Inventory Resource
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InventoryResource'
              example:
                data:
                  id: 1
                  provider: aws
                  type: aws_instance
                  name: front
                  module: module.kapsule
                  attributes:
                    id: sg-0e74bbe876eba7e6f
                    ingress:
                      cidr_blocks: []
                      description: ""
                      from_port: 80
                      ipv6_cidr_blocks: []
                      prefix_list_ids: []
                      protocol: tcp
                      security_groups:
                      - sg-0cfe32960213dea69
                      self: false
                      to_port: 80
                  custom_attributes:
                    custom_att: sg-0e74bbe876eba7e6f
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Inventory
      description: Delete an Inventory Resource
      operationId: deleteInventoryResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: inventory_resource_id
        in: path
        description: Inventory Resource ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "204":
          description: Inventory Resource deleted
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /inventory-plan:
    get:
      tags:
      - Organization Inventory Plan
      description: Get the terraform plan of the inventory. It uses '-' as the Concourse
        resource that uses it automatically adds '-plan' on it's implementation to
        push the plan. So to simplify the configuration we use '-' also.
      operationId: getInventoryPlan
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get the plan of an inventory
          content:
            application/json:
              schema:
                type: object
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
    post:
      tags:
      - Organization Inventory Plan
      description: Create or replace an Inventory plan
      operationId: setInventoryPlan
      parameters:
      - name: jwt
        in: query
        description: Token with the information about state and credentials.
        required: true
        schema:
          type: string
      requestBody:
        description: The plan of the Inventory
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "204":
          description: Success update
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/kpis:
    get:
      tags:
      - Organization kpis
      description: Get the list of configured organization KPIs
      operationId: getKpis
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: environment
        in: query
        description: The environment canonical to use a query filter
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      - name: begin
        in: query
        description: "The unix timestamp in seconds, which indicate the start of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in seconds, which indicate the end of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: fetch_data
        in: query
        description: |
          Flag to retrieve KPIs' data upon retrieving KPIs themselves
        schema:
          type: boolean
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: favorite
        in: query
        description: |
          Flag to retrieve favorite data from the members favorite list.
        schema:
          type: boolean
      responses:
        "200":
          description: The list of the KPIs
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KPI'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  name: My KPI 1
                  canonical: my-kpi-1
                  type: buildavgtime
                  widget: doughnut
                  description: This KPI shows the code coverage of your code on an
                    environment
                  project_canonical: project1
                  environment_canonical: env1
                  pipeline_name: pipeline1
                  job_name: job1
                  data_set:
                  - - date
                    - time
                  - - 1607904000
                    - 39
                  - - 1607817600
                    - 140
                  created_at: 1503224026
                  updated_at: 1503224526
                  error: Something went wrong while importing
                  favorite: true
                - id: 2
                  name: My KPI 2
                  canonical: my-kpi-2
                  type: timetorelease
                  widget: line
                  conf:
                    envs:
                    - staging
                    - preprod
                    - prod
                  description: This KPI shows how long time passes between deployment
                    on your different environment
                  project_canonical: project2
                  data_set:
                  - - date
                    - env
                    - version
                    - duration
                    - final
                    - released
                  - - 1592100100
                    - dev
                    - v1
                    - 50
                    - false
                    - true
                  - - 1592100280
                    - dev
                    - v2
                    - 95
                    - false
                    - true
                  - - 1592100500
                    - dev
                    - v3
                    - 160
                    - false
                    - true
                  - - 1592101700
                    - dev
                    - v4
                    - 0
                    - false
                    - false
                  - - 1592100150
                    - staging
                    - v1
                    - 850
                    - false
                    - true
                  - - 1592100375
                    - staging
                    - v2
                    - 625
                    - false
                    - true
                  - - 1592100660
                    - staging
                    - v3
                    - 340
                    - false
                    - true
                  - - 1592101000
                    - prod
                    - v3
                    - 0
                    - true
                    - false
                  created_at: 1503227026
                  updated_at: 1503227526
                  error: ""
                  favorite: true
                - id: 10
                  name: My KPI 10
                  canonical: my-kpi-10
                  type: codecoverage
                  widget: doughnut
                  description: This KPI shows the code coverage of your code on an
                    environment
                  project_canonical: project2
                  environment_canonical: env2
                  pipeline_name: ""
                  job_name: ""
                  data_set:
                  - - date
                    - coverage
                  - - 1592100100
                    - 13.4
                  - - 1592100150
                    - 28.0
                  - - 1592100280
                    - 85.2
                  - - 1592100375
                    - 83.9
                  created_at: 1503225026
                  updated_at: 1503225526
                  error: ""
                  favorite: false
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization kpis
      description: Save information about the KPI
      operationId: createKpi
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project
        in: query
        description: A canonical of a project used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: environment
        in: query
        description: The environment canonical to use a query filter
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      - name: begin
        in: query
        description: "The unix timestamp in seconds, which indicate the start of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in seconds, which indicate the end of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: fetch_data
        in: query
        description: |
          Flag to retrieve KPIs' data upon retrieving KPIs themselves
        schema:
          type: boolean
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: favorite
        in: query
        description: |
          Flag to retrieve favorite data from the members favorite list.
        schema:
          type: boolean
      requestBody:
        description: The information of the KPI
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewKPI'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewKPI'
        required: true
      responses:
        "200":
          description: KPI has been configured
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KPI'
              example:
                data:
                  id: 1
                  name: My KPI 1
                  canonical: my-kpi-1
                  type: buildavgtime
                  widget: doughnut
                  description: This KPI shows the code coverage of your code on an
                    environment
                  project_canonical: project1
                  environment_canonical: env1
                  pipeline_name: pipeline1
                  job_name: job1
                  created_at: 1503224026
                  updated_at: 1503224526
                  error: Something went wrong while importing
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/kpis/{kpi_canonical}/favorites:
    post:
      tags:
      - Organization kpis
      description: Add a kpi in the user favorites list.
      operationId: createKPIFavorite
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: kpi_canonical
        in: path
        description: A canonical of a kpi.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: The kpi has been added to user favorites list.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    delete:
      tags:
      - Organization kpis
      description: Remove a kpi from the user favorites list.
      operationId: deleteKPIFavorite
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: kpi_canonical
        in: path
        description: A canonical of a kpi.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: The kpi has been removed from user favorites list.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/kpis/{kpi_canonical}:
    get:
      tags:
      - Organization kpis
      description: Get the KPI
      operationId: getKpi
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: kpi_canonical
        in: path
        description: A canonical of a kpi.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: begin
        in: query
        description: "The unix timestamp in seconds, which indicate the start of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in seconds, which indicate the end of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: fetch_data
        in: query
        description: |
          Flag to retrieve KPIs' data upon retrieving KPIs themselves
        schema:
          type: boolean
      responses:
        "200":
          description: The KPI
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KPI'
              example:
                data:
                  id: 1
                  name: My KPI 1
                  canonical: my-kpi-1
                  type: buildavgtime
                  widget: doughnut
                  description: This KPI shows the code coverage of your code on an
                    environment
                  project_canonical: project1
                  environment_canonical: env1
                  pipeline_name: pipeline1
                  job_name: job1
                  data_set:
                  - - date
                    - time
                  - - 1607904000
                    - 39
                  - - 1607817600
                    - 140
                  created_at: 1503224026
                  updated_at: 1503224526
                  error: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization kpis
      description: Update a KPI
      operationId: updateKpi
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: kpi_canonical
        in: path
        description: A canonical of a kpi.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: begin
        in: query
        description: "The unix timestamp in seconds, which indicate the start of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in seconds, which indicate the end of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: fetch_data
        in: query
        description: |
          Flag to retrieve KPIs' data upon retrieving KPIs themselves
        schema:
          type: boolean
      requestBody:
        description: The information of the KPI new data
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewKPI'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewKPI'
        required: true
      responses:
        "200":
          description: Success update
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KPI'
              example:
                data:
                  id: 11
                  name: My KPI 11
                  canonical: my-kpi-11
                  type: buildavgtime
                  widget: doughnut
                  description: This KPI shows the code coverage of your code on an
                    environment
                  project_canonical: project1
                  environment_canonical: env1
                  pipeline_name: pipeline1
                  job_name: job1
                  created_at: 1503224026
                  updated_at: 1503224526
                  error: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization kpis
      description: delete a KPI
      operationId: deleteKpi
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: kpi_canonical
        in: path
        description: A canonical of a kpi.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: begin
        in: query
        description: "The unix timestamp in seconds, which indicate the start of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in seconds, which indicate the end of the\
          \ time range."
        schema:
          type: integer
          format: uint64
      - name: fetch_data
        in: query
        description: |
          Flag to retrieve KPIs' data upon retrieving KPIs themselves
        schema:
          type: boolean
      responses:
        "204":
          description: Organization's KPI has been deleted
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/licence:
    get:
      tags:
      - Organization licence
      description: Get currently active licence.
      operationId: getLicence
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Currently active licence entity.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Licence'
              example:
                data:
                  key: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55X25hbWUiOiJjeWNsb2lkIiwiZW1haWxfYWRkcmVzcyI6ImN5Y2xvaWRAb2ZmaWNlLmlvIiwibWVtYmVyc19jb3VudCI6NSwiZXhwaXJlc19hdCI6IjIwMjItMTItMTNUMDA6MDA6MDBaIiwidmVyc2lvbiI6IjEiLCJhdWQiOiJjeWNsb2lkIiwianRpIjoiNGE1ZTQzMDYtNmUwMy00MjFmLTllM2ItY2VlZmJhZjMyNDk0IiwiaWF0IjoxNjExMzE2NjUwLCJpc3MiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJuYmYiOjE2MTEzMTY2NTAsInN1YiI6Imh0dHBzOi8vY3ljbG9pZC5pbyJ9.Z_DvpqprGU0uW26vkpzdTYvyC4imiw0AY1FJMmpeEyVkfYlRI2Q1MWcFZPxMaTafi1TAjwwJOxdY1fxnghMfKng4-4dEtPhcsJQy3nC_ODyACtxDpZMRRaIb8pzBN7AqFvBWWPVKAdqfYXI7IZMX5jjIfaFHtzzs5OnXwQ9USl4
                  created_at: 1503225026
                  updated_at: 1503225026
                  company_name: Cycloid
                  email_address: email@cycloid.io
                  expires_at: 1503226026
                  members_count: 5
                  version: "1"
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
    post:
      tags:
      - Organization licence
      description: "Activate Cycloid's licence. If another licence already exists,\
        \  it will be overwritten"
      operationId: activateLicence
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The licence key
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewLicence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewLicence'
        required: true
      responses:
        "204":
          description: The product has been activated
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/logs/sources:
    get:
      tags:
      - Organization Logs
      description: Get the list of sources configured for the specified project's
        environment of the organization.
      operationId: getProjEnvLogSources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      responses:
        "200":
          description: The list of sources related to the project's environment.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogSource'
                description: The list of log sources.
              example:
                data:
                - id: access.log
                - id: exception.log
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/logs/sources/{log_source_id}
  : get:
      tags:
      - Organization Logs
      description: |-
        Get log's entries information  of the specified log stream stream which is associated to the project's environment of the specified organization. The log's entries to request can be filtered using the unix timestamp ranges and/or the query as follow - When unix timestamps are defined, they are converted to the specific
          query language used by the configured underlying log system (e.g AWS
          Cloud Watch, ElasticSearch, etc.) and appended to the query value
          respecting the syntax but not checking the content of the query, which
          means that if the whole query must be enclosed by curly brackets hence
          the query value is enclosed on them, the time range filter will be
          added inside not just appended at the end, because otherwise it would
          cause wrong syntax; on the other hand, not checking the content means
          that if the query contains a timerange filter, the whole query will
          contain both and the result will be the one returned by on the
          underlying log system, being an error or not.
        - When no time range are defined, then the query is used as it has been
          send, there is not modification on the query to send to the underlying
          log system, hence the result will be the one returned by it.
        - If none of the filters (timestamp range and query) are sent, then
          a 422 status code will be responded.
        - Some constraints are established by the underlying log system, so
          depending which one has been configured some parameters may be
          required or not.
      operationId: getProjEnvLogEntries
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      - name: log_source_id
        in: path
        description: "A unique identifier, which group log's entries under under a\
          \ context, established by the source."
        required: true
        schema:
          minLength: 1
          type: string
      - name: begin
        in: query
        description: "The unix timestamp in milliseconds, which indicate the start\
          \ of the time range."
        schema:
          type: integer
          format: uint64
      - name: end
        in: query
        description: "The unix timestamp in milliseconds, which indicate the end of\
          \ the time range."
        schema:
          type: integer
          format: uint64
      - name: query
        in: query
        description: A free text which the content depends of the context of the API
          endpoint. Can be a free text value or a complete query expressed of supported
          query language.
        schema:
          minLength: 1
          type: string
      responses:
        "200":
          description: The list of log's entries which are comprehended by the begin
            and end timestamps and are selected by the optional query.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogSourceEntry'
                description: The list of log lines
              example:
                data:
                - timestamp: "0123456789"
                  host: theowlhost
                  message: "178.154.171.21 - - [21/Sep/2017:02:51:22 +0200] \"GET\
                    \ /1663-large_default/tienda-de-campana-basica-para-2-personas.jpg\
                    \ HTTP/1.0\" 302 773 \"-\" \"Mozilla/5.0 (compatible; YandexBot/3.0;\
                    \ +http://yandex.com/bots)\""
                - timestamp: "0123456795"
                  host: mymon
                  message: "141.8.132.28 - - [21/Sep/2017:02:51:27 +0200] \"GET /1663-large_default/tienda-de-campana-basica-para-2-personas.jpg/\
                    \ HTTP/1.0\" 302 731 \"-\" \"Mozilla/5.0 (compatible; YandexBot/3.0;\
                    \ +http://yandex.com/bots)\""
                - timestamp: "0123456800"
                  host: theowlhost
                  message: "46.229.168.65 - - [21/Sep/2017:02:51:28 +0200] \"GET /mosquitera-enrollable-lateral.html\
                    \ HTTP/1.0\" 200 25313 \"-\" \"Mozilla/5.0 (compatible; SemrushBot/1.2~bl;\
                    \ +http://www.semrush.com/bot.html)\""
                - timestamp: "0123456805"
                  host: mymon
                  message: "141.10.132.56 - - [21/Sep/2017:02:51:56 +0200] \"GET /1663-large_default/tienda-de-campana-basica-para-2-personas.jpg/\
                    \ HTTP/1.0\" 302 731 \"-\" \"Mozilla/5.0 (compatible; YandexBot/3.0;\
                    \ +http://yandex.com/bots)\""
                - timestamp: "0123456810"
                  host: burrowing
                  message: "46.229.168.65 - - [21/Sep/2017:02:52:03 +0200] \"GET /mosquitera-enrollable-lateral.html\
                    \ HTTP/1.0\" 200 25313 \"-\" \"Mozilla/5.0 (compatible; SemrushBot/1.2~bl;\
                    \ +http://www.semrush.com/bot.html)\""
                - timestamp: "0123456823"
                  host: theowlhost
                  message: "141.10.132.56 - - [21/Sep/2017:02:52:23 +0200] \"GET /1663-large_default/tienda-de-campana-basica-para-2-personas.jpg/\
                    \ HTTP/1.0\" 302 731 \"-\" \"Mozilla/5.0 (compatible; YandexBot/3.0;\
                    \ +http://yandex.com/bots)\""
                - timestamp: "0123456834"
                  host: elf
                  message: "123.229.145.65 - - [21/Sep/2017:02:52:49 +0200] \"GET\
                    \ /mosquitera-enrollable-lateral.html HTTP/1.0\" 200 25313 \"\
                    -\" \"Mozilla/5.0 (compatible; SemrushBot/1.2~bl; +http://www.semrush.com/bot.html)\""
                - timestamp: "0123456834"
                  host: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaelf
                  message: "123.229.145.65 - - [21/Sep/2017:02:52:49 +0200] \"GET\
                    \ /mosquitera-enrollable-lateral.html HTTP/1.0\" 200 25313 \"\
                    -\" \"Mozilla/5.0 (compatible; SemrushBot/1.2~bl; +http://www.semrush.com/bot.html)\""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/pipelines:
    get:
      tags:
      - Organization pipelines
      description: Get all the pipelines that the authenticated user has access to.
      operationId: getPipelines
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: concourse_pipeline_name
        in: query
        description: A pipeline name
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: project_canonical
        in: query
        description: A list of projects' canonical to filter from
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: environment_canonical
        in: query
        description: A list of environments' canonical to filter from
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: statuses
        in: query
        description: "List of statuses that you want to filter a pipeline/job with.\
          \ Pipeline can be either paused or unpaused, but jobs can be started, pending,\
          \ succeeded, failed, errored, aborted. So if any of a pipeline's job has\
          \ one of the given status, the associated pipeline will be included in the\
          \ response."
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - aborted
            - errored
            - failed
            - paused
            - pending
            - started
            - succeeded
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of all the pipelines which authenticated user has access
            to.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 154
                  name: approval-resource
                  paused: true
                  archived: false
                  public: false
                  groups: []
                  team_name: cycloid-products
                  environment: dev
                  use_case: approval-of-resources
                  created_at: 1500135021
                  updated_at: 1500135021
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                - id: 196
                  name: frontend
                  paused: false
                  public: false
                  archived: false
                  environment: dev
                  use_case: frontend
                  groups:
                  - name: pull-requests
                    jobs:
                    - pr-code-validate
                    resources: []
                  - name: preprod
                    jobs:
                    - preprod-code-validate
                    - preprod-build-deploy
                    resources: []
                  team_name: cycloid-products
                  created_at: 1500135021
                  updated_at: 1500135021
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                - id: 252
                  name: http-api
                  use_case: ci-cd-pipelines
                  environment: dev
                  paused: false
                  public: false
                  archived: false
                  groups:
                  - name: all
                    jobs:
                    - code-validation-develop
                    - code-validation-pull-requests
                    resources: []
                  - name: develop
                    jobs:
                    - code-validation-develop
                    resources: []
                  - name: pull-requests
                    jobs:
                    - code-validation-pull-requests
                    resources: []
                  team_name: cycloid-products
                  created_at: 1500135021
                  updated_at: 1500135021
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                pagination:
                  index: 1
                  size: 10
                  total: 5
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/pipelines/{inpath_pipeline_name}/diff:
    put:
      tags:
      - Organization pipelines
      description: The diff between the provided pipeline configuration and the pipeline
        from the given name.
      operationId: diffPipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The pipeline configuration
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdatePipeline'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdatePipeline'
        required: true
      responses:
        "200":
          description: The diff between the provided pipeline configuration and the
            existing pipeline has been done.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineDiffs'
              example:
                data:
                  jobs:
                  - name: foo
                    label: job
                    status: added
                    diff:
                    - delta_type: "+"
                      line: '- terraform-plan-api'
                  groups:
                  - name: bar
                    label: group
                    status: removed
                    diff:
                    - delta_type: "-"
                      line: '- test-develop'
                  resources:
                  - name: bli
                    label: resource
                    status: changed
                    diff:
                    - delta_type: "-"
                      line: "  - key: foo"
                    - delta_type: "+"
                      line: "  - key: bar"
                  resource_types:
                  - name: glop
                    label: resource type
                    status: removed
                    diff:
                    - delta_type: "-"
                      line: "name: terraform"
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/pipelines/{inpath_pipeline_name}/synced:
    get:
      tags:
      - Organization pipelines
      description: Will check if the pipeline from the database and the one specified
        in the stack are synced or not
      operationId: syncedPipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The diff between the stack's pipeline and the existing pipeline
            if any exists.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineStatus'
              example:
                data:
                  synced: out_of_sync
                  error: ""
                  diffs:
                    jobs:
                    - name: foo
                      label: job
                      status: added
                      diff:
                      - delta_type: "+"
                        line: '- terraform-plan-api'
                    groups:
                    - name: bar
                      label: group
                      status: removed
                      diff:
                      - delta_type: "-"
                        line: '- test-develop'
                    resources:
                    - name: bli
                      label: resource
                      status: changed
                      diff:
                      - delta_type: "-"
                        line: "  - key: foo"
                      - delta_type: "+"
                        line: "  - key: bar"
                    resource_types:
                    - name: glop
                      label: resource type
                      status: removed
                      diff:
                      - delta_type: "-"
                        line: "name: terraform"
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines:
    get:
      tags:
      - Organization pipelines
      description: Get the pipelines that the authenticated user has access to.
      operationId: getProjectPipelines
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the pipelines which authenticated user has access to.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 154
                  name: approval-resource
                  paused: true
                  public: false
                  groups: []
                  team_name: cycloid-products
                  environment: dev
                  use_case: approval-resource
                  created_at: 1500135021
                  updated_at: 1500135021
                  status: succeeded
                  started: true
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                - id: 196
                  name: frontend
                  paused: false
                  public: false
                  environment: dev
                  use_case: frontend-use-case
                  created_at: 1500135021
                  updated_at: 1500135021
                  status: failed
                  started: true
                  groups:
                  - name: pull-requests
                    jobs:
                    - pr-code-validate
                    resources: []
                  - name: preprod
                    jobs:
                    - preprod-code-validate
                    - preprod-build-deploy
                    resources: []
                  team_name: cycloid-products
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                - id: 238
                  name: ci-website
                  paused: true
                  environment: dev
                  public: false
                  use_case: website-use-case
                  created_at: 1500135021
                  updated_at: 1500135021
                  status: pending
                  started: true
                  groups:
                  - name: all
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  - name: preprod
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  team_name: cycloid-products
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
                pagination:
                  index: 1
                  size: 10
                  total: 5
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization pipelines
      description: Create a new pipeline
      operationId: createPipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      requestBody:
        description: The configuration of the pipeline to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewPipeline'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewPipeline'
        required: true
      responses:
        "200":
          description: The information of the pipeline which has been created.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
              example:
                data:
                  id: 238
                  name: ci-website
                  paused: true
                  public: false
                  environment: dev
                  use_case: website-ci-use-case
                  created_at: 1500135021
                  updated_at: 1500135021
                  status: pending
                  started: false
                  groups:
                  - name: all
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  - name: preprod
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  team_name: cycloid-products
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}:
    get:
      tags:
      - Organization pipelines
      description: Get the configuration of the pipeline.
      operationId: getPipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the pipeline which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
              example:
                data:
                  id: 238
                  name: ci-website
                  paused: true
                  public: false
                  environment: dev
                  use_case: website-ci-use-case
                  created_at: 1500135021
                  updated_at: 1500135021
                  groups:
                  - name: all
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  - name: preprod
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  team_name: cycloid-products
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization pipelines
      description: Update the configuration of the given pipeline name.
      operationId: updatePipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The pipeline configuration
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdatePipeline'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdatePipeline'
        required: true
      responses:
        "200":
          description: The information of the pipeline which has been updated.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
              example:
                data:
                  id: 238
                  name: ci-website
                  paused: true
                  public: false
                  environment: dev
                  use_case: website-ci-use-case
                  groups:
                  - name: all
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  - name: preprod
                    jobs:
                    - code-validation-preprod
                    - build-container-preprod
                    - tag-container-image-preprod
                    - clean-container-preprod
                    resources: []
                  team_name: cycloid-products
                  created_at: 1500135021
                  updated_at: 1500135021
                  project:
                    id: 5
                    canonical: proj-1
                    name: project1
                    created_at: 1500135021
                    updated_at: 1500135021
                    service_catalog_ref: cycloidio:stack-magento
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization pipelines
      description: Delete the pipeline.
      operationId: deletePipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: Pipeline has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/policies:
    get:
      tags:
      - Policies
      description: Get the list of Policies
      operationId: getPolicies
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of Policies
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policy'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1
                  code: organization:delete
                  description: Grant the access to delete the organization
                - id: 2
                  code: organization:edit
                  description: Grant the access to edit the organization
                - id: 20
                  code: team:create
                  description: Grant the access to create teams
                - id: 21
                  code: team:read
                  description: Grant the access to read the teams of an organization
                - id: 22
                  code: team:edit
                  description: Grant the access to edit teams
                - id: 23
                  code: team:delete
                  description: Grant the access to delete teams
                - id: 40
                  code: member:invite
                  description: Grant the access to invite members to join to the organization
                - id: 41
                  code: member:remove
                  description: Grant the access to remove members
                - id: 42
                  code: member:read
                  description: Grant the access to read the members
                - id: 60
                  code: project:read
                  entities:
                  - "10"
                  - "32"
                  description: Grant the access to projects
                - id: 61
                  code: project:create
                  entities: []
                  description: Grant the access to create a project in the organization
                - id: 62
                  code: project:edit
                  entities: []
                  description: Grant the access to edit projects
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds/{build_id}/abort
  : put:
      tags:
      - Organization pipelines jobs build
      description: Abort a specific build.
      operationId: abortBuild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "204":
          description: The build has been aborted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds:
    get:
      tags:
      - Organization pipelines jobs build
      description: Get the pipeline job's builds that the authenticated user has access
        to.
      operationId: getBuilds
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: concourse_page_since
        in: query
        description: The time after which we should look for entities to return.
        schema:
          type: integer
          format: uint64
          default: 0
      - name: concourse_page_until
        in: query
        description: The time before which we should look for entities to return.
        schema:
          type: integer
          format: uint64
          default: 0
      - name: concourse_page_limit
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint64
          default: 10
      responses:
        "200":
          description: List the pipeline job's builds which authenticated user has
            access to.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination_concourse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Build'
                  pagination_concourse:
                    $ref: '#/components/schemas/PaginationConcourse'
              example:
                data:
                - id: 11406
                  team_name: cycloid-products
                  name: "82"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
                - id: 11404
                  team_name: cycloid-products
                  name: "81"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11404
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504184979
                  end_time: 1504185078
                  reap_time: 0
                - id: 11402
                  team_name: cycloid-products
                  name: "80"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11402
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504184038
                  end_time: 1504184140
                  reap_time: 0
                pagination_concourse:
                  next:
                    since: 11402
                    until: 0
                    limit: 3
                  previous:
                    since: 11508
                    until: 0
                    limit: 3
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization pipelines jobs build
      description: Create a new build for the job
      operationId: createBuild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "200":
          description: Create a new build for the pipeline's job and returns its details
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Build'
              example:
                data:
                  id: 11406
                  team_name: cycloid-products
                  name: "82"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/builds/{build_id}/events:
    get:
      tags:
      - Organization pipelines build
      description: Get the events of a build.
      operationId: getBuildEvents
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "200":
          description: Stream is starting
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                - text/event-stream
          content: {}
          x-produces:
          - text/event-stream
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds/{build_id}/plan
  : get:
      tags:
      - Organization pipelines jobs build
      description: Get the plan of the build.
      operationId: getBuildPlan
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the build's plan which has the specified
            id.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PublicPlan'
              example:
                data:
                  schema: exec.v2
                  plan:
                    id: 59b6ed1d
                    do:
                    - id: 59b6ed1b
                      get:
                        type: git
                        name: concourse
                        resource: concourse
                        version:
                          ref: 37a827fb8056bfb88848823f49ae8efe9515e2ea
                    - id: 59b6ed1c
                      task:
                        name: build
                        privileged: false
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds/{build_id}/preparation
  : get:
      tags:
      - Organization pipelines jobs build
      description: Get the preparation of the Build.
      operationId: getBuildPreparation
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "200":
          description: Return the Preparation
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Preparation'
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds/{build_id}
  : get:
      tags:
      - Organization pipelines jobs build
      description: Get the information of the build.
      operationId: getBuild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the build which has the specified id.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Build'
              example:
                data:
                  id: 11406
                  team_name: cycloid-products
                  name: "82"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization pipelines jobs build
      description: Reruns a specific build.
      operationId: rerunBuild
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      responses:
        "200":
          description: Returns the new build created from the specified build ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Build'
              example:
                data:
                  id: 11406
                  team_name: cycloid-products
                  name: "82.1"
                  status: waiting
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/builds/{build_id}/resources
  : get:
      tags:
      - Organization pipelines jobs build
      description: Get the resources of the build.
      operationId: getBuildResources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: build_id
        in: path
        description: A build id
        required: true
        schema:
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]+$"
          type: string
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: The resources of the build's which has the specified id.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BuildInputsOutputs'
              example:
                data:
                  inputs:
                  - name: git-website-preprod
                    resource: git-website-preprod
                    type: git
                    version:
                      ref: 59ecb8ec73d7c4ea4c3827440ed1429268cf4c94
                    metadata:
                    - name: commit
                      value: 59ecb8ec73d7c4ea4c3827440ed1429268cf4c94
                    - name: author
                      value: Adrien Jerphagnon
                    - name: author_date
                      value: 2017-07-19 15:23:46 +0200
                    - name: committer
                      value: Adrien Jerphagnon
                    - name: committer_date
                      value: 2017-07-19 15:23:46 +0200
                    - name: branch
                      value: master
                    - name: message
                      value: Up assets version
                    pipeline_id: 238
                    first_occurrence: true
                  - name: vault-preprod
                    resource: vault-preprod
                    type: vault
                    version:
                      date: "1500470493"
                    metadata: []
                    pipeline_id: 238
                    first_occurrence: true
                  - name: vault-preprod
                    resource: vault-preprod
                    type: vault
                    version:
                      date: "1500470521"
                    metadata: []
                    pipeline_id: 238
                    first_occurrence: true
                  outputs:
                  - id: 0
                    name: website preprod
                    type: ""
                    metadata: []
                    resource: ecr-website-preprod
                    version:
                      digest: sha256:58c226280d56dcfe5f7f1de2cce6f22eac36fa95ce8e1b9c604523c4a50d7401
                    enabled: false
                  - id: 0
                    name: slack alert preprod
                    type: ""
                    metadata: []
                    resource: slack-alert-preprod
                    version:
                      timestamp: "1500470978"
                    enabled: false
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/config:
    get:
      tags:
      - Organization pipelines
      description: Get the YAML configuration of the pipeline.
      operationId: getPipelineConfig
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: This endpoint returns the config of the pipeline.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: string
              example:
                data: "{\"resources\":[{\"name\":\"5m\",\"type\":\"time\",\"source\"\
                  :{\"interval\":\"5m\"}}],\"jobs\":[{\"name\":\"job-hello-world\"\
                  ,\"public\":true,\"plan\":[{\"get\":\"5m\",\"trigger\":true},{\"\
                  task\":\"hello-world\",\"privileged\":true,\"config\":{\"platform\"\
                  :\"linux\",\"image_resource\":{\"type\":\"docker-image\",\"source\"\
                  :{\"repository\":\"busybox\"}},\"run\":{\"path\":\"echo\",\"args\"\
                  :[\"hello world\"]}}}]}]}"
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs:
    get:
      tags:
      - Organization pipelines jobs
      description: Get the jobs of the pipeline that the authenticated user has access
        to.
      operationId: getJobs
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the pipeline's jobs which authenticated user has access
            to.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 1273
                  name: code-validation-preprod
                  paused: false
                  pipeline_id: 1
                  pipeline_name: fake-pipeline-0
                  first_logged_build_id: 0
                  disable_manual_trigger: false
                  next_build:
                    id: 11214
                    team_name: ieijcu
                    name: some-build
                    status: running
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  finished_build:
                    id: 11405
                    team_name: cycloid-products
                    name: "33"
                    status: succeeded
                    job_name: code-validation-preprod
                    start_time: 1504185102
                    end_time: 1504185134
                    reap_time: 0
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  inputs:
                  - name: git-website-preprod
                    resource: git-website-preprod
                    passed: []
                    trigger: true
                    tags: []
                  outputs: []
                  groups:
                  - all
                  - preprod
                - id: 1274
                  name: build-container-preprod
                  paused: false
                  first_logged_build_id: 0
                  disable_manual_trigger: false
                  pipeline_id: 1
                  pipeline_name: fake-pipeline-0
                  next_build:
                    id: 11214
                    team_name: ieijcu
                    name: some-build
                    status: running
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  finished_build:
                    id: 11406
                    team_name: cycloid-products
                    name: "82"
                    status: failed
                    job_name: build-container-preprod
                    start_time: 1504185240
                    end_time: 1504185344
                    reap_time: 0
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  inputs:
                  - name: git-website-preprod
                    resource: git-website-preprod
                    passed:
                    - code-validation-preprod
                    trigger: true
                    tags: []
                  - name: vault-preprod
                    resource: vault-preprod
                    passed: []
                    trigger: false
                    tags: []
                  outputs:
                  - name: slack-alert-preprod
                    resource: slack-alert-preprod
                  - name: slack-alert-preprod
                    resource: slack-alert-preprod
                  - name: ecr-website-preprod
                    resource: ecr-website-preprod
                  groups:
                  - all
                  - preprod
                - id: 1275
                  name: tag-container-image-preprod
                  paused: false
                  first_logged_build_id: 0
                  disable_manual_trigger: false
                  pipeline_id: 1
                  pipeline_name: fake-pipeline-0
                  next_build:
                    id: 11214
                    team_name: ieijcu
                    name: some-build
                    status: running
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  finished_build:
                    id: 10793
                    team_name: cycloid-products
                    name: "16"
                    status: succeeded
                    job_name: tag-container-image-preprod
                    start_time: 1500471046
                    end_time: 1500471211
                    reap_time: 0
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  inputs:
                  - name: git-website-preprod
                    resource: git-website-preprod
                    passed:
                    - build-container-preprod
                    trigger: false
                    tags: []
                  - name: ecr-website-preprod
                    resource: ecr-website-preprod
                    passed:
                    - build-container-preprod
                    trigger: true
                    tags: []
                  outputs:
                  - name: ecr-website-preprod
                    resource: ecr-website-preprod
                  groups:
                  - all
                  - preprod
                - id: 1276
                  name: clean-container-preprod
                  paused: false
                  first_logged_build_id: 0
                  disable_manual_trigger: false
                  pipeline_id: 1
                  pipeline_name: fake-pipeline-0
                  next_build:
                    id: 11214
                    team_name: ieijcu
                    name: some-build
                    status: running
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  finished_build:
                    id: 10794
                    team_name: cycloid-products
                    name: "13"
                    status: succeeded
                    job_name: clean-container-preprod
                    start_time: 1500471262
                    end_time: 1500471305
                    reap_time: 0
                    pipeline_id: 1
                    pipeline_name: fake-pipeline-0
                  inputs:
                  - name: ecr-website-preprod
                    resource: ecr-website-preprod
                    passed:
                    - tag-container-image-preprod
                    trigger: true
                    tags: []
                  outputs: []
                  groups:
                  - all
                  - preprod
                pagination:
                  index: 1
                  size: 10
                  total: 4
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/pause:
    put:
      tags:
      - Organization pipelines jobs
      description: Pause a job
      operationId: pauseJob
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "204":
          description: Job has been paused.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}:
    get:
      tags:
      - Organization pipelines jobs
      description: Get the information of the job.
      operationId: getJob
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "200":
          description: The configuration of the job which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Job'
              example:
                data:
                  id: 1274
                  name: build-container-preprod
                  paused: false
                  first_logged_build_id: 0
                  disable_manual_trigger: false
                  next_build:
                    id: 11214
                    team_name: ieijcu
                    name: some-build
                    status: running
                    api_url: /api/v1/builds/11408
                  finished_build:
                    id: 11406
                    team_name: cycloid-products
                    name: "82"
                    status: failed
                    job_name: build-container-preprod
                    api_url: /api/v1/builds/11406
                    pipeline_name: ci-website
                    start_time: 1504185240
                    end_time: 1504185344
                    reap_time: 0
                  inputs:
                  - name: git-website-preprod
                    resource: git-website-preprod
                    passed:
                    - code-validation-preprod
                    trigger: true
                    tags: []
                  - name: vault-preprod
                    resource: vault-preprod
                    passed: []
                    trigger: false
                    tags: []
                  outputs:
                  - name: slack-alert-preprod
                    resource: slack-alert-preprod
                  - name: slack-alert-preprod
                    resource: slack-alert-preprod
                  - name: ecr-website-preprod
                    resource: ecr-website-preprod
                  groups:
                  - all
                  - preprod
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/tasks/{step_name}/cache
  : delete:
      tags:
      - Organization pipelines jobs
      description: Clear task cache
      operationId: clearTaskCache
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: step_name
        in: path
        description: A step name from a job task
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: cache_path
        in: query
        description: The cache path to use as part of a clearTaskCache request
        schema:
          type: string
      responses:
        "200":
          description: Cache has been cleared.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClearTaskCache'
              example:
                data:
                  caches_removed: 42
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/jobs/{job_name}/unpause:
    put:
      tags:
      - Organization pipelines jobs
      description: Unpause a job
      operationId: unpauseJob
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: job_name
        in: path
        description: A job name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "204":
          description: Job has been unpause.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/pause:
    put:
      tags:
      - Organization pipelines
      description: Pause a pipeline
      operationId: pausePipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: Pipeline has been paused.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/rename:
    put:
      tags:
      - Organization pipelines
      description: Rename a pipeline
      operationId: renamePipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: pipeline_name
        in: query
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: Pipeline has been renamed.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/check
  : post:
      tags:
      - Organization pipelines resources
      description: Trigger a check for a specified resource.
      operationId: checkResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      requestBody:
        description: Check for new version from the specified version.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/CIVersion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CIVersion'
        required: false
      responses:
        "200":
          description: The resource checked result.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Build'
              example:
                data:
                  api_url: /api/v1/builds/62
                  id: 62
                  name: check
                  pipeline_id: 1
                  pipeline_name: pipeline1
                  resource_name: 5m
                  start_time: 1630426278
                  status: started
                  team_name: 1359872e-88fe-47a7-8c55-923108823a55
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources:
    get:
      tags:
      - Organization pipelines resources
      description: Get the resources of the pipeline.
      operationId: getPipelineResources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: The resources of the pipeline's which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - name: ecr-website-preprod
                  type: docker-image
                  groups: []
                  paused: false
                  failing_to_check: false
                  check_error: ""
                - name: git-website-preprod
                  type: git
                  groups: []
                  paused: false
                  failing_to_check: false
                  check_error: ""
                - name: vault-preprod
                  type: vault
                  groups: []
                  paused: false
                  failing_to_check: false
                  check_error: ""
                - name: slack-alert-preprod
                  type: slack-notification
                  groups: []
                  paused: false
                  failing_to_check: false
                  check_error: ""
                pagination:
                  index: 1
                  size: 10
                  total: 4
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/pin_comment
  : put:
      tags:
      - Organization pipelines resources
      description: Set pin comment on a specified resource
      operationId: resourceSetPinComment
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      requestBody:
        description: Specify the comment to put on a pinned resource.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/PinComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PinComment'
        required: true
      responses:
        "204":
          description: Resource pin has been commented
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}:
    get:
      tags:
      - Organization pipelines resources
      description: Get a specific resource of the pipeline.
      operationId: getResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "200":
          description: The resource of the pipeline's which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
              example:
                data:
                  name: ecr-website-preprod
                  type: docker-image
                  groups: []
                  paused: false
                  failing_to_check: false
                  check_error: ""
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/unpin
  : put:
      tags:
      - Organization pipelines resources
      description: Unpin a specified resource
      operationId: unpinResource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      responses:
        "204":
          description: Resource has been unpinned
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions
  : get:
      tags:
      - Organization pipelines resources
      description: Get versions of a pipeline's resource
      operationId: getResourceVersions
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: filter_version
        in: query
        description: A version of a resource
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: concourse_page_since
        in: query
        description: The time after which we should look for entities to return.
        schema:
          type: integer
          format: uint64
          default: 0
      - name: concourse_page_until
        in: query
        description: The time before which we should look for entities to return.
        schema:
          type: integer
          format: uint64
          default: 0
      - name: concourse_page_limit
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint64
          default: 10
      responses:
        "200":
          description: Get versions of a specified resource.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination_concourse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResourceVersion'
                  pagination_concourse:
                    $ref: '#/components/schemas/PaginationConcourse'
              example:
                data:
                - id: 45
                  type: time
                  resource: time-resource
                  enabled: true
                  version:
                    time: 2018-06-07T16:12:02.037357287Z
                - id: 46
                  type: time
                  resource: time-resource
                  enabled: true
                  version:
                    time: 2018-06-07T16:13:02.037357287Z
                pagination_concourse:
                  next:
                    since: 11402
                    until: 0
                    limit: 3
                  previous:
                    since: 11896
                    until: 0
                    limit: 3
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions/{resource_version_id}/disable
  : put:
      tags:
      - Organization pipelines resources
      description: Disable a specified version of a resource
      operationId: disableResourceVersion
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: resource_version_id
        in: path
        description: A resource's version id
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        "204":
          description: Resource version have been disabled
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions/{resource_version_id}/enable
  : put:
      tags:
      - Organization pipelines resources
      description: Enable a specified version of a resource
      operationId: enableResourceVersion
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: resource_version_id
        in: path
        description: A resource's version id
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        "204":
          description: Resource version have been enabled
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions/{resource_version_id}/input_to
  : get:
      tags:
      - Organization pipelines resources
      description: Get builds that used a specified resource version as input.
      operationId: getBuildsWithVersionAsInput
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: resource_version_id
        in: path
        description: A resource's version id
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        "200":
          description: The resource of the pipeline's which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Build'
              example:
                data:
                - id: 11406
                  team_name: cycloid-products
                  name: "82"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
                - id: 11404
                  team_name: cycloid-products
                  name: "81"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11404
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504184979
                  end_time: 1504185078
                  reap_time: 0
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions/{resource_version_id}/output_of
  : get:
      tags:
      - Organization pipelines resources
      description: Get builds that used a specified resource version as output.
      operationId: getBuildsWithVersionAsOutput
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: resource_version_id
        in: path
        description: A resource's version id
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        "200":
          description: The resource of the pipeline's which has the specified name.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Build'
              example:
                data:
                - id: 11406
                  team_name: cycloid-products
                  name: "82"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11406
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504185240
                  end_time: 1504185344
                  reap_time: 0
                - id: 11404
                  team_name: cycloid-products
                  name: "81"
                  status: failed
                  job_name: build-container-preprod
                  api_url: /api/v1/builds/11404
                  pipeline_name: ci-website
                  pipeline_id: 3
                  start_time: 1504184979
                  end_time: 1504185078
                  reap_time: 0
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  ? /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/resources/{resource_name}/versions/{resource_version_id}/pin
  : put:
      tags:
      - Organization pipelines resources
      description: Pin a specified version of a resource
      operationId: pinResourceVersion
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      - name: resource_name
        in: path
        description: A resource name
        required: true
        schema:
          maxLength: 150
          minLength: 1
          type: string
      - name: resource_version_id
        in: path
        description: A resource's version id
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        "204":
          description: Resource version has been pinned
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/unpause:
    put:
      tags:
      - Organization pipelines
      description: Unpause a pipeline
      operationId: unpausePipeline
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: Pipeline has been unpaused.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}/variables:
    get:
      tags:
      - Organization pipelines
      description: Get the YAML variables of the pipeline.
      operationId: getPipelineVariables
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: inpath_pipeline_name
        in: path
        description: A pipeline name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: This endpoint returns the variables of the pipeline.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineVariables'
              example:
                data:
                  yaml_vars: "var1: some_var"
                  has_saved_yaml_vars: true
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "409":
          description: Project has no config repository configured
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects:
    get:
      tags:
      - Organization projects
      description: Get list of projects of the organization.
      operationId: getProjects
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: project_name
        in: query
        description: Search by project's name
        schema:
          type: string
      - name: project_created_at
        in: query
        description: Search by project's creation date
        schema:
          type: integer
          format: uint64
      - name: project_description
        in: query
        description: Search by project's description
        schema:
          type: string
      - name: project_config_repository_canonical
        in: query
        description: Search by project's config repository's canonical
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: query
        description: Organization Service Catalog Sources canonical
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: user_id
        in: query
        description: Search by entity's owner
        schema:
          type: integer
          format: uint32
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      - name: favorite
        in: query
        description: |
          Flag to retrieve favorite data from the members favorite list.
        schema:
          type: boolean
      responses:
        "200":
          description: List of the projects which the organization has.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: proj-1
                  description: my-description1
                  id: 1
                  cloud_provider:
                    id: 4
                    canonical: aws
                    abbreviation: AWS
                    name: Amazon Web Services
                    created_at: 1503225026
                    updated_at: 1503335026
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  environments:
                  - dev
                  - staging
                  - production
                  service_catalog_name: Magento Stack
                  service_catalog_ref: cycloidio:stack-magento
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: Project 1
                  favorite: true
                - canonical: proj2
                  description: my-description2
                  id: 1
                  cloud_provider:
                    id: 2
                    canonical: google
                    abbreviation: GCP
                    name: Google Cloud Platform
                    created_at: 1503225026
                    updated_at: 1503335026
                  environments:
                  - dev
                  - staging
                  service_catalog_name: Magento Stack 2
                  service_catalog_ref: cycloidio:stack-magento2
                  created_at: 1501131026
                  updated_at: 1503333026
                  name: Project 2
                  favorite: true
                - canonical: proj3
                  description: my-description3
                  id: 1
                  environments: []
                  service_catalog_name: Some other stack
                  service_catalog_ref: cycloidio:stack-something
                  created_at: 1500135021
                  updated_at: 1503332021
                  name: Project 3
                  favorite: true
                - canonical: proj-4
                  description: my-description4
                  id: 1
                  owner:
                    username: user-2
                    id: 10
                    given_name: Mariana
                    family_name: Jimenezo
                    email: mariana.jimenezo@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  environments:
                  - dev
                  - staging
                  - production
                  service_catalog_name: Magento Stack 3
                  service_catalog_ref: cycloidio:stack-magento3
                  created_at: 1500035021
                  updated_at: 1502332021
                  name: Project 4
                  favorite: false
                pagination:
                  index: 1
                  size: 10
                  total: 4
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization projects
      description: Create a new project with envs and pipelines in the organization.
      operationId: createProject
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: |
          The information of the project to create and optionally its configuration inputs.
          If the configuration inputs are not sent the project configuration is not generated and should be generated separately.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewProject'
        required: true
      responses:
        "200":
          description: Project created. The body contains the information of the new
            project of the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
              example:
                data:
                  id: 1
                  canonical: proj3
                  description: the-description
                  created_at: 1500135021
                  updated_at: 1503332021
                  name: Project 3
                  environments:
                  - id: 1
                    canonical: prod
                    created_at: 1503225026
                    updated_at: 1503335026
                  - id: 2
                    canonical: staging
                    created_at: 1503225026
                    updated_at: 1503335026
                  - id: 3
                    canonical: dev
                    created_at: 1503225026
                    updated_at: 1503335026
                  service_catalog:
                    id: 1
                    name: foo
                    canonical: stack-foo
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    directory: /config
                    service_catalog_source_id: 1
                    trusted: true
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}:
    delete:
      tags:
      - Organization projects
      description: "Delete a project environment of the organization, and the project\
        \ itself if it's the last environment."
      operationId: deleteProjectEnvironment
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      responses:
        "204":
          description: Project environment has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/environment/{environment_canonical}/config:
    get:
      tags:
      - Organization Projects
      description: Fetch the current project's environment's configuration.
      operationId: getProjectConfig
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      responses:
        "200":
          description: Set of config to create the project / push onto repositories
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProjectEnvironmentConfig'
              example:
                data:
                  use_case: prod
                  resource_pool_canonical: prcan
                  forms:
                    prod:
                      ansible:
                        database:
                        - widget: radios
                          default:
                            foo: bar
                          unit: "($, GHz, GB)"
                          type: map
                          values:
                          - foo: bar
                          - bar: foo
                          description: ""
                          key: key-one
                          name: map variable
                          current:
                            foo: bar
                        - widget: dropdown
                          required: false
                          default:
                          - bar
                          - foo
                          values:
                          - - foo
                            - bar
                          - - bar
                            - foo
                          unit: "($, GHz, GB)"
                          type: array
                          description: something k2
                          key: key-two
                          name: array variable
                          current:
                          - bar
                          - foo
                        - widget: number
                          required: true
                          unit: something
                          type: integer
                          description: something k3
                          key: key-three
                          name: required variable without default
                          current: null
                      terraform:
                        database:
                        - widget: slider_range
                          required: false
                          default: 2
                          unit: "($, GHz, GB)"
                          type: integer
                          description: something k1
                          values:
                          - 1
                          - 10
                          key: key-one
                          name: integer variable
                          current: 10
                        - widget: dropdown
                          required: true
                          default: 20
                          unit: "($, GHz, GB)"
                          type: integer
                          description: something k2
                          values:
                          - 10
                          - 20
                          - 30
                          key: key-two
                          name: required with default
                          current: null
                        - widget: slider_list
                          required: false
                          values:
                          - 1
                          - 5
                          unit: "($, GHz, GB)"
                          type: integer
                          description: something k3
                          key: key-three
                          name: not required no default
                          current: 1
                      pipeline:
                        database:
                        - widget: cy_cred
                          default: t2.micro
                          unit: "($, GHz, GB)"
                          type: string
                          description: something
                          values:
                          - t2.micro
                          - t2.medium
                          - t2.large
                          key: key-four
                          name: string with values and default
                        - widget: dropdown
                          required: false
                          unit: "($, GHz, GB)"
                          type: integer
                          description: something k5
                          key: key-five
                          values:
                          - 100
                          - 200
                          name: "not required no default, but values"
                          current: 152
                        - widget: dropdown
                          required: false
                          unit: "($, GHz, GB)"
                          type: integer
                          description: something k6
                          key: key-six
                          name: "not required no default, but values"
                          current: 10
                          values:
                          - 10
                          - 40
                          - 80
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/favorites:
    post:
      tags:
      - Organization projects
      description: Add a new project in the user favorites list.
      operationId: createProjectFavorite
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "204":
          description: The project has been added to user favorites list.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    delete:
      tags:
      - Organization projects
      description: Remove a project from the user favorites list.
      operationId: deleteProjectFavorite
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "204":
          description: The project has been removed from user favorites list.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/infrastructure:
    get:
      tags:
      - Organization Infrastructure
      description: Get the infrastructure of the Project on the environment
      operationId: getProjInfrastructure
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      - name: environment_canonical
        in: path
        description: The environment canonical to use as part of a path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentCanonical'
      responses:
        "200":
          description: Get the Infrastructure View of the Project's environment
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Infrastructure'
                description: The Infrastructure from the Project's environment
              example:
                data:
                  graph:
                    nodes:
                    - id: UUID-node-1
                      canonical: aws_lb.front
                      position:
                      - 0
                      - 0
                      resource:
                        canonical: aws_lb
                        keywords:
                        - some
                        - key
                        category: some category
                        image: http://via.placeholder.com/150x150
                        description: description of the resource
                        short_description: resource
                        is_node: true
                        is_edge: false
                    - id: UUID-node-2
                      canonical: aws_instance.front
                      position:
                      - 0
                      - 0
                      resource:
                        canonical: aws_instance
                        keywords:
                        - some
                        - key
                        category: some category
                        image: http://via.placeholder.com/150x150
                        description: description of the resource
                        short_description: resource
                        is_node: true
                        is_edge: false
                    edges:
                    - id: UUID-edge-1
                      source: UUID-node-1
                      target: UUID-node-2
                      canonicals:
                      - aws_security_group.front
                  config:
                    resource:
                      aws_lb:
                        front:
                          access_logs.#: "1"
                          access_logs.0.bucket: ""
                          access_logs.0.enabled: "false"
                          access_logs.0.prefix: ""
                          arn: arn:aws:elasticloadbalancing:eu-west-1:99999994:loadbalancer/app/amazon-front-prod/fa8c187e287baaf1
                          arn_suffix: app/amazon-front-prod/fa8c187e287baaf1
                          dns_name: amazon-front-prod-1234567890.eu-west-1.elb.amazonaws.com
                          enable_deletion_protection: "false"
                          enable_http2: "true"
                          id: arn:aws:elasticloadbalancing:eu-west-1:99999994:loadbalancer/app/amazon-front-prod/fa8c187e287baaf1
                          idle_timeout: "600"
                          internal: "false"
                          ip_address_type: ipv4
                          load_balancer_type: application
                          name: amazon-front-prod
                          security_groups.#: "1"
                          security_groups.3982542233: sg-815549fb
                          subnet_mapping.#: "3"
                          subnet_mapping.1243641484.allocation_id: ""
                          subnet_mapping.1243641484.subnet_id: subnet-e8f5368e
                          subnet_mapping.1617803526.allocation_id: ""
                          subnet_mapping.1617803526.subnet_id: subnet-4caca117
                          subnet_mapping.707871693.allocation_id: ""
                          subnet_mapping.707871693.subnet_id: subnet-08c11040
                          subnets.#: "3"
                          subnets.1359096304: subnet-08c11040
                          subnets.3529352084: subnet-4caca117
                          subnets.4038704495: subnet-e8f5368e
                          tags.%: "6"
                          tags.Name: amazon-front-eu-we1-prod
                          tags.client: amazon
                          tags.cycloid.io: "true"
                          tags.env: prod
                          tags.project: amazon
                          tags.role: front
                          vpc_id: vpc-5972c43f
                          zone_id: Z32O12XQLNTSW2
                      aws_instance:
                        front:
                          ami: ami-0211a849817dcceca
                          arn: arn:aws:ec2:eu-west-1:99999992:instance/i-08ffccfdf54168280
                          associate_public_ip_address: false
                          availability_zone: eu-west-1a
                          cpu_core_count: 1
                          cpu_threads_per_core: 2
                          credit_specification:
                          - cpu_credits: unlimited
                          disable_api_termination: false
                          ebs_block_device: []
                          ebs_optimized: false
                          ephemeral_block_device: []
                          get_password_data: false
                          host_id: null
                          iam_instance_profile: cycloid_profile-front-sample-magento-prod
                          id: i-08ffccfdf54168280
                          instance_initiated_shutdown_behavior: null
                          instance_state: running
                          instance_type: t3.small
                          ipv6_address_count: 0
                          ipv6_addresses: []
                          key_name: cycloid
                          monitoring: false
                          network_interface: []
                          network_interface_id: null
                          password_data: ""
                          placement_group: ""
                          primary_network_interface_id: eni-01eac7f767b723514
                          private_dns: ip-10-4-0-3.eu-west-1.compute.internal
                          private_ip: 10.4.0.3
                          public_dns: ""
                          public_ip: ""
                          root_block_device:
                          - delete_on_termination: true
                            encrypted: false
                            iops: 180
                            kms_key_id: ""
                            volume_id: vol-0a0da4a72f6548eb0
                            volume_size: 60
                            volume_type: gp2
                          security_groups: []
                          source_dest_check: true
                          subnet_id: subnet-7e131c1a
                          tags:
                            Name: sample-magento-front0-eu-we1-prod
                            bar: bla
                            client: cycloid
                            cycloid.io: "true"
                            env: prod
                            foo: test
                            monitoring_discovery: "false"
                            project: sample-magento
                            role: front
                          tenancy: default
                          timeouts: null
                          user_data: null
                          user_data_base64: null
                          volume_tags:
                            Name: sample-magento-front0-eu-we1-prod
                            bar: bla
                            client: cycloid
                            cycloid.io: "true"
                            env: prod
                            foo: test
                            monitoring_discovery: "false"
                            project: sample-magento
                            role: front
                          vpc_security_group_ids:
                          - sg-0d6e0e07fbc6ec626
                          - sg-ddeee6bb
                      aws_security_group:
                        front:
                          cidr_blocks:
                          - 0.0.0.0/0
                          description: ""
                          from_port: 443
                          id: sgrule-3405156902
                          ipv6_cidr_blocks: []
                          prefix_list_ids: []
                          protocol: tcp
                          security_group_id: sg-0f4d72e0081ca0c09
                          self: false
                          source_security_group_id: null
                          to_port: 443
                          type: ingress
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/projects/{project_canonical}:
    get:
      tags:
      - Organization projects
      description: Get a project of the organization.
      operationId: getProject
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "200":
          description: The information of the project of the organization which has
            the specified ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
              example:
                data:
                  id: 1
                  canonical: proj2
                  environments:
                  - id: 2
                    canonical: staging
                    created_at: 1503225026
                    updated_at: 1503335026
                    use_case: uc
                  - id: 3
                    canonical: dev
                    created_at: 1503225026
                    updated_at: 1503335026
                    use_case: uc2
                  created_at: 1501131026
                  updated_at: 1503333026
                  name: Project 2
                  service_catalog:
                    id: 1
                    name: foo
                    canonical: stack-foo
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    directory: /config
                    service_catalog_source_id: 1
                    trusted: true
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization projects
      description: "Update the information of a project of the organization. If the\
        \ project has some information on the fields which aren't required and they\
        \ are not sent or set to their default values, which depend of their types,\
        \ the information will be removed."
      operationId: updateProject
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      requestBody:
        description: The information of the project to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateProject'
        required: true
      responses:
        "200":
          description: Project updated. The body contains information of the updated
            project.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
              example:
                data:
                  id: 1
                  canonical: proj-1
                  service_catalog:
                    id: 1
                    name: foo
                    canonical: stack-foo
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    directory: /config
                    service_catalog_source_id: 1
                    trusted: true
                  owner:
                    username: user-1
                    id: 10
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: Project 1
                  environments:
                  - id: 1
                    canonical: prod
                    created_at: 1503225026
                    updated_at: 1503335026
                  - id: 2
                    canonical: staging
                    created_at: 1503225026
                    updated_at: 1503335026
                  - id: 3
                    canonical: dev
                    created_at: 1503225026
                    updated_at: 1503335026
                  service_catalog_ref: cycloidio:stack-magento
                  config_repository_canonical: stack-magento-cr
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization projects
      description: Delete a project of the organization.
      operationId: deleteProject
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: project_canonical
        in: path
        description: A canonical of a project.
        required: true
        schema:
          $ref: '#/components/schemas/ProjectCanonical'
      responses:
        "204":
          description: Project has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/quotas:
    get:
      tags:
      - Organization Quotas
      description: List of quotas available in the organization.
      operationId: listQuotas
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of quotas which are available in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quota'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 17
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                - id: 2
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Quotas
      description: Create a new quota available in the organization.
      operationId: createQuota
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's quota to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewQuota'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewQuota'
        required: true
      responses:
        "200":
          description: New quota created in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Quota'
              example:
                data:
                  id: 17
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/quotas/{quota_id}:
    get:
      tags:
      - Organization Quotas
      description: Get the quota available in the organization with an canonical
      operationId: getQuota
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: quota_id
        in: path
        description: Quota ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "200":
          description: Quota available in the organization with such canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Quota'
              example:
                data:
                  id: 17
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Quotas
      description: Update an existing quota in the organization.
      operationId: updateQuota
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: quota_id
        in: path
        description: Quota ID
        required: true
        schema:
          type: integer
          format: uint32
      requestBody:
        description: The information of the organization's quota to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateQuota'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateQuota'
        required: true
      responses:
        "200":
          description: Updated quota belonging to the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Quota'
              example:
                data:
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Quotas
      description: Delete an existing quota in the organization.
      operationId: deleteQuota
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: quota_id
        in: path
        description: Quota ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "204":
          description: Organization quota has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/quotas/{quota_id}/consumptions:
    get:
      tags:
      - Organization Quotas
      description: Get the quota consumptions by project and environment
      operationId: listQuotaConsumptions
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: quota_id
        in: path
        description: Quota ID
        required: true
        schema:
          type: integer
          format: uint32
      responses:
        "200":
          description: Quota available in the organization with such canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProjectEnvironmentConsumption'
              example:
                data:
                  id: 17
                  memory: 10
                  cpu: 11
                  storage: 12
                  project:
                    id: 1
                    canonical: proj2
                    name: prj
                    created_at: 1501131026
                    updated_at: 1503333026
                    owner:
                      username: user-1
                      id: 1
                      given_name: Mariano
                      family_name: Jimenez
                      email: mariano.jimenez@fakeemail.com
                      picture_url: https://avatars2.githubusercontent.com/u/14579210
                      created_at: 1503225026
                  environment:
                    id: 3
                    canonical: dev
                    cloud_provider:
                      canonical: aws
                      abbreviation: AWS
                      name: Amazon Web Services
                    created_at: 1503225026
                    updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/resource_pools:
    get:
      tags:
      - Organization Resource Pools
      description: List of resource pools available in the organization.
      operationId: listResourcePools
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of resource pools which are available in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResourcePool'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 17
                  name: Prod Pool
                  canonical: prod_pool
                  label: production
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                  allocated_memory: 10
                  allocated_cpu: 11
                  allocated_storage: 12
                - id: 2
                  name: Stating Pool
                  canonical: staging_pool
                  label: staging
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                  allocated_memory: 10
                  allocated_cpu: 11
                  allocated_storage: 12
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Resource Pools
      description: Create a new resource pool available in the organization.
      operationId: createResourcePool
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's resource_pool to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewResourcePool'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewResourcePool'
        required: true
      responses:
        "200":
          description: New resource pool created in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResourcePool'
              example:
                data:
                  name: existing
                  canonical: resource_pool_can
                  label: staging
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/resource_pools/{resource_pool_canonical}:
    get:
      tags:
      - Organization ResourcePools
      description: Get the resource pool available in the organization with an canonical
      operationId: getResourcePool
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: resource_pool_canonical
        in: path
        description: Organization Resource Pool canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: ResourcePool available in the organization with such canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResourcePool'
              example:
                data:
                  id: 17
                  name: Prod Pool
                  canonical: prod_pool
                  label: production
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                  allocated_memory: 10
                  allocated_cpu: 11
                  allocated_storage: 12
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Resource Pools
      description: Update an existing resource_pool in the organization.
      operationId: updateResourcePool
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: resource_pool_canonical
        in: path
        description: Organization Resource Pool canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's resource_pool to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewResourcePool'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewResourcePool'
        required: true
      responses:
        "200":
          description: Updated resource pool belonging to the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResourcePool'
              example:
                data:
                  id: 17
                  name: Prod Pool
                  canonical: prod_pool
                  label: production
                  memory: 10
                  cpu: 11
                  storage: 12
                  used_memory: 10
                  used_cpu: 11
                  used_storage: 12
                  allocated_memory: 10
                  allocated_cpu: 11
                  allocated_storage: 12
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Resource Pools
      description: Delete an existing resource_pool in the organization.
      operationId: deleteResourcePool
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: resource_pool_canonical
        in: path
        description: Organization Resource Pool canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Organization resource_pool has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/roles:
    get:
      tags:
      - Organization Roles
      description: Get the list of roles available in the organization.
      operationId: getRoles
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of roles which are available in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - id: 17
                  name: existing
                  description: Organization existing role
                  canonical: role-can
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
                - id: 2
                  name: project manager
                  canonical: role-can2
                  description: A project manager
                  rules:
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Roles
      description: Create a new role available in the organization.
      operationId: createRole
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's role to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewRole'
        required: true
      responses:
        "200":
          description: New role created in the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NewRole'
              example:
                data:
                  id: 17
                  name: existing
                  description: Organization existing role
                  canonical: role-can
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/roles/{role_canonical}:
    get:
      tags:
      - Organization Roles
      description: Get the role available in the organization with an canonical
      operationId: getRole
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: role_canonical
        in: path
        description: Organization Role canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Role available in the organization with such canonical.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
              example:
                data:
                  id: 17
                  name: existing
                  description: Organization existing role
                  canonical: role-can
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Roles
      description: Update an existing role in the organization.
      operationId: updateRole
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: role_canonical
        in: path
        description: Organization Role canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization's role to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewRole'
        required: true
      responses:
        "200":
          description: Updated role belonging to the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
              example:
                data:
                  id: 17
                  name: existing
                  description: Organization existing role
                  canonical: role-can
                  rules:
                  - id: 1
                    effect: allow
                    action: organization:delete
                    resources:
                    - organization:org-can
                    - organization:org-can2
                  - id: 20
                    effect: allow
                    action: organization:team:create
                    resources: []
                  - id: 21
                    effect: allow
                    action: organization:team:read
                    resources:
                    - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Roles
      description: Delete an existing role in the organization.
      operationId: deleteRole
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: role_canonical
        in: path
        description: Organization Role canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Organization role has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalog_sources:
    get:
      tags:
      - Organization Service Catalog Sources
      description: Return all the private service catalogs
      operationId: getServiceCatalogSources
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the private service catalogs.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceCatalogSource'
              example:
                data:
                - id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  branch: my-favourite-branch
                  stack_count: 1
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 3
                      name: developer
                      description: A developer of the team
                      policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 42
                        code: member:read
                        entities: []
                        description: Grant the access to read the members
                  service_catalogs:
                  - id: 1
                    name: foo
                    canonical: stack-foo
                    directory: /config
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    service_catalog_source_id: 1
                    trusted: true
                - id: 2
                  canonical: my-personal-repo-2
                  name: My personal repo 2
                  url: https://github.com/cycloid-community-catalog/stack-dummy.git
                  created_at: 1503225026
                  updated_at: 1503335026
                  branch: my-second-favourite-branch
                  stack_count: 4
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 3
                      name: developer
                      description: A developer of the team
                      policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 42
                        code: member:read
                        entities: []
                        description: Grant the access to read the members
                      - id: 60
                        code: project:read
                        entities: []
                        description: Grant the access to projects
                  service_catalogs:
                  - id: 2
                    name: bar
                    canonical: stack-bar
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-bar
                    directory: /cfg
                    service_catalog_source_id: 2
                    trusted: true
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization Service Catalog Sources
      description: Creates a Service catalog source
      operationId: createServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewServiceCatalogSource'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewServiceCatalogSource'
        required: true
      responses:
        "200":
          description: Success creation
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalogSource'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  branch: my-scs-branch
                  stack_count: 1
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 3
                      name: developer
                      description: A developer of the team
                      policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 42
                        code: member:read
                        entities: []
                        description: Grant the access to read the members
                      - id: 60
                        code: project:read
                        entities: []
                        description: Grant the access to projects
                  service_catalogs:
                  - id: 1
                    name: foo
                    canonical: stack-foo
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    directory: /config
                    service_catalog_source_id: 1
                    trusted: true
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_canonical}/refresh:
    post:
      tags:
      - Organization Service Catalog Sources
      description: Refresh a Service catalog source
      operationId: refreshServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: path
        description: Organization Service Catalog Sources canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Success refresh
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalogChanges'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:cycloidio/youdeploy-http-api.git
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  branch: my-favourite-branch
                  changes:
                    created:
                    - id: 1
                      name: foo
                      canonical: stack-foo
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo
                      directory: /config
                      service_catalog_source_id: 1
                      trusted: true
                    updated:
                    - id: 2
                      name: foo2
                      canonical: stack-foo2
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo2
                      directory: /config/prod
                      service_catalog_source_id: 1
                      trusted: true
                    deleted:
                    - id: 3
                      name: fo3
                      canonical: stack-foo3
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo3
                      directory: /
                      service_catalog_source_id: 1
                      trusted: true
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_canonical}:
    get:
      tags:
      - Organization Service Catalog Sources
      description: Return the Service Catalog Source
      operationId: getServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: path
        description: Organization Service Catalog Sources canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: Organization Service Catalog Sources.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalogSource'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  created_at: 1503225026
                  updated_at: 1503335026
                  credential_id: 1
                  branch: my-scs-branch
                  stack_count: 1
                  service_catalogs:
                  - id: 1
                    name: foo
                    canonical: stack-foo
                    author: Cycloid CI
                    description: CI sample
                    keywords:
                    - ci
                    ref: cycloid:stack-foo
                    directory: /config
                    service_catalog_source_id: 1
                    trusted: true
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 3
                      name: developer
                      description: A developer of the team
                      policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 42
                        code: member:read
                        entities: []
                        description: Grant the access to read the members
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization Service Catalog Sources
      description: Update a Service catalog source
      operationId: updateServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: path
        description: Organization Service Catalog Sources canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateServiceCatalogSource'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateServiceCatalogSource'
        required: true
      responses:
        "200":
          description: Success update
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalogSource'
              example:
                data:
                  id: 1
                  canonical: my-personal-repo
                  name: My personal repo
                  url: git@github.com:myuser/repository.git
                  credential_id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  branch: my-favourite-branch
                  stack_count: 1
                  owner:
                    username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    role:
                      id: 3
                      name: developer
                      description: A developer of the team
                      policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 42
                        code: member:read
                        entities: []
                        description: Grant the access to read the members
                  service_catalogs:
                    created:
                    - id: 1
                      name: foo
                      canonical: stack-foo
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo
                      directory: /config
                      service_catalog_source_id: 1
                      trusted: true
                    updated:
                    - id: 2
                      name: foo2
                      canonical: stack-foo2
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo2
                      directory: /config/prod
                      service_catalog_source_id: 1
                      trusted: true
                    deleted:
                    - id: 3
                      name: fo3
                      canonical: stack-foo3
                      author: Cycloid CI
                      description: CI sample
                      keywords:
                      - ci
                      ref: cycloid:stack-foo3
                      directory: /
                      service_catalog_source_id: 1
                      trusted: true
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization Service Catalog Sources
      description: delete a Service catalog source
      operationId: deleteServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: path
        description: Organization Service Catalog Sources canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Organization Service Catalog Sources has been deleted
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_canonical}/validate:
    post:
      tags:
      - Organization Service Catalog Sources
      description: Validate a Service catalog source
      operationId: validateServiceCatalogSource
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_source_canonical
        in: path
        description: Organization Service Catalog Sources canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: The SCS has been validated
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/subscriptions:
    post:
      tags:
      - Organization Subscriptions
      description: Creates a subscription for the Organization
      operationId: createSubscription
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the subscription to create
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewSubscription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewSubscription'
        required: true
      responses:
        "204":
          description: Created Subscription
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/teams:
    get:
      tags:
      - Organization teams
      description: Get list of teams of the organization.
      operationId: getTeams
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: team_name
        in: query
        description: Search by team's name
        schema:
          type: string
      - name: team_created_at
        in: query
        description: Search by team's creation date
        schema:
          type: integer
          format: uint64
      - name: team_description
        in: query
        description: Search by team's description
        schema:
          type: string
      - name: user_id
        in: query
        description: Search by entity's owner
        schema:
          type: integer
          format: uint32
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      responses:
        "200":
          description: List of the teams which the organization has.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: team1
                  id: 1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: Team 1
                  owner:
                    id: 99
                    username: superuser
                    given_name: Owen
                    family_name: Smith
                    email: superuser@company.com
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  roles:
                  - id: 17
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 20
                      effect: allow
                      action: organization:team:create
                      resources: []
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  member_count: 12
                  members_preview:
                  - id: 42
                    username: coder
                    given_name: Cody
                    family_name: Coder
                    email: coder@company.com
                    created_at: 678123
                  - id: 43
                    username: tester
                    given_name: Tony
                    family_name: Tester
                    email: tester@company.com
                    created_at: 678123
                pagination:
                  index: 1
                  size: 10
                  total: 1
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization teams
      description: Create a new team in the organization.
      operationId: createTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the team to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewTeam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewTeam'
        required: true
      responses:
        "200":
          description: Team created. The body contains the information of the new
            team of the organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
              example:
                data:
                  id: 1
                  canonical: team1
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: Team 1
                  owner:
                    id: 99
                    username: superuser
                    given_name: Owen
                    family_name: Smith
                    email: superuser@company.com
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  roles:
                  - id: 17
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 20
                      effect: allow
                      action: organization:team:create
                      resources: []
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  - id: 10
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  member_count: 12
                  members_preview:
                  - id: 42
                    username: coder
                    given_name: Cody
                    family_name: Coder
                    email: coder@company.com
                    created_at: 678123
                  - id: 43
                    username: tester
                    given_name: Tony
                    family_name: Tester
                    email: tester@company.com
                    created_at: 678123
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/teams/{team_canonical}/members:
    get:
      tags:
      - Organization team members
      description: Get the members of a team of the organization.
      operationId: getTeamMembers
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the members who are assigned to the team.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberTeam'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - username: user-1
                  id: 1
                  given_name: Mariano
                  family_name: Jimenez
                  email: mariano.jimenez@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503225026
                  last_login_at: 1503225576
                - username: user2
                  id: 1
                  given_name: Jordi
                  family_name: Capdevila
                  email: jordi.capdevila@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503281026
                  invited_at: 1503281026
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organization team members
      description: Assign a user of the organization to be a member of a team.
      operationId: assignMemberToTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The assignation information for being a member or being updated.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewTeamMemberAssignation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewTeamMemberAssignation'
        required: true
      responses:
        "204":
          description: The user has been made a member of the team.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/teams/{team_canonical}/members/{member_id}:
    get:
      tags:
      - Organization team members
      description: Get the information of a member of the team.
      operationId: getTeamMember
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          maxLength: 100
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - $ref: '#/components/parameters/member_id'
      responses:
        "200":
          description: The information of the member of the team.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberTeam'
              example:
                data:
                  id: 1
                  username: user-1
                  given_name: Mariano
                  family_name: Jimenez
                  email: mariano.jimenez@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503225026
                  last_login_at: 1503281333
                  role:
                    id: 17
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 20
                      effect: allow
                      action: organization:team:create
                      resources: []
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    delete:
      tags:
      - Organization team members
      description: "Unassign a member of the team. After this operation, the user\
        \ will not be a member of the team."
      operationId: unassignMemberFromTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: username
        in: path
        description: A username
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: The user has been unassigned of the team.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/teams/{team_canonical}:
    get:
      tags:
      - Organization teams
      description: Get the information of a team of the organization.
      operationId: getTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the team of the organization which has the
            specified ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
              example:
                data:
                  id: 1
                  canonical: team-2
                  created_at: 1503225026
                  updated_at: 1503335026
                  name: Team 2
                  owner:
                    id: 99
                    username: superuser
                    given_name: Owen
                    family_name: Smith
                    email: superuser@company.com
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  roles:
                  - id: 17
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 20
                      effect: allow
                      action: organization:team:create
                      resources: []
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  member_count: 12
                  members_preview:
                  - id: 42
                    username: cooluser
                    given_name: given
                    family_name: family
                    email: cooluser@company.com
                    created_at: 678123
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organization teams
      description: Update the information of a team of the organization.
      operationId: updateTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the team to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateTeam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateTeam'
        required: true
      responses:
        "200":
          description: Team updated. The body contains information of the updated
            team.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Team'
              example:
                data:
                  id: 1
                  canonical: team-3
                  created_at: 1503220026
                  updated_at: 1503335126
                  name: Team 3
                  owner:
                    id: 99
                    username: superuser
                    given_name: Owen
                    family_name: Smith
                    email: superuser@company.com
                    created_at: 1503225026
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                      - id: 1
                        effect: allow
                        action: organization:delete
                        resources:
                        - organization:org-can
                        - organization:org-can2
                      - id: 20
                        effect: allow
                        action: organization:team:create
                        resources: []
                      - id: 21
                        effect: allow
                        action: organization:team:read
                        resources:
                        - organization:org-can:team:team-can
                  roles:
                  - id: 17
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 20
                      effect: allow
                      action: organization:team:create
                      resources: []
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  - id: 10
                    name: existing
                    description: Organization existing role
                    canonical: role-can
                    rules:
                    - id: 1
                      effect: allow
                      action: organization:delete
                      resources:
                      - organization:org-can
                      - organization:org-can2
                    - id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  member_count: 12
                  members_preview:
                  - id: 42
                    username: coder
                    given_name: Cody
                    family_name: Coder
                    email: coder@company.com
                    created_at: 678123
                  - id: 43
                    username: tester
                    given_name: Tony
                    family_name: Tester
                    email: tester@company.com
                    created_at: 678123
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organization teams
      description: Delete a team of the organization.
      operationId: deleteTeam
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: team_canonical
        in: path
        description: A canonical of a team.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Team has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/workers:
    get:
      tags:
      - Organization workers
      description: Get the workers that the authenticated user has access to.
      operationId: getWorkers
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      responses:
        "200":
          description: List of the workers which authenticated user has access to.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Worker'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - name: worker1
                  state: running
                  version: "2.1"
                  platform: linux
                  ephemeral: false
                  active_containers: 256
                  active_volumes: 0
                  team: org1
                  start_time: 1552997739
                - name: worker2
                  state: running
                  version: "2.1"
                  platform: linux
                  tags:
                  - fastcpu
                  ephemeral: true
                  active_containers: 256
                  active_volumes: 10
                  start_time: 1552997639
                  team: org2
                - name: worker3
                  state: running
                  version: "2.1"
                  platform: linux
                  tags:
                  - ssd
                  ephemeral: true
                  active_containers: 300
                  active_volumes: 20
                  start_time: 1552997839
                  team: org3
                pagination:
                  index: 1
                  size: 5
                  total: 3
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/ancestors:
    get:
      tags:
      - Organizations
      description: Get all the ancestors between the Organization and the User with
        the shortest path.
      operationId: getAncestors
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: Get all the ancestors between the Organization and the User
            with the shortest path. 0 index is the parent and n is the searched child
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: org1
                  id: 1
                  name: Organization 1
                  ci_team_name: asfdOPNljk
                  created_at: 1503225026
                  updated_at: 1503335026
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                - canonical: org2
                  id: 2
                  name: Organization 2
                  ci_team_name: asfdOPNljk
                  created_at: 1501131026
                  updated_at: 1503333026
                  blocked:
                  - require_payment
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                - canonical: org3
                  id: 3
                  name: Organization 3
                  ci_team_name: asfdOPNljk
                  created_at: 1500135021
                  updated_at: 1503332021
                  blocked:
                  - require_payment
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                pagination:
                  total: 42
                  index: 33
                  size: 10
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/branches:
    get:
      tags:
      - Organizations
      description: |
        Return all the branches of repository. If the repository is empty then an
        empty list will be returned.
      operationId: getRepoBranches
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: credential_canonical
        in: query
        description: A Credential canonical
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: git_url
        in: query
        description: Git URL to repository
        required: true
        schema:
          pattern: "^((/|~)[^/]*)+.(\\.git)|(([\\w\\]+@[\\w\\.]+))(:(//)?)([\\w\\\
            .@\\:/\\-~]+)(/)?"
          type: string
      responses:
        "200":
          description: List of the repository branches
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
              example:
                data:
                - stacks
                - stacks2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/can_do:
    post:
      tags:
      - Organizations
      description: Checks if the JWT can do the action
      operationId: canDo
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the authorization
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/CanDoInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CanDoInput'
        required: true
      responses:
        "200":
          description: The information of the possibility to do the action
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CanDoOutput'
              example:
                data:
                  ok: true
                  entity_canonicals:
                  - pepito
                  - grillo
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations:
    get:
      tags:
      - Organizations
      description: Get the organizations that the authenticated user has access.
      operationId: getOrgs
      parameters:
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: organization_name
        in: query
        description: Search by the organization's name
        schema:
          type: string
      - name: organization_created_at
        in: query
        description: Search by organization's creation date
        schema:
          type: integer
          format: uint64
      - name: order_by
        in: query
        description: |
          Allows to order the list of items. Example usage: field_name:asc
        schema:
          type: string
      responses:
        "200":
          description: List of the organizations which authenticated user has access.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - canonical: org1
                  id: 1
                  name: Organization 1
                  ci_team_name: asfdOPNljk
                  ci_port: 443
                  ci_url: https://scheduler.cycloid.io
                  created_at: 1503225026
                  updated_at: 1503335026
                  has_children: true
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                  subscription:
                    expires_at: 1501131026
                    members_count: 10
                    plan:
                      id: 5
                      name: Free Trial
                      canonical: free_trial
                - canonical: org2
                  id: 1
                  name: Organization 2
                  ci_team_name: asfdOPNljk
                  ci_port: 443
                  ci_url: https://scheduler.cycloid.io
                  created_at: 1501131026
                  updated_at: 1503333026
                  has_children: false
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                  subscription:
                    expires_at: 1501131026
                    members_count: 10
                    plan:
                      id: 5
                      name: Free Trial
                      canonical: free_trial
                - canonical: org3
                  id: 1
                  name: Organization 3
                  ci_team_name: asfdOPNljk
                  ci_port: 443
                  ci_url: https://scheduler.cycloid.io
                  created_at: 1500135021
                  updated_at: 1503332021
                  has_children: false
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                  subscription:
                    expires_at: 1501131026
                    members_count: 10
                    plan:
                      id: 5
                      name: Free Trial
                      canonical: free_trial
                pagination:
                  index: 1
                  size: 10
                  total: 3
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Organizations
      description: "Create a new organization, making the authenticated user the owner\
        \ of it."
      operationId: createOrg
      requestBody:
        description: The information of the organization to create.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewOrganization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewOrganization'
        required: true
      responses:
        "200":
          description: Organization created. The body contains the information of
            the new created organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
              example:
                data:
                  id: 1
                  canonical: org1
                  name: Organization 1
                  ci_team_name: asfdOPNljk
                  ci_port: 443
                  ci_url: https://scheduler.cycloid.io
                  created_at: 1503225026
                  updated_at: 1503335026
                  has_children: false
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: false
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}:
    get:
      tags:
      - Organizations
      description: Get the information of the organization.
      operationId: getOrg
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of the organization which has the specified
            ID.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
              example:
                data:
                  id: 1
                  canonical: org3
                  ci_team_name: asfdOPNljk
                  name: Organization 3
                  blocked: []
                  has_children: false
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: false
                  created_at: 1500135021
                  updated_at: 1503332021
                  subscription:
                    expires_at: 1501131026
                    members_count: 10
                    plan:
                      id: 5
                      name: Free Trial
                      canonical: free_trial
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Organizations
      description: Update the information of the organization.
      operationId: updateOrg
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the organization to update.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateOrganization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateOrganization'
        required: true
      responses:
        "200":
          description: Organization updated. The body contains information of the
            updated organization.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
              example:
                data:
                  id: 1
                  canonical: org2
                  ci_team_name: asfdOPNljk
                  name: Organization 2
                  blocked: []
                  quotas: false
                  can_create_appearance: true
                  can_children_create_appearance: true
                  created_at: 1501131026
                  updated_at: 1503333026
                  subscription:
                    expires_at: 1501131026
                    members_count: 10
                    plan:
                      id: 5
                      name: Free Trial
                      canonical: free_trial
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Organizations
      description: Delete the organization.
      operationId: deleteOrg
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "204":
          description: Organization has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/summary:
    get:
      tags:
      - Organizations
      description: Get the summary of the organization
      operationId: getSummary
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The summary object
          content:
            application/json:
              schema:
                required:
                - summary
                type: object
                properties:
                  summary:
                    $ref: '#/components/schemas/Summary'
              example:
                summary:
                  projects: 5
                  pipelines: 5
                  credentials: 5
                  service_catalog_sources: 5
                  config_repositories: 5
                  teams: 5
                  users: 5
                  roles: 5
                  service_catalogs: 5
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
  /saml2/acs:
    post:
      tags:
      - SAML2
      description: Assertion Consumer Service callback endpoint for the SAML2 Identity
        Provider.
      operationId: samlAssertionConsumerService
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                SAMLResponse:
                  type: string
                  description: Base64-encoded SAML authentication response document.
      responses:
        "303":
          description: "The response will always be a redirect to the front-end with\
            \ the authentication code. With this code, the application can proceed\
            \ with a normal OAuth flow, by sending it to the /user/saml2/oauth endpoint."
          headers:
            Location:
              description: "Location URL will contain either a \"code\" or \"error\"\
                \ query parameter, depending on authentication result."
              schema:
                type: string
                format: uri
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /saml2:
    get:
      tags:
      - SAML2
      description: Returns the Cycloid instance's SAML2 metadata that can be plugged
        into an Identity Provider.
      operationId: getSamlMetadata
      responses:
        "200":
          description: SAML2 XML metadata describing the Cycloid Service Provider.
          content:
            application/xml:
              schema:
                type: object
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /organizations/{organization_canonical}/service_catalogs:
    get:
      tags:
      - Service catalogs
      description: Return all the service catalogs
      operationId: listServiceCatalogs
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: page_index
        in: query
        description: The page number to request. The first page is 1.
        schema:
          type: integer
          format: uint32
          default: 1
      - name: page_size
        in: query
        description: The number of items at most which the response can have.
        schema:
          type: integer
          format: uint32
          default: 1000
      - name: service_catalog_status
        in: query
        description: The status of the catalog service used for filtering.
        schema:
          type: string
      - name: service_catalog_own
        in: query
        description: |
          Filters the Service Catalogs to only show the ones owned by the User Organization
        schema:
          type: boolean
      - name: service_catalog_trusted
        in: query
        description: |
          Filters the Service Catalogs to only show the ones that are from trusted source (Cycloid)
        schema:
          type: boolean
      - name: service_catalog_template
        in: query
        description: |
          Filters the Service Catalogs to only show the ones that are templates
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: List of the service catalogs.
          content:
            application/json:
              schema:
                required:
                - data
                - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceCatalog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                - name: stack-magento
                  id: 1
                  author: Cycloid
                  canonical: stack-magento
                  image: http://via.placeholder.com/150x150
                  description: Super magento stack
                  trusted: true
                  keywords:
                  - stack
                  - php
                  ref: orgCanonical:stackCanonical
                  directory: /config
                  status: private
                  service_catalog_source_canonical: scscan
                  technologies:
                  - technology: nginx
                    version: "1.15"
                  - technology: debian
                    version: "9.1"
                  - technology: magento
                    version: "2.2"
                  - technology: Php
                    version: "7.2"
                  - technology: Redis
                    version: "2.4"
                  - technology: Elasticsearch
                    version: "6.2"
                  created_at: 1503225026
                  updated_at: 1503335026
                - name: infra-classic-web
                  id: 2
                  author: Cycloid
                  canonical: stack-magento
                  image: http://via.placeholder.com/150x150
                  description: Super magento stack
                  trusted: false
                  keywords:
                  - stack
                  - php
                  ref: cycloidio:stack-magento
                  status: private
                  service_catalog_source_canonical: scscan
                  technologies:
                  - technology: nginx
                    version: "1.15"
                  - technology: debian
                    version: "9.1"
                  - technology: magento
                    version: "2.2"
                  - technology: Php
                    version: "7.2"
                  - technology: Redis
                    version: "2.4"
                  - technology: Elasticsearch
                    version: "6.2"
                  created_at: 1503225026
                  updated_at: 1503335026
                pagination:
                  index: 1
                  size: 10
                  total: 2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    post:
      tags:
      - Service catalogs
      description: Create a new Service Catalog
      operationId: createServiceCatalog
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the ServiceCatalog.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewServiceCatalog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewServiceCatalog'
        required: true
      responses:
        "200":
          description: The information of the service catalog.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalog'
              example:
                data:
                  id: 1
                  name: stack-magento
                  author: Cycloid
                  canonical: stack-magento
                  image: http://via.placeholder.com/150x150
                  description: Super magento stack
                  type: stack
                  trusted: true
                  keywords:
                  - stack
                  - php
                  ref: orgCanonical:stackCanonical
                  directory: /config
                  status: private
                  technologies:
                  - technology: nginx
                    version: "1.15"
                  - technology: debian
                    version: "9.1"
                  - technology: magento
                    version: "2.2"
                  - technology: Php
                    version: "7.2"
                  - technology: Redis
                    version: "2.4"
                  - technology: Elasticsearch
                    version: "6.2"
                  created_at: 1503225026
                  updated_at: 1503335026
                  service_catalog_source_canonical: scscan
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/config:
    get:
      tags:
      - Service catalogs
      description: Get the config of the service catalog
      operationId: getServiceCatalogConfig
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The config of the service catalog.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
              example:
                data:
                  first-usecase:
                    pipeline:
                      pipeline:
                        path: pipeline/magento.yml
                        content: |
                          groups:

                          - name: magento-((env))
                            jobs:
                            - magento-((env))-build
                            - full-deploy-front-magento-((env))
                            - app-deploy-front-magento-((env))
                            - terraform-plan-magento-((env))
                            - terraform-apply-magento-((env))
                            - magento-((env))-unittests
                            - magento-((env))-functional-tests

                          resource_types:

                          - name: terraform
                            type: docker-image
                            source:
                              repository: ljfranklin/terraform-resource

                          resources:

                          - name: terraform-magento-((env))
                            type: terraform
                            source:
                              storage:
                                bucket: ((terraform_storage_bucket_name))
                                bucket_path: ((terraform_storage_bucket_path))
                                region_name: ((aws_default_region))
                                access_key_id: "((terraform_storage_access_key))"
                                secret_access_key: "((terraform_storage_secret_key))"
                              vars:
                                access_key: ((aws_access_key))
                                secret_key: ((aws_secret_key))
                              env:
                                AWS_ACCESS_KEY_ID: ((aws_access_key))
                                AWS_DEFAULT_REGION: ((aws_default_region))
                                AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
                      variables:
                        path: pipeline/variables.sample.yml
                        destination: pipeline/($ environment $)-variables.yml
                        content: |
                          env: ($ environment $)
                          magento_deploy_bucket_name: magento-deploy
                          magento_deploy_bucket_object_path: /catalog-magento/($ environment $)/magento.tar.gz
                          magento_deploy_bucket_region: eu-west-1
                          magento_deploy_bucket_access_key: ...
                          magento_deploy_bucket_secret_access_key: ...
                          terraform_storage_access_key: ...
                          terraform_storage_secret_key: ...
                          terraform_storage_bucket_name: magento-terraform-remote-state
                          terraform_storage_bucket_path: magento/($ environment $)
                          aws_access_key: ...
                          aws_secret_key: ...
                          aws_default_region: eu-west-1

                          ansible_vault_password: ...
                          bastion_url: admin@bastion.server.com
                          bastion_private_key_pair: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          catalog_magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          magento_git_repository: git@github.com:myuser/code-magento.git
                          magento_git_branch: master
                          magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----


                          magento_config_git_repository: git@github.com:myuser/config-magento.git
                          magento_config_git_branch: master
                          magento_config_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----
                    ansible:
                      magento:
                        path: ansible/environments/front.yml.sample
                        destination: ansible/environments/($ environment $)-front.yml
                        content: |
                          # In this file you could override any variables present in default_front.yaml file

                          # Usually you might want to override those variables :
                          # magento_backend_frontname: admin
                          # magento_admin_firstname: admin
                          # magento_admin_lastname: admin
                          # magento_admin_email: root@localhost.local
                          # magento_admin_user: admin

                          # magento_admin_password: 4Bigs3cr3t

                          # In case you want to use vault to encrypt this password use the following command to generate the ansible vault var :
                          # echo -n "4Bigs3cr3t" | ansible-vault encrypt_string --stdin-name=magento_admin_password
                          #>> magento_admin_password: !vault |
                          #>>           $ANSIBLE_VAULT;1.1;AES256
                          #>>           37363232383334316164366337366430316535636130376134323366313565356365363662653539
                          #>>           3161303331303565643831383839626263653362636466660a316530613935393464366536383839
                          #>>           30303836326138306339623431356234333239343435623333343333623938633761636132303662
                          #>>           3135343861383531660a393934316237363961663865393939313966373838653339326565353263
                          #>>           6238
                    terraform:
                      magento:
                        path: terraform/magento.tf.sample
                        destination: terraform/magento/($ environment $)/magento.tf
                        content: |
                          variable "rds_password" {
                              default = "ChangeMePls"
                          }

                          module "magento" {
                            source = "module-magento"

                            env                      = "($ environment $)"
                            vpc_id                   = "<vpc-id>"
                            private_subnets_ids      = ["private-subnets"]
                            magento_ssl_cert         = "<ssl-cert-arn>"
                            bastion_sg_allow         = "<bastion-sg>"
                            public_subnets_ids       = ["<public-subnets>"]

                            rds_password             = "${var.rds_password}"

                            # project = "magento"

                            # FIXME optimized false : should be changes with the instance type ?

                            # rds_database         = "magento"
                            # rds_disk_size        = 10
                            # rds_multiaz          = false
                            # rds_storage_type     = "gp2"
                            # rds_subnet           = "<rds-subnet-id>"
                            # rds_type             = "db.t2.small"
                            # rds_username         = "magento"
                            # rds_engine           = ""mysql"
                            # rds_engine_version   = "5.7.16"
                            # rds_backup_retention = 7
                            # rds_parameters       = ""

                            # cache_subnet                     = "cache-subnet-id"
                            # elasticache_type                 = "cache.t2.micro"
                            # elasticache_nodes                = "1
                            # elasticache_parameter_group_name = "default.redis3.2"
                            # elasticache_engine               = "redis"
                            # elasticache_port                 = "6379"
                            # front_count           = "1"
                            # front_disk_size       = "60"
                            # front_disk_type       = "gp2"
                            # front_type            = "t2.small"

                          }
                    forms:
                      pipeline:
                        group1:
                        - widget: text_area
                          default: nobucket
                          type: string
                          description: Bucket used to store magento code
                          key: magento_deploy_bucket_name
                          name: The bucket used
                        - widget: text_area
                          type: string
                          description: Doesn't matter
                          key: no-exist
                          name: Some imaginary var
                      terraform:
                        group2:
                        - widget: simple_text
                          type: array
                          description: List of public network IDs
                          key: public_subnets_ids
                          name: Pub nets
                        - widget: text_area
                          type: string
                          description: The VPC ID to run the project
                          key: vpc_id
                          name: VPC ID
                  second-usecase:
                    pipeline:
                      pipeline:
                        path: pipeline/magento.yml
                        content: |
                          groups:

                          - name: magento-((env))
                            jobs:
                            - magento-((env))-build
                            - full-deploy-front-magento-((env))
                            - app-deploy-front-magento-((env))
                            - terraform-plan-magento-((env))
                            - terraform-apply-magento-((env))
                            - magento-((env))-unittests
                            - magento-((env))-functional-tests

                          resource_types:

                          - name: terraform
                            type: docker-image
                            source:
                              repository: ljfranklin/terraform-resource

                          resources:

                          - name: terraform-magento-((env))
                            type: terraform
                            source:
                              storage:
                                bucket: ((terraform_storage_bucket_name))
                                bucket_path: ((terraform_storage_bucket_path))
                                region_name: ((aws_default_region))
                                access_key_id: "((terraform_storage_access_key))"
                                secret_access_key: "((terraform_storage_secret_key))"
                              vars:
                                access_key: ((aws_access_key))
                                secret_key: ((aws_secret_key))
                              env:
                                AWS_ACCESS_KEY_ID: ((aws_access_key))
                                AWS_DEFAULT_REGION: ((aws_default_region))
                                AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
                      variables:
                        path: pipeline/variables.sample.yml
                        destination: pipeline/($ environment $)-variables.yml
                        content: |
                          env: ($ environment $)
                          magento_deploy_bucket_name: magento-deploy
                          magento_deploy_bucket_object_path: /catalog-magento/($ environment $)/magento.tar.gz
                          magento_deploy_bucket_region: eu-west-1
                          magento_deploy_bucket_access_key: ...
                          magento_deploy_bucket_secret_access_key: ...
                          terraform_storage_access_key: ...
                          terraform_storage_secret_key: ...
                          terraform_storage_bucket_name: magento-terraform-remote-state
                          terraform_storage_bucket_path: magento/($ environment $)
                          aws_access_key: ...
                          aws_secret_key: ...
                          aws_default_region: eu-west-1

                          ansible_vault_password: ...
                          bastion_url: admin@bastion.server.com
                          bastion_private_key_pair: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          catalog_magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----

                          magento_git_repository: git@github.com:myuser/code-magento.git
                          magento_git_branch: master
                          magento_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----


                          magento_config_git_repository: git@github.com:myuser/config-magento.git
                          magento_config_git_branch: master
                          magento_config_git_private_key: |-
                            -----BEGIN RSA PRIVATE KEY-----
                            -----END RSA PRIVATE KEY-----
                    ansible:
                      magento:
                        path: ansible/environments/front.yml.sample
                        destination: ansible/environments/($ environment $)-front.yml
                        content: |
                          # In this file you could override any variables present in default_front.yaml file

                          # Usually you might want to override those variables :
                          # magento_backend_frontname: admin
                          # magento_admin_firstname: admin
                          # magento_admin_lastname: admin
                          # magento_admin_email: root@localhost.local
                          # magento_admin_user: admin

                          # magento_admin_password: 4Bigs3cr3t

                          # In case you want to use vault to encrypt this password use the following command to generate the ansible vault var :
                          # echo -n "4Bigs3cr3t" | ansible-vault encrypt_string --stdin-name=magento_admin_password
                          #>> magento_admin_password: !vault |
                          #>>           $ANSIBLE_VAULT;1.1;AES256
                          #>>           37363232383334316164366337366430316535636130376134323366313565356365363662653539
                          #>>           3161303331303565643831383839626263653362636466660a316530613935393464366536383839
                          #>>           30303836326138306339623431356234333239343435623333343333623938633761636132303662
                          #>>           3135343861383531660a393934316237363961663865393939313966373838653339326565353263
                          #>>           6238
                    terraform:
                      magento:
                        path: terraform/magento.tf.sample
                        destination: terraform/magento/($ environment $)/magento.tf
                        content: |
                          variable "rds_password" {
                              default = "ChangeMePls"
                          }

                          module "magento" {
                            source = "module-magento"

                            env                      = "($ environment $)"
                            vpc_id                   = "<vpc-id>"
                            private_subnets_ids      = ["private-subnets"]
                            magento_ssl_cert         = "<ssl-cert-arn>"
                            bastion_sg_allow         = "<bastion-sg>"
                            public_subnets_ids       = ["<public-subnets>"]

                            rds_password             = "${var.rds_password}"

                            # project = "magento"

                            # FIXME optimized false : should be changes with the instance type ?

                            # rds_database         = "magento"
                            # rds_disk_size        = 10
                            # rds_multiaz          = false
                            # rds_storage_type     = "gp2"
                            # rds_subnet           = "<rds-subnet-id>"
                            # rds_type             = "db.t2.small"
                            # rds_username         = "magento"
                            # rds_engine           = ""mysql"
                            # rds_engine_version   = "5.7.16"
                            # rds_backup_retention = 7
                            # rds_parameters       = ""

                            # cache_subnet                     = "cache-subnet-id"
                            # elasticache_type                 = "cache.t2.micro"
                            # elasticache_nodes                = "1
                            # elasticache_parameter_group_name = "default.redis3.2"
                            # elasticache_engine               = "redis"
                            # elasticache_port                 = "6379"
                            # front_count           = "1"
                            # front_disk_size       = "60"
                            # front_disk_type       = "gp2"
                            # front_type            = "t2.small"

                          }
                    forms:
                      pipeline:
                        group1:
                        - widget: text_area
                          default: nobucket
                          type: string
                          description: Bucket used to store magento code
                          key: magento_deploy_bucket_name
                          name: The bucket used
                        - widget: text_area
                          type: string
                          description: Doesn't matter
                          key: no-exist
                          name: Some imaginary var
                      terraform:
                        group2:
                        - widget: simple_text
                          type: array
                          description: List of public network IDs
                          key: public_subnets_ids
                          name: Pub nets
                        - widget: text_area
                          type: string
                          description: The VPC ID to run the project
                          key: vpc_id
                          name: VPC ID
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}:
    get:
      tags:
      - Service catalogs
      description: Get the information of the service catalog
      operationId: getServiceCatalog
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of the service catalog.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalog'
              example:
                data:
                  id: 1
                  name: stack-magento
                  author: Cycloid
                  canonical: stack-magento
                  image: http://via.placeholder.com/150x150
                  description: Super magento stack
                  trusted: true
                  keywords:
                  - stack
                  - php
                  status: private
                  ref: cycloidio:stack-magento
                  directory: /
                  technologies:
                  - technology: nginx
                    version: "1.15"
                  - technology: debian
                    version: "9.1"
                  - technology: magento
                    version: "2.2"
                  - technology: Php
                    version: "7.2"
                  - technology: Redis
                    version: "2.4"
                  - technology: Elasticsearch
                    version: "6.2"
                  service_catalog_source_canonical: scscan
                  created_at: 1503225026
                  updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Service catalogs
      description: Update the information of the service catalog
      operationId: updateServiceCatalog
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The information of the ServiceCatalog Terraform.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewServiceCatalog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewServiceCatalog'
        required: true
      responses:
        "200":
          description: Updated the Service Catalog
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalog'
              example:
                data:
                  id: 1
                  name: stack-magento
                  author: Cycloid
                  canonical: stack-magento
                  image: http://via.placeholder.com/150x150
                  description: Super magento stack
                  type: stack
                  trusted: true
                  keywords:
                  - stack
                  - php
                  ref: cycloidio:stack-magento
                  directory: /
                  status: private
                  technologies:
                  - technology: nginx
                    version: "1.15"
                  - technology: debian
                    version: "9.1"
                  - technology: magento
                    version: "2.2"
                  - technology: Php
                    version: "7.2"
                  - technology: Redis
                    version: "2.4"
                  - technology: Elasticsearch
                    version: "6.2"
                  created_at: 1503225026
                  updated_at: 1503335026
                  service_catalog_source_canonical: scscan
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
      - Service catalogs
      description: Delete the service catalog.
      operationId: deleteServiceCatalog
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "204":
          description: Service Catalog has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "409":
          description: Service Catalog deletion has internal conflict
          content: {}
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/template:
    post:
      tags:
      - Service catalogs
      description: |
        Create a new Service Catalog using the ref and use case passed as template
      operationId: createServiceCatalogFromTemplate
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The information of the ServiceCatalog.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewServiceCatalogFromTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewServiceCatalogFromTemplate'
        required: true
      responses:
        "200":
          description: The information of the service catalog.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalog'
              example:
                data:
                  name: bootstrap-stack
                  author: Cycloid
                  canonical: bootstrap-stack
                  service_catalog_source_canonical: scscan
                  use_case: aws-ec2
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/{use_case_canonical}/terraform:
    get:
      tags:
      - Service catalogs
      description: Get the information of the service catalog Terraform config
      operationId: getServiceCatalogTerraform
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: use_case_canonical
        in: path
        description: A use case canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The information of Terraform
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformJSONConfig'
              example:
                data:
                  config:
                    data:
                      aws_ami:
                        debian_jessie_latest:
                          most_recent: true
                    resource:
                      aws_elb:
                        front:
                          name: "${var.project}-front-${var.env}"
                          tags:
                            name: some name
                    variable:
                      front_disk_size:
                        default: 60
                    provider:
                      aws:
                        access_key: "${var.access_key}"
                    locals:
                      codecommit_repository_name: something
                    output:
                      sensitive:
                        sensitive: true
                        value: VALUE
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Service catalogs
      description: Update/Create the information of the service catalog Terraform
        config
      operationId: updateServiceCatalogTerraform
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      - name: use_case_canonical
        in: path
        description: A use case canonical
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      requestBody:
        description: The information of the ServiceCatalog Terraform.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformJSONConfig'
        required: true
      responses:
        "204":
          description: Configuration has been updated
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram:
    get:
      tags:
      - Service catalogs
      description: Get the information of the service catalog Terraform diagram
      operationId: getServiceCatalogTerraformDiagram
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The information of Terraform Diagram
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformJSONDiagram'
                  created_at:
                    minimum: 0
                    type: integer
                    format: uint64
                  updated_at:
                    minimum: 0
                    type: integer
                    format: uint64
              example:
                data:
                  random:
                    data: true
                created_at: 1503225026
                updated_at: 1503335026
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Service catalogs
      description: Update/Create the information of the service catalog Terraform
        diagram
      operationId: updateServiceCatalogTerraformDiagram
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The information of the ServiceCatalog Terraform Diagram
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformJSONDiagram'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformJSONDiagram'
        required: true
      responses:
        "204":
          description: Configuration has been updated
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram/image:
    get:
      tags:
      - Service catalogs
      description: Get the SC TF Image
      operationId: getServiceCatalogTerraformImage
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The SC TF Image
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TerraformImage'
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - Service catalogs
      description: Update/Create the Image for the SC TF Image
      operationId: updateServiceCatalogTerraformImage
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      requestBody:
        description: The information of the ServiceCatalog Terraform Diagram
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/TerraformImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TerraformImage'
        required: true
      responses:
        "204":
          description: Configuration has been updated
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/dependencies/validate:
    get:
      tags:
      - Service catalogs
      description: Validates the dependencies of a Service Catalog
      operationId: validateServiceCatalogDependencies
      parameters:
      - name: organization_canonical
        in: path
        description: A canonical of an organization.
        required: true
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: service_catalog_ref
        in: path
        description: A Service Catalog name
        required: true
        schema:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
      responses:
        "200":
          description: The result of the service catalog's dependencies validation
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCatalogDependenciesValidationResult'
              example:
                data:
                  errors:
                  - dependency 'abc' is required to deploy the stack
                  warnings:
                  - dependency 'dep' is recommended to deploy the stack
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /user/email/verification:
    post:
      tags:
      - User
      description: Re-send the verification user's email to the indicated address.
      operationId: emailVerificationResend
      requestBody:
        description: The email address to re-send the verification email. This endpoint
          doesn't return any error status code if the email doesn't exist nor it's
          already verified for avoiding that an attacker could find registered users
          email address.
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UserEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserEmail'
        required: true
      responses:
        "204":
          description: The email verification has been re-sent.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /user/email/verification/{verification_token}:
    put:
      tags:
      - User
      description: Verify that the email address is own by the user.
      operationId: emailVerification
      parameters:
      - name: verification_token
        in: path
        description: "A token for verifying emails, invitations, etc."
        required: true
        schema:
          minLength: 5
          type: string
      responses:
        "204":
          description: Email address has been verified.
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /user/email/authentication/{authentication_token}:
    put:
      tags:
      - User
      description: Verify that the email address is own by the user.
      operationId: emailAuthenticationVerification
      parameters:
      - name: authentication_token
        in: path
        description: A token for authenticating login vie email
        required: true
        schema:
          minLength: 5
          type: string
      responses:
        "200":
          description: The token which represents the session of the user.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserSession'
              example:
                data:
                  owns:
                  - organization:seraf:team:teamcan
                  permissions:
                    organization:team:create:
                      id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY0YjdiZjZlLTE1NmYtNDYxMy05NmFiLWIwMzg5NzdiMWRkMSJ9.eyJpc3MiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJzdWIiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJhdWQiOiJjdXN0b21lciIsIm5iZiI6MTUwMzQ3NDg2NywiaWF0IjoxNTAzNDc0ODY3LCJqdGkiOiJjNDU5ODgwMS04YWQzLTRhMDctODIwZC02MzRmN2RkMWQ2MDgiLCJjeWNsb2lkIjp7InVzZXIiOnsiaWQiOjEsInVzZXJuYW1lIjoidXNlci0xIiwiZ2l2ZW5fbmFtZSI6Ik1hcmlhbm8iLCJmYW1pbHlfbmFtZSI6IkppbWVuZXoiLCJwaWN0dXJlX3VybCI6Imh0dHBzOi8vYXZhdGFyczIuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTQ1NzkyMTAiLCJsb2NhbGUiOiJlbiJ9fX0.v6BuWwO6vN6PNW9d-Eqdoy7GHfUXKQ7byRbqwKRwHlA
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /user/guide:
    put:
      tags:
      - User
      description: Update user's guide progress.
      operationId: updateUserGuide
      requestBody:
        description: The guide's progress JSON schema
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UserGuide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserGuide'
        required: false
      responses:
        "204":
          description: The guide progress has been updated.
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /user/login:
    post:
      tags:
      - User
      description: Authenticate a user and return a new JWT token.
      operationId: login
      requestBody:
        description: The user content
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          description: The token which represents the session of the user.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserSession'
              example:
                data:
                  owns:
                  - organization:seraf:team:teamcan
                  permissions:
                    organization:team:create:
                      id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY0YjdiZjZlLTE1NmYtNDYxMy05NmFiLWIwMzg5NzdiMWRkMSJ9.eyJpc3MiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJzdWIiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJhdWQiOiJjdXN0b21lciIsIm5iZiI6MTUwMzQ3NDg2NywiaWF0IjoxNTAzNDc0ODY3LCJqdGkiOiJjNDU5ODgwMS04YWQzLTRhMDctODIwZC02MzRmN2RkMWQ2MDgiLCJjeWNsb2lkIjp7InVzZXIiOnsiaWQiOjEsInVzZXJuYW1lIjoidXNlci0xIiwiZ2l2ZW5fbmFtZSI6Ik1hcmlhbm8iLCJmYW1pbHlfbmFtZSI6IkppbWVuZXoiLCJwaWN0dXJlX3VybCI6Imh0dHBzOi8vYXZhdGFyczIuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTQ1NzkyMTAiLCJsb2NhbGUiOiJlbiJ9fX0.v6BuWwO6vN6PNW9d-Eqdoy7GHfUXKQ7byRbqwKRwHlA
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /user/{social_type}/oauth:
    get:
      tags:
      - User
      description: "Used to know if a user from the platform exists on that 'social_type'.\
        \ If it exists we'll return the JWT 'token', if it does not we'll return the\
        \ data of that user on the 'user' so it can be confirmed and created"
      operationId: getOAuthUser
      parameters:
      - name: social_type
        in: path
        description: The OAuth Social type
        required: true
        schema:
          type: string
          enum:
          - azuread
          - saml2
          - google
          - github
      - name: oauth_code
        in: query
        description: The OAuth code returned form the Social Provider
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Used to know if a user from the platform exists on that 'social_type'.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserOAuth'
              example:
                data:
                  user:
                    email: some@email.com
                    given_name: some name
                    username: some-name
                    picture_url: https://via.placeholder.com/150?text=cycloid.io
                    social_id: some-random-id
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
    post:
      tags:
      - User
      description: Create a user from the OAuth 'social_type'
      operationId: createOAuthUser
      parameters:
      - name: social_type
        in: path
        description: The OAuth Social type
        required: true
        schema:
          type: string
          enum:
          - azuread
          - saml2
          - google
          - github
      requestBody:
        description: The user content
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewOAuthUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewOAuthUser'
        required: true
      responses:
        "200":
          description: Create a user from the OAuth 'social_type'
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserSession'
              example:
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY0YjdiZjZlLTE1NmYtNDYxMy05NmFiLWIwMzg5NzdiMWRkMSJ9.eyJpc3MiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJzdWIiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJhdWQiOiJjdXN0b21lciIsIm5iZiI6MTUwMzQ3NDg2NywiaWF0IjoxNTAzNDc0ODY3LCJqdGkiOiJjNDU5ODgwMS04YWQzLTRhMDctODIwZC02MzRmN2RkMWQ2MDgiLCJjeWNsb2lkIjp7InVzZXIiOnsiaWQiOjEsInVzZXJuYW1lIjoidXNlci0xIiwiZ2l2ZW5fbmFtZSI6Ik1hcmlhbm8iLCJmYW1pbHlfbmFtZSI6IkppbWVuZXoiLCJwaWN0dXJlX3VybCI6Imh0dHBzOi8vYXZhdGFyczIuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTQ1NzkyMTAiLCJsb2NhbGUiOiJlbiJ9LCJvcmdhbml6YXRpb24iOnsiaWQiOjIsImNhbm9uaWNhbCI6Im9yZzIiLCJuYW1lIjoiT3JnIDIifSwicGVybWlzc2lvbnMiOnsib3JnYW5pemF0aW9uOmRlbGV0ZSI6WyIxIl0sIm9yZ2FuaXphdGlvbjp1cGRhdGUiOltdLCJvcmdhbml6YXRpb246dGVhbTpjcmVhdGUiOltdLCJvcmdhbml6YXRpb246dGVhbTpyZWFkIjpbXSwib3JnYW5pemF0aW9uOnRlYW06ZGVsZXRlIjpbIjIiXSwib3JnYW5pemF0aW9uOm1lbWJlcjpjcmVhdGUiOltdLCJvcmdhbml6YXRpb246bWVtYmVyOnJlYWQiOltdLCJvcmdhbml6YXRpb246bWVtYmVyOmRlbGV0ZSI6W10sIm9yZ2FuaXphdGlvbjpwcm9qZWN0OnJlYWQiOltdfX19.CHA3146UEHwVW6nYkDgYeSukGeZIH55mi4O0LsemenA
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /user/refresh_token:
    get:
      tags:
      - User
      description: "Refresh the user JWT and returns a new one if the previous is\
        \ valid. The 'organization_canonical_query' has to be of an organization in\
        \ which the user belongs to, and the 'child_canonical_query' of a child of\
        \ the 'organization_canonical_query' in any level (could be of a grand child)."
      operationId: refreshToken
      parameters:
      - name: organization_canonical
        in: query
        description: A canonical of a organization used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      - name: child_canonical
        in: query
        description: A canonical of a child organization used for filtering.
        schema:
          $ref: '#/components/schemas/Canonical'
      responses:
        "200":
          description: The token which represents the session of the user.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserSession'
              example:
                data:
                  owns:
                  - organization:seraf:team:teamcan
                  permissions:
                    organization:team:create:
                      id: 21
                      effect: allow
                      action: organization:team:read
                      resources:
                      - organization:org-can:team:team-can
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY0YjdiZjZlLTE1NmYtNDYxMy05NmFiLWIwMzg5NzdiMWRkMSJ9.eyJpc3MiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJzdWIiOiJodHRwczovL2N5Y2xvaWQuaW8iLCJhdWQiOiJjdXN0b21lciIsIm5iZiI6MTUwMzQ3NDg2NywiaWF0IjoxNTAzNDc0ODY3LCJqdGkiOiJjNDU5ODgwMS04YWQzLTRhMDctODIwZC02MzRmN2RkMWQ2MDgiLCJjeWNsb2lkIjp7InVzZXIiOnsiaWQiOjEsInVzZXJuYW1lIjoidXNlci0xIiwiZ2l2ZW5fbmFtZSI6Ik1hcmlhbm8iLCJmYW1pbHlfbmFtZSI6IkppbWVuZXoiLCJwaWN0dXJlX3VybCI6Imh0dHBzOi8vYXZhdGFyczIuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTQ1NzkyMTAiLCJsb2NhbGUiOiJlbiJ9LCJvcmdhbml6YXRpb24iOnsiaWQiOjIsImNhbm9uaWNhbCI6Im9yZzIiLCJuYW1lIjoiT3JnIDIifSwicGVybWlzc2lvbnMiOnsib3JnYW5pemF0aW9uOmRlbGV0ZSI6WyIxIl0sIm9yZ2FuaXphdGlvbjp1cGRhdGUiOltdLCJvcmdhbml6YXRpb246dGVhbTpjcmVhdGUiOltdLCJvcmdhbml6YXRpb246dGVhbTpyZWFkIjpbXSwib3JnYW5pemF0aW9uOnRlYW06ZGVsZXRlIjpbIjIiXSwib3JnYW5pemF0aW9uOm1lbWJlcjpjcmVhdGUiOltdLCJvcmdhbml6YXRpb246bWVtYmVyOnJlYWQiOltdLCJvcmdhbml6YXRpb246bWVtYmVyOmRlbGV0ZSI6W10sIm9yZ2FuaXphdGlvbjpwcm9qZWN0OnJlYWQiOltdfX19.CHA3146UEHwVW6nYkDgYeSukGeZIH55mi4O0LsemenA
        "401":
          description: The user cannot be authenticated with the credentials which
            she/he has used.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: Unauthenticated
                  message: invalid credentials
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /user/reset_password:
    put:
      tags:
      - User
      description: "Reset the user password when it has been forgotten. Due to security\
        \ reasons, the endpoint doesn't return a Unprocessable Entity (422) when the\
        \ token is invalid. 404 Status code is returned if the user has been deleted\
        \ of the system between the user password request and this request."
      operationId: passwordResetUpdate
      requestBody:
        description: The reset password payload
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPasswordResetUpdate'
        required: true
      responses:
        "204":
          description: The password has been changed.
          content: {}
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Entity not found
                  code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
    post:
      tags:
      - User
      description: "Request to reset the password. Due to security reasons, this endpoint\
        \ doesn't return Not Found (404) when the email doesn't exist or belongs to\
        \ a user primary email."
      operationId: passwordResetReq
      requestBody:
        description: The reset password payload
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPasswordResetReq'
        required: true
      responses:
        "204":
          description: The password has been changed.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /user:
    get:
      tags:
      - User
      description: Get the information of the account of the authenticated user.
      operationId: getUserAccount
      responses:
        "200":
          description: The user account information.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserAccount'
              example:
                data:
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_login: 1503413020
                  emails:
                  - email: mariano@jimenez.com
                    verified: true
                    purpose: primary
                  username: user-1
                  given_name: Mariano
                  family_name: Jimenez
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  locale: en
                  country:
                    code: GB
                    name: United Kingdom
                  guide:
                    tutorial:
                      welcome: false
                      letsgo: false
                      credentials: false
                      createProject: false
                      selectStack: false
                      configEnv: false
                      customEnvConfig: false
                      reviewDeploy: false
                      deployed: false
                      tasksDetails: false
                      finish: false
                    presentation: false
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
    put:
      tags:
      - User
      description: Update the information of the account of the authenticated user.
      operationId: updateUserAccount
      requestBody:
        description: The user content
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateUserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateUserAccount'
        required: true
      responses:
        "200":
          description: The updated user profile information.
          content:
            application/json:
              schema:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserAccount'
              example:
                data:
                  created_at: 1503225026
                  updated_at: 1503335026
                  last_login: 1503413020
                  emails:
                  - email: mariano@jimenez.com
                    verified: true
                    purpose: primary
                  username: user-1
                  given_name: Mariano
                  family_name: Jimenez
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  locale: en
                  country_code: UK
        "409":
          description: Trying setting an unverified email as the primary
          content: {}
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        "503":
          description: The operation couldn't be executed or completed and it should
            retried.
          headers:
            Retry-After:
              description: The number of seconds to wait until retry the request
              schema:
                type: integer
                format: uint16
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - code: RetryOperation
                  message: Operation must be retried.
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      x-codegen-request-body-name: body
    post:
      tags:
      - User
      description: Create a new User (sign-up).
      operationId: signUp
      requestBody:
        description: The user content
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewUserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewUserAccount'
        required: true
      responses:
        "204":
          description: Account created. The account MUST be verified through the link
            sent to the email address.
          content: {}
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - User
      description: The authenticated user delete itself from the system.
      operationId: deleteUserAccount
      responses:
        "204":
          description: User account has been deleted.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Not enough permissions to perform the operation
                  code: Unauthorized
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
  /user/aws_marketplace/entitlement:
    post:
      tags:
      - User
      description: |
        This endpoint handles redirections from AWS Marketplace to our system.
        If user doesn't exist, he'll be redirected to registration page.
        If user exist, he'll be redirected to login page.
      operationId: handleAWSMarketplaceUserEntitlement
      responses:
        "301":
          description: The user is redirected based on his account state.
          headers:
            Location:
              schema:
                type: string
          content: {}
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
  /user/aws_marketplace:
    post:
      tags:
      - User
      description: Create a new AWS Marketplace User.
      operationId: signUpAWSMarketplace
      requestBody:
        description: The user content
        content:
          application/vnd.cycloid.io.v1+json:
            schema:
              $ref: '#/components/schemas/NewAWSMarketplaceUserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewAWSMarketplaceUserAccount'
        required: true
      responses:
        "204":
          description: Account created. The account MUST be verified through the link
            sent to the email address.
          content: {}
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: some error
                  code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
              example:
                errors:
                - message: Server Internal error
                  code: Unexpected
      security: []
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/members:
    get:
      tags:
        - Organization members
      description: Get the members of an organization.
      operationId: getOrgMembers
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
        - name: page_index
          in: query
          description: The page number to request. The first page is 1.
          schema:
            type: integer
            format: uint32
            default: 1
        - name: page_size
          in: query
          description: The number of items at most which the response can have.
          schema:
            type: integer
            format: uint32
            default: 1000
        - name: invitation_state
          in: query
          description: Search by Invitation's state
          schema:
            type: string
            enum:
              - accepted
              - pending
              - declined
        - name: user_given_name
          in: query
          description: Search by the user's given name
          schema:
            type: string
        - name: user_family_name
          in: query
          description: Search by the user's family name
          schema:
            type: string
        - name: role_name
          in: query
          description: Search by the role's name
          schema:
            type: string
        - name: user_canonical
          in: query
          description: Search by the user canonical
          schema:
            type: string
        - name: user_created_at
          in: query
          description: Search by user creation date
          schema:
            type: integer
            format: uint64
        - name: member_created_at
          in: query
          description: Search by member joining date
          schema:
            type: integer
            format: uint64
        - name: order_by
          in: query
          description: |
            Allows to order the list of items. Example usage: field_name:asc
          schema:
            type: string
      responses:
        "200":
          description: List of the members of the organization.
          content:
            '*/*':
              schema:
                required:
                  - data
                  - pagination
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberOrg'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
            application/json:
              example:
                data:
                  - username: user-1
                    id: 1
                    given_name: Mariano
                    family_name: Jimenez
                    invitation_email: jordi.capdevila@fakeemail.com
                    email: mariano.jimenez@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503225026
                    invitation_state: accepted
                    last_login_at: 1503225576
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                        - id: 1
                          effect: allow
                          action: organization:delete
                          resources:
                            - organization:org-can
                            - organization:org-can2
                        - id: 20
                          effect: allow
                          action: organization:team:create
                          resources: []
                        - id: 21
                          effect: allow
                          action: organization:team:read
                          resources:
                            - organization:org-can:team:team-can
                  - username: user2
                    id: 1
                    given_name: Jordi
                    family_name: Capdevila
                    invitation_email: jordi.capdevila@fakeemail.com
                    email: jordi.capdevila@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1503281026
                    last_login_at: 1503225576
                    invitation_state: accepted
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                        - id: 1
                          effect: allow
                          action: organization:delete
                          resources:
                            - organization:org-can
                            - organization:org-can2
                        - id: 20
                          effect: allow
                          action: organization:team:create
                          resources: []
                        - id: 21
                          effect: allow
                          action: organization:team:read
                          resources:
                            - organization:org-can:team:team-can
                  - username: user-3
                    id: 1
                    given_name: Ivan
                    family_name: Drago
                    invitation_email: jordi.capdevila@fakeemail.com
                    email: ivan.drago@fakeemail.com
                    picture_url: https://avatars2.githubusercontent.com/u/14579210
                    created_at: 1502225026
                    last_login_at: 1503225576
                    invitation_state: accepted
                    role:
                      id: 17
                      name: existing
                      description: Organization existing role
                      canonical: role-can
                      rules:
                        - id: 1
                          effect: allow
                          action: organization:delete
                          resources:
                            - organization:org-can
                            - organization:org-can2
                        - id: 20
                          effect: allow
                          action: organization:team:create
                          resources: []
                        - id: 21
                          effect: allow
                          action: organization:team:read
                          resources:
                            - organization:org-can:team:team-can
                pagination:
                  index: 1
                  size: 10
                  total: 3
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Not enough permissions to perform the operation
                    code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: some error
                    code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
    post:
      tags:
        - Organization members
      description: Invite a user to be a member of the organization.
      operationId: inviteUserToOrgMember
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
      requestBody:
        description: The user's member invitation.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewMemberInvitation'
        required: true
      responses:
        "200":
          description: The information of the member of the organization.
          content:
            '*/*':
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberOrg'
            application/json:
              example:
                data:
                  id: 1
                  username: user2
                  given_name: Jordi
                  family_name: Capdevila
                  invitation_email: jordi.capdevila@fakeemail.com
                  email: jordi.capdevila@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503281026
                  invitation_state: accepted
                  role:
                    id: 2
                    name: project manager
                    description: A project manager
                    policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 22
                        code: team:edit
                        entities: []
                        description: Grant the access to edit teams
                      - id: 60
                        code: project:read
                        entities: []
                        description: Grant the access to projects
                      - id: 61
                        code: project:create
                        entities: []
                        description: Grant the access to create a project in the organization
                      - id: 62
                        code: project:edit
                        entities: []
                        description: Grant the access to edit projects
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        "411":
          description: The request has a body but it doesn't have a Content-Length
            header.
          content: {}
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: some error
                    code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
      x-codegen-request-body-name: body
  /organizations/{organization_canonical}/members/{member_id}:
    get:
      tags:
        - Organization members
      description: Get the information of a member of the organization.
      operationId: getOrgMember
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
        - name: member_id
          in: path
          description: A member id
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: The information of the member of the organization.
          content:
            '*/*':
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberOrg'
            application/json:
              example:
                data:
                  id: 1
                  username: user2
                  given_name: Jordi
                  family_name: Capdevila
                  invitation_email: jordi.capdevila@fakeemail.com
                  email: jordi.capdevila@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503281026
                  invitation_state: accepted
                  role:
                    id: 2
                    name: project manager
                    description: A project manager
                    policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 22
                        code: team:edit
                        entities: []
                        description: Grant the access to edit teams
                      - id: 60
                        code: project:read
                        entities: []
                        description: Grant the access to projects
                      - id: 61
                        code: project:create
                        entities: []
                        description: Grant the access to create a project in the organization
                      - id: 62
                        code: project:edit
                        entities: []
                        description: Grant the access to edit projects
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Not enough permissions to perform the operation
                    code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
    put:
      tags:
        - Organization members
      description: Update member of the organization.
      operationId: updateOrgMember
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
        - name: member_id
          in: path
          description: A member id
          required: true
          schema:
            type: integer
            format: uint32
      requestBody:
        description: The member information to be updated.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MemberAssignation'
        required: true
      responses:
        "200":
          description: The information of the member of the organization.
          content:
            '*/*':
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberOrg'
            application/json:
              example:
                data:
                  id: 1
                  username: user2
                  given_name: Jordi
                  family_name: Capdevila
                  invitation_email: jordi.capdevila@fakeemail.com
                  email: jordi.capdevila@fakeemail.com
                  picture_url: https://avatars2.githubusercontent.com/u/14579210
                  created_at: 1503281026
                  invitation_state: accepted
                  role:
                    id: 2
                    name: project manager
                    description: A project manager
                    policies:
                      - id: 21
                        code: team:read
                        entities: []
                        description: Grant the access to read the teams of an organization
                      - id: 22
                        code: team:edit
                        entities: []
                        description: Grant the access to edit teams
                      - id: 60
                        code: project:read
                        entities: []
                        description: Grant the access to projects
                      - id: 61
                        code: project:create
                        entities: []
                        description: Grant the access to create a project in the organization
                      - id: 62
                        code: project:edit
                        entities: []
                        description: Grant the access to edit projects
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Not enough permissions to perform the operation
                    code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        "422":
          description: All the custom errors that are generated from the Cycloid API
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: some error
                    code: SomeCode
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
      x-codegen-request-body-name: body
    delete:
      tags:
        - Organization members
      description: Remove a member of the organization.
      operationId: removeOrgMember
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
        - name: member_id
          in: path
          description: A member id
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "204":
          description: Member has been removed.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Not enough permissions to perform the operation
                    code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
  /organizations/{organization_canonical}/members/{member_id}/resend:
    put:
      tags:
        - Organization members
      description: Resend the email containing the verification token to accept the
        member Invitation.
      operationId: resendMemberInvitation
      parameters:
        - name: organization_canonical
          in: path
          description: A canonical of an organization.
          required: true
          schema:
            maxLength: 100
            minLength: 3
            pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
            type: string
        - name: member_id
          in: path
          description: A member id
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "204":
          description: The member Invitation has been resent.
          content: {}
        "403":
          description: "The authenticated user cannot perform the operation because,\
            \ it doesn't have permissions for such operation."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Not enough permissions to perform the operation
                    code: Unauthorized
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
      security: []
  /members/verify/{verification_token}:
    get:
      tags:
        - Organization members
      description: Get the email address used for the pending member invitation
      operationId: getPendingMemberInvitation
      parameters:
        - name: verification_token
          in: path
          description: "A token for verifying emails, invitations, etc."
          required: true
          schema:
            minLength: 5
            type: string
      responses:
        "200":
          description: The email address used for the pending member invitation
          content:
            '*/*':
              schema:
                required:
                  - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PendingMemberInvitation'
            application/json:
              example:
                data:
                  email: user@user.com
        "404":
          description: The response sent when any of the entities present in the path
            is not found.
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Entity not found
                    code: NotFoundEntity
        default:
          description: "The response sent when an unexpected error happened, as known\
            \ as an internal server error."
          headers:
            Content-Length:
              description: The length of the response body in octets (8-bit bytes).
              schema:
                type: integer
                format: uint64
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
            application/json:
              example:
                errors:
                  - message: Server Internal error
                    code: Unexpected
      security: []
components:
  schemas:
    PendingMemberInvitation:
      title: PendingMemberInvitation
      description: Contains the email used for the member invitation
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    TerraformProviderCycloid:
      title: TerraformProviderCycloid
      required:
        - url
        - jwt
        - organization_canonical
      properties:
        url:
          type: string
        jwt:
          type: string
        organization_canonical:
          type: string
    AppVersion:
      title: AppVersion
      required:
      - branch
      - revision
      - version
      type: object
      properties:
        version:
          minLength: 5
          type: string
          description: The version of the application.
        branch:
          minLength: 1
          type: string
          description: The Git branch used to build the application.
        revision:
          maxLength: 40
          minLength: 8
          type: string
          description: The Git revision used to build the application.
    GeneralStatus:
      title: GeneralStatus
      required:
      - checks
      - message
      - status
      type: object
      properties:
        status:
          type: string
          description: The overall status for the application.
          enum:
          - Unknown
          - Success
          - Error
        message:
          minLength: 1
          type: string
          description: Message providing information regarding the status.
        checks:
          type: array
          description: List of all checks report type/name/status.
          items:
            $ref: '#/components/schemas/CheckReport'
    CheckReport:
      title: CheckReport
      required:
      - canonical
      - category
      - message
      - status
      type: object
      properties:
        canonical:
          minLength: 1
          type: string
          description: The name of the service checked.
        category:
          minLength: 1
          type: string
          description: The category of the service checked.
        status:
          type: string
          description: The status of the service checked.
          enum:
          - Unknown
          - Success
          - Error
        message:
          minLength: 1
          type: string
          description: The message providing information regarding the state of the
            service.
    AppConfig:
      title: AppConfig
      required:
      - authentication
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/AuthConfig'
      description: Global app configuration that includes all the settings and capabilities
        of the Cycloid instance. It is intended to be used by clients to modify the
        UI accordingly.
    AuthConfig:
      title: AuthConfig
      required:
      - local
      - oauth
      - saml2
      type: object
      properties:
        local:
          $ref: '#/components/schemas/AuthConfigLocalAuth'
        oauth:
          type: array
          description: List of OAuth providers.
          items:
            $ref: '#/components/schemas/AuthConfigOAuth'
        saml2:
          type: array
          description: List of SAML2 providers.
          items:
            $ref: '#/components/schemas/AuthConfigSAML'
    AuthConfigLocalAuth:
      title: AppConfigLocalAuth
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether local authentication is enabled
    AuthConfigOAuth:
      title: AppConfigAuthOAuth
      required:
      - client_id
      - provider
      - type
      type: object
      properties:
        provider:
          type: string
          description: Name of the OAuth identity provider.
        client_id:
          type: string
          description: ID of the OAuth client.
        type:
          type: string
          description: Type is used as discriminator for different OAuth identity
            provider definitions.
      discriminator:
        propertyName: type
    AzureADAuthConfig:
      title: AppConfigAzureADOAuth
      description: AzureAD OAuth configuration
      allOf:
      - $ref: '#/components/schemas/AuthConfigOAuth'
      - required:
        - tenant_id
        type: object
        properties:
          tenant_id:
            type: string
            description: ID of the OAuth tenant.
    GoogleOAuthConfig:
      title: AppConfigGoogleOAuth
      description: Google OAuth configuration
      allOf:
      - $ref: '#/components/schemas/AuthConfigOAuth'
    GitHubOAuthConfig:
      title: AppConfigGitHubOAuth
      description: GitHub OAuth configuration.
      allOf:
      - $ref: '#/components/schemas/AuthConfigOAuth'
      - required:
        - host_address
        type: object
        properties:
          host_address:
            type: string
            description: |
              GitHub host address is used to determine where the request for the token should be sent.
              In most cases this address will be https://api.github.com`, but it could be different
              for onprem clients that use GitHub Enterprise.
    AuthConfigSAML:
      title: AppConfigSAML
      required:
      - provider
      - sso_url
      type: object
      properties:
        provider:
          type: string
          description: Entity ID of the SAML2 identity provider.
        sso_url:
          type: string
          description: SSO URL to which the user should be redirected in order to
            authenticate with the Identity Provider.
          format: uri
    Pagination:
      title: Pagination
      required:
      - index
      - size
      - total
      type: object
      properties:
        total:
          minimum: 0
          type: integer
          description: The total number of items.
          format: uint64
        index:
          minimum: 1
          type: integer
          description: The index of the page sent (the first page is 1).
          format: uint64
        size:
          minimum: 0
          type: integer
          description: The size of the page (the number of entities per page)
          format: uint64
    PaginationConcourse:
      title: PaginationConcourse
      required:
      - next
      - previous
      type: object
      properties:
        next:
          $ref: '#/components/schemas/PageConcourse'
        previous:
          $ref: '#/components/schemas/PageConcourse'
    PageConcourse:
      title: PageConcourse
      required:
      - limit
      - since
      - until
      type: object
      properties:
        since:
          type: integer
          description: Entities returned should have a higher timestamp than this
            one
          format: uint64
        until:
          type: integer
          description: Entities returned should have a lower timestamp than this one
          format: uint64
        limit:
          type: integer
          description: The maximum number of entities to return
          format: uint64
    PaginationAWS:
      title: AWS Pagination
      required:
      - next
      type: object
      properties:
        next:
          type: string
          description: The token to retrieve the next page of results. Empty string
            when there isn't a next page.
    Filters:
      title: Filters
      type: object
      description: Filters is the possible values the filters can have on list requests
    Organization:
      title: Organization
      required:
      - blocked
      - can_children_create_appearance
      - can_create_appearance
      - canonical
      - ci_port
      - ci_team_name
      - ci_url
      - created_at
      - has_children
      - id
      - mfa_enabled
      - name
      - quotas
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        ci_team_name:
          type: string
        ci_url:
          type: string
        ci_port:
          type: string
        name:
          minLength: 3
          type: string
        blocked:
          type: array
          items:
            type: string
        has_children:
          type: boolean
        quotas:
          type: boolean
        can_create_appearance:
          type: boolean
        can_children_create_appearance:
          type: boolean
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        #admins:
          #type: array
          #items:
            #$ref: '#/components/schemas/MemberOrg'
        subscription:
          $ref: '#/components/schemas/Subscription'
        appearance:
          $ref: '#/components/schemas/Appearance'
        mfa_enabled:
          type: boolean
      description: The entity which holds all the direct information attached to an
        organization.
    NewOrganization:
      title: Create Organization
      required:
      - name
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
      description: The entity which represents a new organization to create in the
        application.
    UpdateOrganization:
      title: Update Organization
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        quotas:
          type: boolean
        can_children_create_appearance:
          type: boolean
        mfa_enabled:
          type: boolean
      description: The entity which represents the information of an organization
        to be updated.
    Team:
      title: Team
      required:
      - canonical
      - created_at
      - id
      - member_count
      - members_preview
      - name
      - roles
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        roles:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Role'
        member_count:
          type: integer
          description: The total count of members of the team.
          format: uint32
        members_preview:
          maxItems: 6
          type: array
          description: "Preview of the list of team members, limited to 6 members."
          items:
            $ref: '#/components/schemas/MemberTeam'
      description: The entity which represents the information of a team.
    SimpleTeam:
      title: SimpleTeam
      required:
      - canonical
      - created_at
      - id
      - name
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: The entity which represents the information of a team a bit simplified.
    NewTeam:
      title: Create Team
      required:
      - name
      - roles_canonical
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        owner:
          type: string
          description: |
            User canonical that owns this team. If omitted then the person
            creating this team will be assigned as owner. When a user is the
            owner of a team it has all the permissions on it.
        roles_canonical:
          type: array
          description: The roles to be assigned to a team.
          items:
            $ref: '#/components/schemas/Canonical'
      description: The entity which represents the information of a new team.
    UpdateTeam:
      title: Update Team
      required:
      - canonical
      - name
      - roles_canonical
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        owner:
          type: string
          description: |
            User canonical that owns this team. Only the owner or an
            organization admin can update this field. When a user is the owner
            of a team it has all the permission on it.
        roles_canonical:
          type: array
          description: The roles to be re-assigned to a team.
          items:
            $ref: '#/components/schemas/Canonical'
      description: The entity which represents the information of the team to be updated.
    Project:
      title: Project
      required:
      - canonical
      - created_at
      - environments
      - id
      - name
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 1
          type: string
        description:
          $ref: '#/components/schemas/Description'
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        service_catalog:
          $ref: '#/components/schemas/ServiceCatalog'
        team:
          $ref: '#/components/schemas/SimpleTeam'
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        config_repository_canonical:
          $ref: '#/components/schemas/Canonical'
        import_status:
          type: string
          description: The import process status.
          enum:
          - succeeded
          - failed
          - importing
        favorite:
          type: boolean
      description: The entity which represents the information of a project.
    NewProject:
      title: Create Project
      required:
      - config_repository_canonical
      - name
      - pipelines
      - service_catalog_ref
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 1
          type: string
        service_catalog_ref:
          type: string
          description: "It's the ref of the Service Catalog, like 'cycloidio:stack-magento'"
        description:
          $ref: '#/components/schemas/Description'
          description: |
            A description regarding the project to help identify/remember details,
            implementation, purpose, etc.
        owner:
          type: string
          description: |
            User canonical that owns this project. If omitted then the person
            creating this project will be assigned as owner. When a user is the
            owner of a project it has all the permissions on it.
        pipelines:
          minItems: 1
          type: array
          description: |
            Each instance should include passed_config if no inputs are sent on
            project creation, otherwise it will be inferred internally.
          items:
            $ref: '#/components/schemas/NewPipeline'
        config_repository_canonical:
          $ref: '#/components/schemas/Canonical'
        team_canonical:
          $ref: '#/components/schemas/Canonical'
        inputs:
          type: array
          description: |
            The variables set within a form with the corresponding environment
            canonical and use case
          items:
            $ref: '#/components/schemas/FormInput'
      description: The entity which represents the information of a new project.
    UpdateProject:
      title: Update Project
      required:
      - name
      - service_catalog_ref
      - updated_at
      type: object
      properties:
        name:
          minLength: 1
          type: string
        description:
          $ref: '#/components/schemas/Description'
        environments:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/NewEnvironment'
        service_catalog_ref:
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
          description: "It's the ref of the Service Catalog, like 'cycloidio:stack-magento'"
        owner:
          type: string
          description: |
            User canonical that owns this project. Only the owner or an
            organization admin can update such a field. When a user is the owner
            of a project it has all the permission on it.
        cloud_provider:
          type: string
          description: |
            The cloud provider canonical that this project is using - between the
            supported ones.
          enum:
          - aws
          - google
          - azurerm
          - flexibleengine
          - openstack
        config_repository_canonical:
          $ref: '#/components/schemas/Canonical'
        inputs:
          type: array
          description: |
            The variables set within a form with the corresponding environment
            canonical and use case
          items:
            $ref: '#/components/schemas/FormInput'
        updated_at:
          minimum: 0
          type: integer
          description: "This will be used to assert that the Project is in it's last\
            \ updated form\nbecause if not we could have inconsistencies with the\
            \ environments. The \nformat is in seconds, basically UNIX format.\n"
          format: uint64
      description: The entity which represents the information of the project to be
        updated.
    ProjectEnvironmentConfig:
      title: Project Environment Config
      required:
      - forms
      - use_case
      type: object
      properties:
        use_case:
          type: string
          description: The use case picked for that environment
        resource_pool_canonical:
          type: string
          description: "The resource pool canonical, only require when using Quotas"
        forms:
          $ref: '#/components/schemas/FormsFileV2'
      description: |
        Representation of project's environment configuration done via the forms.
        The full forms file is returned, but the use case picked has the
        Set variables matching the current configuration - if any.
    FormsValidation:
      title: Forms validation
      required:
      - form_file
      type: object
      properties:
        form_file:
          type: object
          properties: {}
          description: A form's file to any given version
      description: Validates a given Form's file
    FormsValidationResult:
      title: FormsValidationResult
      required:
      - errors
      - forms
      type: object
      properties:
        forms:
          $ref: '#/components/schemas/FormsFileV2'
        errors:
          type: array
          items:
            type: string
      description: "The result of the validation, if errors is empty means that is\
        \ correct"
    FormsFileV2:
      title: Forms File V2
      required:
      - use_cases
      - version
      type: object
      properties:
        version:
          type: string
        use_cases:
          type: array
          items:
            $ref: '#/components/schemas/FormUseCase'
      description: ""
    FormUseCase:
      title: Forms File Use case
      required:
      - name
      - sections
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        sections:
          type: array
          items:
            $ref: '#/components/schemas/FormSection'
      description: ""
    FormSection:
      title: Forms File Section
      required:
      - groups
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FormGroup'
      description: ""
    FormGroup:
      title: Forms File Group
      required:
      - name
      - technologies
      - vars
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        technologies:
          type: array
          items:
            type: string
        condition:
          type: string
          description: Condition required to be respected to be able to configure
            that group.
        folded:
          type: boolean
          description: "Whether or not the group should be displayed to the user.\
            \ Variables within this group must be usable as such (not required, or\
            \ with a default if required)"
        vars:
          type: array
          items:
            $ref: '#/components/schemas/FormEntity'
      description: ""
    FormEntity:
      title: Forms file's Entity
      required:
      - key
      - name
      - type
      - widget
      type: object
      properties:
        key:
          type: string
          description: "The key is the name of variables for the ansible/pipeline/terraform\
            \ technologies. If this is a first level variable then: keyX. If you have\
            \ multiple terraform modules then use: module.Y.keyX to help identify\
            \ the unique variable."
        name:
          $ref: '#/components/schemas/Name'
        widget:
          type: string
          description: The widget used to display the data in the most suitable way
          enum:
          - auto_complete
          - dropdown
          - radios
          - slider_list
          - slider_range
          - number
          - simple_text
          - switch
          - text_area
          - cy_cred
          - cy_scs
          - cy_crs
          - cy_branch
          - cy_inventory_resource
          - hidden
        widget_config:
          type: object
          properties: {}
          description: |-
            Some specific configuration that could be applied to that widget. Currently only a few widgets can be configured:
              * cy_cred
                * 'cred_types' (list): reduce the types of credentials retrieved to that list. See supported types of credentials
                * 'display_keys' (bool): to specify if the path + key have to be written or only the path
              * radio
                * 'orientation' (string): whether you want to display it in an 'horizontal' or 'vertical' way
              * cy_inventory_resource
                * 'provider' (string): The provider like '"provider[\"registry.terraform.io/hashicorp/aws\"]"'
                * 'type'  (string): The type of the resource like 'aws_vpc'
                * 'name' (string): The name of the resource like 'front'
                * 'module' (string): The module name like 'module.lemp'
                * 'label' (string): The label of the resource, this only applies for resources created directly from the API/FE
                * 'attributes' (string): The query string to filter the attributes like 'ingress[0].protocol[eq]=tcp'
                * 'custom_attributes' (string): The query string to filter the custom_attributes like 'ingress[0].protocol[eq]=tcp'
                * 'attribute' (string): The path to the attribute to actually use as value
        type:
          type: string
          description: "The type of data handled - used to manipulate/validate the\
            \ input, and also validate default/values"
          enum:
          - integer
          - float
          - string
          - array
          - boolean
          - map
        required:
          type: boolean
          description: Whether or not the field is required - that helps distinguish
            "optional" variables and allows to set default if necessary and present
        folded:
          type: boolean
          description: "Whether or not the entity should be displayed to the user.\
            \ This entity must be usable as such (not required, or with a default\
            \ if required)"
        default:
          type: object
          properties: {}
          description: |-
            Default can take 2 kinds of definition.
            The first one is simply the variable to assign if nothing is given by the user and that the variable is required.
            The second one is dynamic default, meaning default that can vary based on conditions. The format is as follows:
              options:
                - name: "Name of set (can be omitted)"
                  condition: "$env == 'dev'"
                  default: t2.micro
                - condition: "$env == 'prod'"
                  default: t2.large
        current:
          type: object
          properties: {}
          description: "The current value that was previously configured for this\
            \ variable upon creation or update. In case of shared variables having\
            \ different values, it will be empty, and 'mismatch_values' will be filled\
            \ instead."
        mismatch_values:
          type: array
          description: "This is filled only when a shared variable does not have the\
            \ same values anymore. e.g. a variable 'foo' was shared between 'ansible'\
            \ and 'pipeline', was set to 'bar', but now the value found for 'ansible'\
            \ is 'bus', while it's still 'bar' for the pipeline. In such situation,\
            \ the Forms don't know anymore which is the correct data and will return\
            \ both, while unsetting the 'Current' field."
          items:
            type: object
            properties: {}
        unit:
          type: string
          description: "The unit to be displayed for the variable, helping to know\
            \ what's being manipulated: amount of servers, Go, users, etc."
        description:
          $ref: '#/components/schemas/Description'
        values:
          type: object
          properties: {}
          description: |-
            Values can take 2 kinds of definition.
            First one is a list of object, such as list of integer, maps, etc. Values allowed, e.g. [1, 10, 20, 50]. Note: In case of SliderRange only 2 values should be provided: [min, max], in case of providing them the other way around some validation test will fail.
            Second one is dynamic values, meaning values that can vary based on conditions. The format is as follows:
              options:
                - name: "Name of set (can be omitted)"
                  condition: "$env == 'dev'"
                  values: [dev-ami1, dev-ami2, dev-ami3]
                - condition: "$env == 'prod'"
                  values: [prod-ami1, prod-ami2, prod-ami3]
        source:
          type: string
          description: "The source is only used for the branch widget to reference\
            \ the key of the SCS or CR that the branches have to be read from. Because\
            \ a branch in itself cannot exist, the user has to indicate from which\
            \ SCS or CR he wants to retrieve branches. The source has to reference\
            \ the key of an entity of a widget: 'CyCRS' or 'CySCS'"
        validations:
          type: array
          description: "An array of validations and relative errors for this entitiy.\
            \  For example:\n  validations: \n    - regexp: \"^proj_.*$\" \n     \
            \ error_message: \"the value must have 'proj_' as prefix\"\n    - regexp:\
            \ \"^.*_awesome$\" \n      error_message: \"the value must have '_awesome'\
            \ as suffix\"\nAt the moment only regexp validations are implemented but\
            \  we can expect objects with a 'type', and 'error_message' field. The\
            \ type field can hold the constraint, as in the case of regexp or  hipotetically\
            \ a moe complex object."
          items:
            type: object
            properties: {}
      description: This describes all the attributes possible to configure a form's
        variable
    FormInputs:
      title: Forms inputs
      required:
      - inputs
      - service_catalog_ref
      type: object
      properties:
        service_catalog_ref:
          type: string
          description: |
            It's the ref of the Service Catalog, like 'cycloidio:stack-magento'
        inputs:
          type: array
          description: |
            The variables set within a form with the corresponding environment
            canonical and use case
          items:
            $ref: '#/components/schemas/FormInput'
      description: |
        The array of variables set by the user via the forms with the associated environment
        canonical and use case upon project creation.
    FormInput:
      title: Forms input
      required:
      - environment_canonical
      - use_case
      - vars
      type: object
      properties:
        use_case:
          type: string
          description: The use case to load
        environment_canonical:
          type: string
          description: The environment canonical
        resource_pool_canonical:
          type: string
          description: "The resource pool canonical, only require when using Quotas"
        vars:
          type: object
          properties: {}
          description: |
            Forms variables filled, the format to respect is as follows
            {
              "sectionX": {
                "group1": {
                  "key1": "value1",
                  "key2": "value2",
                  "key3": "value3"
                },
              },
              "sectionY": {
                "group2": {
                  "key1": "value1",
                  "key2": "value2",
                  "key3": "value3"
                },
              },
              "sectionZ": {
                "group3": {
                  "key1": "value2"
                },
              }
            }
            Keys being the variable name that you want to see substituted/defined,
            while the section and group are the one from the form's file.
      description: |
        The variables set within a form with the corresponding
        environment canonical and use case
    UserAccountEmail:
      title: User's email
      required:
      - email
      - purpose
      - verified
      type: object
      properties:
        email:
          type: string
          format: email
        verified:
          type: boolean
        purpose:
          type: string
          description: This values are set by the application to indicate the purpose
            of the email address. At least there is always one which is the primary.
        created_at:
          $ref: '#/components/schemas/CreatedAt'
      description: The email address of a user.
    UpdateUserAccountEmail:
      title: User's email
      required:
      - email
      - purpose
      type: object
      properties:
        email:
          type: string
          format: email
        purpose:
          type: string
          description: This values are set by the application to indicate the purpose
            of the email address. At least there is always one which is the primary.
      description: The email address of a user to be updated.
    UserAccount:
      title: User's account
      required:
      - created_at
      - emails
      - family_name
      - given_name
      - last_login
      - locale
      - mfa_enabled
      - updated_at
      - username
      type: object
      properties:
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        last_login:
          minimum: 0
          type: integer
          format: uint64
        emails:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/UserAccountEmail'
        username:
          $ref: '#/components/schemas/Canonical'
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        picture_url:
          type: string
          format: uri
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
        country:
          $ref: '#/components/schemas/Country'
        guide:
          $ref: '#/components/schemas/UserGuide'
        mfa_enabled:
          type: boolean
      description: The user's account contains information related with the authenticated
        user.
    NewUserAccount:
      title: Sign up
      required:
      - email
      - family_name
      - given_name
      - password
      - username
      type: object
      properties:
        invitation_token:
          minLength: 5
          type: string
          description: "The field is used when a user signup from an invitation to\
            \ an organization. Giving the token, the created user will be automatically\
            \ added to the organization."
        username:
          $ref: '#/components/schemas/Canonical'
        email:
          type: string
          format: email
        password:
          minLength: 8
          type: string
          format: password
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Code of a country the user is from
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
      description: Create a new user account.
    NewAWSMarketplaceUserAccount:
      title: Sign up from AWS Marketplace
      required:
      - aws_marketplace_token
      - email
      - family_name
      - given_name
      - password
      - username
      type: object
      properties:
        aws_marketplace_token:
          minLength: 1
          type: string
          description: The AWS marketplace token
        username:
          $ref: '#/components/schemas/Canonical'
        email:
          type: string
          format: email
        password:
          minLength: 8
          type: string
          format: password
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Code of a country the user is from
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
      description: Create a new AWS Marketplace user account.
    UpdateUserAccount:
      title: Update user's account
      required:
      - family_name
      - given_name
      - locale
      - mfa_enabled
      - username
      type: object
      properties:
        emails:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/UpdateUserAccountEmail'
        password_update:
          required:
          - current
          - new
          type: object
          properties:
            current:
              minLength: 8
              type: string
              format: password
            new:
              minLength: 8
              type: string
              format: password
          description: The update password requires to confirm the old password.
        username:
          $ref: '#/components/schemas/Canonical'
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        picture_url:
          type: string
          format: uri
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Code of a country the user is from
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
        mfa_enabled:
          type: boolean
      description: "The user's account information of the authenticated user to be\
        \ updated. Emails and password can be omitted if they don't have to be updated,\
        \ because we can now if they have been sent or not although go-swagger doesn't\
        \ currently support `PATCH` updates (see [comment](https://github.com/cycloidio/youdeploy-http-api/pull/71#issuecomment-321894076)),\
        \ we do for this one with this 2 properties because they are good for the\
        \ user, specially for the `password_update` one. In order to detect if they\
        \ have been sent or not, we check if the length of array of emails is 0 (if\
        \ it's sent, then the length MUST be greater than 0 as specified with minItems)\
        \ and in case of the `password_update` field if it's `nil` or not. If the\
        \ 'picture_url' is not send then it's removed from the user as it implies\
        \ that it has deleted it, and also because we do not support partial updates"
    UserPasswordResetReq:
      title: User password reset request
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: the email address must be the primary email of the user.
          format: email
      description: Request to send a token for allowing the user to reset its current
        password.
    UserPasswordResetUpdate:
      title: User password reset update
      required:
      - password
      - token
      type: object
      properties:
        password:
          minLength: 8
          type: string
          format: password
        token:
          minLength: 1
          type: string
      description: Reset the current user password to the one provided. The user must
        have a valid token for the resetting password action.
    UserLogin:
      title: Log in
      required:
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          $ref: '#/components/schemas/Canonical'
        password:
          minLength: 8
          type: string
          format: password
        organization_canonical:
          $ref: '#/components/schemas/Canonical'
      description: Validate the user to access to the application. The user can login
        with the primary email address or with username.
    UserOAuth:
      title: User's OAuth information
      type: object
      properties:
        user:
          $ref: '#/components/schemas/NewOAuthUser'
        token:
          type: string
          description: Is the JWT of the platform user
      description: "The User OAuth information, if it's on the platform it'll return\
        \ the 'token' to login, if not the 'user' to show to the user"
    NewOAuthUser:
      title: User's OAuth information
      required:
      - email
      - given_name
      - social_id
      - username
      type: object
      properties:
        given_name:
          type: string
        family_name:
          type: string
        email:
          type: string
          format: email
        username:
          $ref: '#/components/schemas/Canonical'
        picture_url:
          type: string
          format: uri
        social_id:
          type: string
        invitation_token:
          minLength: 5
          type: string
          description: "The field is used when a user signup from an invitation to\
            \ an organization. Giving the token, the created user will be automatically\
            \ added to the organization."
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Code of a country the user is from
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
      description: The User OAuth information
    UserSession:
      title: User's session
      required:
      - owns
      - permissions
      - token
      type: object
      properties:
        token:
          type: string
        permissions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Rule'
        owns:
          type: array
          items:
            type: string
      description: The JWT which allows the user to access to the application.
    User:
      title: Basic info of a user
      required:
      - country_code
      - created_at
      - email
      - family_name
      - given_name
      - id
      - locale
      - mfa_enabled
      - username
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          $ref: '#/components/schemas/Canonical'
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        email:
          type: string
          description: User's primary email.
          format: email
        picture_url:
          type: string
          format: uri
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Code of a country the user is from
        locale:
          pattern: "^[a-z]{2}(?:-[a-z][a-z])?$"
          type: string
          description: The local that the user prefer.
        created_at:
          minimum: 0
          type: integer
          description: When the user became a member.
          format: uint64
        updated_at:
          minimum: 0
          type: integer
          description: When the user had the role modified.
          format: uint64
        last_login_at:
          minimum: 0
          type: integer
          description: When the user logged in last time.
          format: uint64
        mfa_enabled:
          type: boolean
      description: A summary of a user to be used in places where only the basic information
        are need or are enough.
    MemberOrg:
      title: Member of an organization
      required:
      - created_at
      - email
      - family_name
      - given_name
      - id
      - locale
      - mfa_enabled
      - role
      - username
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          $ref: '#/components/schemas/Canonical'
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        email:
          type: string
          description: user email
          format: email
        picture_url:
          type: string
          format: uri
        created_at:
          minimum: 0
          type: integer
          description: When the user became a member.
          format: uint64
        updated_at:
          minimum: 0
          type: integer
          description: When the user had the role modified.
          format: uint64
        last_login_at:
          minimum: 0
          type: integer
          description: When the user logged in last time.
          format: uint64
        invited_at:
          minimum: 0
          type: integer
          description: "When the user had been invited to join as a member. When not\
            \ present, the user is already a member, so she/he has verified her/his\
            \ invitation."
          format: uint64
        invited_by:
          $ref: '#/components/schemas/MemberOrg'
        role:
          $ref: '#/components/schemas/Role'
        locale:
          type: string
          description: User's preferred language
          enum:
          - en
          - fr
          - es
        mfa_enabled:
          type: boolean
      description: Member is a user who is associated to an organization.
    MemberTeam:
      title: Member of a team
      required:
      - created_at
      - email
      - family_name
      - given_name
      - id
      - mfa_enabled
      - username
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          $ref: '#/components/schemas/Canonical'
        given_name:
          minLength: 2
          type: string
        family_name:
          minLength: 2
          type: string
        email:
          type: string
          description: user email
          format: email
        picture_url:
          type: string
          format: uri
        created_at:
          minimum: 0
          type: integer
          description: When the user became a member.
          format: uint64
        updated_at:
          minimum: 0
          type: integer
          description: When the user had the role modified.
          format: uint64
        last_login_at:
          minimum: 0
          type: integer
          description: When the user logged in last time.
          format: uint64
        invited_by:
          $ref: '#/components/schemas/MemberTeam'
        mfa_enabled:
          type: boolean
      description: Member is a user who is associated to a team.
    MemberAssignation:
      title: Member assignation
      required:
      - role_canonical
      type: object
      properties:
        role_canonical:
          $ref: '#/components/schemas/Canonical'
      description: Member is a user who is associated to an entity of the system.
        The user is newly assigned or reassigned for updating is data.
    NewTeamMemberAssignation:
      title: Assign user
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: Assign user by username
          format: string
      description: Member is a user assigned to a Team
    NewMemberInvitation:
      title: Invite user
      required:
      - email
      - role_canonical
      type: object
      properties:
        email:
          type: string
          description: Invite user by email
          format: email
        role_canonical:
          $ref: '#/components/schemas/Canonical'
      description: "Send an invitation to a user to something. Something can be to\
        \ create an account, to join to an organization, to join to a team, etc. API\
        \ operation determines the operation to perform."
    Pipeline:
      title: Pipeline
      required:
      - created_at
      - environment
      - id
      - jobs
      - name
      - paused
      - project
      - public
      - team_name
      - updated_at
      - use_case
      type: object
      properties:
        id:
          type: integer
          format: uint64
        name:
          $ref: '#/components/schemas/Name'
        paused:
          type: boolean
        public:
          type: boolean
        archived:
          type: boolean
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupConfig'
        team_name:
          type: string
        environment:
          pattern: "^[\\da-zA-Z]+(?:(?:[\\da-zA-Z\\-._]+)?[\\da-zA-Z])?$"
          type: string
        project:
          $ref: '#/components/schemas/Project'
        use_case:
          $ref: '#/components/schemas/ProjectCanonical'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        status:
          type: string
        started:
          type: boolean
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: |
        The entity which represents a pipeline in the application.
    NewPipeline:
      title: Create Pipeline
      required:
      - environment
      - pipeline_name
      type: object
      properties:
        pipeline_name:
          maxLength: 50
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-._]+[a-z0-9]+$"
          type: string
        passed_config:
          type: string
        yaml_vars:
          type: string
        check_credentials:
          type: boolean
          description: Validate credentials manager variables in the pipeline config.
        environment:
          $ref: '#/components/schemas/NewEnvironment'
        use_case:
          $ref: '#/components/schemas/Canonical'
      description: The entity which represents a new pipeline to create in the application.
    UpdatePipeline:
      title: Update Pipeline
      required:
      - passed_config
      type: object
      properties:
        passed_config:
          type: string
        yaml_vars:
          type: string
        check_credentials:
          type: boolean
      description: The entity which represents a new pipeline config to update in
        the application.
    GroupConfig:
      title: GroupConfig
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        jobs:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: string
      description: The entity which represents pipeline group config
    PipelineVariables:
      title: Pipeline variables
      required:
      - has_saved_yaml_vars
      - yaml_vars
      type: object
      properties:
        yaml_vars:
          type: string
        has_saved_yaml_vars:
          type: boolean
          description: |
            The has_saved_yaml_vars specifies whether the returned vars are from
            the saved ones or the sample ones. If the has_saved_yaml_vars is true,
            it means that the saved have been returned.
      description: The entity which contains pipeline's variables.
    PipelineDiffRecord:
      title: PipelineDiffRecord
      required:
      - delta_type
      - line
      type: object
      properties:
        line:
          type: string
          description: Represents a text line in a pipeline configuration
        delta_type:
          type: string
          description: "Represents the type of delta (added, removed, changed, equals)\
            \ for the text line"
      description: Represents a diff record of a pipeline diff
    PipelineDiff:
      title: PipelineDiff
      required:
      - diff
      - name
      - status
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        status:
          type: string
          description: "Represents the status of the element (added, removed, changed)"
          enum:
          - added
          - removed
          - changed
        diff:
          type: array
          description: Represents the diff of all configuration line for an element
          items:
            $ref: '#/components/schemas/PipelineDiffRecord'
      description: Represents a diff element of a PipelineDiffs.
    PipelineDiffs:
      title: PipelineDiffs
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/PipelineDiff'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/PipelineDiff'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/PipelineDiff'
        resource_types:
          type: array
          items:
            $ref: '#/components/schemas/PipelineDiff'
      description: Represents the diffs between two pipelines
    PipelineStatus:
      title: PipelineStatus
      required:
      - synced
      type: object
      properties:
        synced:
          type: string
          description: |-
            The state can vary depending on how far the comparison process went. There are 4 possible states which are:
              - unknown: one of the pipeline (database/git) couldn't be retrieved
              - sycned: both database & git pipelines are identical
              - out_of_sync: database & git pipelines have some differences
              - errored: both pipelines got retrieved but the comparison triggered an error
          enum:
          - unknown
          - synced
          - out_of_sync
          - errored
        error:
          type: string
        diffs:
          $ref: '#/components/schemas/PipelineDiffs'
      description: Pipeline status returned upon pipelines comparison between the
        one locally stored in the database and its counter part on git.
    TaskConfig:
      title: TaskConfig
      type: object
      properties:
        platform:
          type: string
        tags:
          type: array
          items:
            type: string
        image:
          type: string
        params:
          type: object
          additionalProperties:
            type: string
        run:
          $ref: '#/components/schemas/TaskRunConfig'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/TaskInputConfig'
      description: The configuration of a concourse task.
    TaskRunConfig:
      title: TaskRunConfig
      type: object
      properties:
        path:
          minLength: 3
          type: string
        args:
          type: array
          items:
            type: string
      description: The configuration of a concourse task-run.
    TaskInputConfig:
      title: TaskInputConfig
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        path:
          type: string
      description: The configuration of inputs for concourse tasks.
    Plan:
      title: Plan
      required:
      - id
      type: object
      properties:
        id:
          type: string
        attempts:
          type: array
          items:
            type: integer
            format: uint32
        aggregate:
          type: string
        do:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
        get:
          $ref: '#/components/schemas/GetPlan'
        put:
          $ref: '#/components/schemas/PutPlan'
        task:
          $ref: '#/components/schemas/TaskPlan'
        ensure:
          $ref: '#/components/schemas/EnsurePlan'
        on_success:
          $ref: '#/components/schemas/OnSuccessPlan'
        on_failure:
          $ref: '#/components/schemas/OnFailurePlan'
        try:
          $ref: '#/components/schemas/TryPlan'
        timeout:
          $ref: '#/components/schemas/TimeoutPlan'
        retry:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
      description: The plan is what represent a concourse build.
    GetPlan:
      title: GetPlan
      required:
      - resource
      - source
      - type
      type: object
      properties:
        type:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        resource:
          type: string
        source:
          type: object
          additionalProperties:
            type: object
            properties: {}
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
        version:
          type: object
          additionalProperties:
            type: string
        version_from:
          type: string
        tags:
          type: array
          items:
            type: string
        versioned_resource_types:
          type: array
          items:
            $ref: '#/components/schemas/VersionedResourceType'
      description: The plan to get before running another one.
    PutPlan:
      title: PutPlan
      required:
      - resource
      - source
      - type
      type: object
      properties:
        type:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        resource:
          type: string
        source:
          type: object
          additionalProperties:
            type: object
            properties: {}
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
        tags:
          type: array
          items:
            type: string
        versioned_resource_types:
          type: array
          items:
            $ref: '#/components/schemas/VersionedResourceType'
      description: The put plan following a plan.
    TaskPlan:
      title: TaskPlan
      required:
      - privileged
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        privileged:
          type: boolean
        tags:
          type: array
          items:
            type: string
        config_path:
          type: string
        config:
          $ref: '#/components/schemas/TaskConfig'
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
        input_mapping:
          type: object
          additionalProperties:
            type: string
        output_mapping:
          type: object
          additionalProperties:
            type: string
        image_artifact_name:
          type: string
        versioned_resource_types:
          type: array
          items:
            $ref: '#/components/schemas/VersionedResourceType'
      description: The task plan.
    EnsurePlan:
      title: EnsurePlan
      required:
      - next
      - step
      type: object
      properties:
        step:
          $ref: '#/components/schemas/Plan'
        next:
          $ref: '#/components/schemas/Plan'
      description: The plan to ensure to be run.
    OnSuccessPlan:
      title: OnSuccessPlan
      required:
      - next
      - step
      type: object
      properties:
        step:
          $ref: '#/components/schemas/Plan'
        next:
          $ref: '#/components/schemas/Plan'
      description: The plan definition when the action has been successful.
    OnFailurePlan:
      title: OnFailurePlan
      required:
      - next
      - step
      type: object
      properties:
        step:
          $ref: '#/components/schemas/Plan'
        next:
          $ref: '#/components/schemas/Plan'
      description: The plan definition when the action has failed.
    TryPlan:
      title: EnsurePlan
      required:
      - next
      - step
      type: object
      properties:
        step:
          $ref: '#/components/schemas/Plan'
        next:
          $ref: '#/components/schemas/Plan'
      description: The plan to ensure to be run.
    TimeoutPlan:
      title: EnsurePlan
      required:
      - next
      - step
      type: object
      properties:
        step:
          $ref: '#/components/schemas/Plan'
        next:
          $ref: '#/components/schemas/Plan'
      description: The plan to ensure to be run.
    PublicPlan:
      title: PublicPlan
      required:
      - plan
      - schema
      type: object
      properties:
        schema:
          type: string
        plan:
          type: object
          properties: {}
      description: The public plan returned requesting a build plan.
    PlanConfig:
      title: PlanConfig
      type: object
      properties:
        conditions:
          type: array
          items:
            type: string
        raw_name:
          type: string
        do:
          type: array
          items:
            $ref: '#/components/schemas/PlanConfig'
        aggregate:
          type: array
          items:
            $ref: '#/components/schemas/PlanConfig'
        get:
          type: string
        passed:
          type: array
          items:
            type: string
        raw_trigger:
          type: boolean
        put:
          type: string
        resource:
          type: string
        task:
          type: string
        privileged:
          type: boolean
        taskConfigPath:
          type: string
        taskConfig:
          $ref: '#/components/schemas/TaskConfig'
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
      description: The plan configuration when creating new build.
    VersionedResourceType:
      title: VersionedResourceType
      required:
      - id
      - name
      - privileged
      - source
      - tags
      - type
      - version
      type: object
      properties:
        id:
          type: integer
          format: uint32
        name:
          $ref: '#/components/schemas/Name'
        type:
          type: string
        source:
          type: object
          additionalProperties:
            type: object
            properties: {}
        privileged:
          type: boolean
        tags:
          type: object
          additionalProperties:
            type: string
        version:
          type: object
          additionalProperties:
            type: string
      description: The versioned resources type.
    Job:
      title: Job
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: uint64
        name:
          $ref: '#/components/schemas/Name'
        paused:
          type: boolean
        first_logged_build_id:
          type: integer
          format: uint64
        disable_manual_trigger:
          type: boolean
        has_new_inputs:
          type: boolean
        next_build:
          $ref: '#/components/schemas/Build'
        finished_build:
          $ref: '#/components/schemas/Build'
        transition_build:
          $ref: '#/components/schemas/Build'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/JobInput'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/JobOutput'
        groups:
          type: array
          items:
            type: string
        team_name:
          type: string
        pipeline_id:
          type: integer
          format: uint64
        pipeline_name:
          type: string
      description: The entity which represents a job output in the application.
    JobInput:
      title: JobInput
      required:
      - name
      - resource
      - trigger
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        resource:
          type: string
        passed:
          type: array
          items:
            type: string
        trigger:
          type: boolean
        version:
          $ref: '#/components/schemas/VersionConfig'
      description: The entity which represents a job input in the application.
    JobOutput:
      title: JobOutput
      required:
      - name
      - resource
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        resource:
          type: string
      description: The entity which represents a job output in the application.
    ClearTaskCache:
      title: ClearTaskCache
      required:
      - caches_removed
      type: object
      properties:
        caches_removed:
          type: integer
      description: The entity which represents number of cache cleared for a task.
    VersionConfig:
      title: VersionConfig
      type: object
      properties:
        every:
          type: boolean
        latest:
          type: boolean
        pinned:
          type: object
          additionalProperties:
            type: string
      description: The entity which represents a version configuration in the application.
    Worker:
      title: Worker
      required:
      - active_containers
      - active_volumes
      - ephemeral
      - name
      - platform
      - start_time
      - state
      - version
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        state:
          type: string
        version:
          type: string
        platform:
          type: string
        team:
          type: string
        ephemeral:
          type: boolean
        active_containers:
          type: integer
          format: uint64
        active_volumes:
          type: integer
          format: uint64
        start_time:
          type: integer
          format: uint64
        tags:
          type: array
          items:
            type: string
      description: The entity which represents a worker in the application.
    Resource:
      title: Resource
      required:
      - name
      - type
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        type:
          type: string
        icon:
          type: string
        last_checked:
          type: integer
          format: uint64
        pin_comment:
          type: string
        pinned_in_config:
          type: boolean
        pinned_version:
          type: object
          additionalProperties:
            type: string
        pipeline_id:
          type: integer
          format: uint64
        pipeline_name:
          type: string
        team_name:
          type: string
        build:
          $ref: '#/components/schemas/BuildSummary'
      description: The entity which represents a resource in the application.
    BuildInputsOutputs:
      title: BuildInputsOutputs
      required:
      - inputs
      - outputs
      type: object
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/PublicBuildInput'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/PublicBuildOutput'
      description: Represent the resources input/output related to a build
    PublicBuildOutput:
      title: PublicBuildOutput
      required:
      - name
      - version
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        version:
          type: object
          additionalProperties:
            type: string
      description: Represents the information of a build output
    PublicBuildInput:
      title: PublicBuildInput
      required:
      - first_occurrence
      - name
      - pipeline_id
      - version
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        version:
          type: object
          additionalProperties:
            type: string
        pipeline_id:
          type: integer
          format: uint64
        first_occurrence:
          type: boolean
      description: Represent the information of a build input
    MetadataField:
      title: MetadataField
      required:
      - name
      - value
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        value:
          type: string
      description: Represent the metadata of a build input
    CIVersion:
      title: CIVersion
      type: object
      additionalProperties:
        type: string
      description: Represent a version of a resource
    PinComment:
      title: PinComment
      required:
      - pin_comment
      type: object
      properties:
        pin_comment:
          type: string
      description: Represents a pin comment of a resource
    ResourceVersion:
      title: ResourceVersion
      required:
      - enabled
      - id
      - version
      type: object
      properties:
        id:
          type: integer
          format: uint64
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/MetadataField'
        version:
          type: object
          additionalProperties:
            type: string
        enabled:
          type: boolean
      description: Represent the outputs of a job
    BuildSummary:
      title: BuildSummary
      required:
      - id
      - name
      - status
      - team_name
      type: object
      properties:
        id:
          type: integer
          format: uint64
        team_name:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        status:
          type: string
        job_name:
          type: string
        plan:
          type: object
          properties: {}
        pipeline_name:
          type: string
        start_time:
          type: integer
          format: uint64
        end_time:
          type: integer
          format: uint64
        pipeline_id:
          type: integer
          format: uint64
      description: The information relative to a build summary.
    Build:
      title: Build
      required:
      - api_url
      - id
      - name
      - status
      - team_name
      type: object
      properties:
        id:
          type: integer
          format: uint64
        team_name:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        status:
          type: string
        job_name:
          type: string
        api_url:
          type: string
        pipeline_name:
          type: string
        pipeline_id:
          type: integer
          format: uint64
        start_time:
          type: integer
          format: uint64
        end_time:
          type: integer
          format: uint64
        reap_time:
          type: integer
          format: uint64
      description: The information relative to a build.
    Preparation:
      title: Preparation
      required:
      - build_id
      - inputs
      - inputs_satisfied
      - max_running_builds
      - missing_input_reasons
      - paused_job
      - paused_pipeline
      type: object
      properties:
        build_id:
          type: string
        paused_pipeline:
          type: string
        paused_job:
          type: string
        max_running_builds:
          type: string
        inputs:
          type: object
          properties: {}
        inputs_satisfied:
          type: object
          properties: {}
        missing_input_reasons:
          type: object
          properties: {}
    Role:
      title: Role access control
      required:
      - canonical
      - default
      - description
      - id
      - name
      - rules
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        description:
          $ref: '#/components/schemas/Description'
        default:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: Role represents the authorization level that an user has to access
        to a specific entity of the system. A role contains a list of rules to define
        the access control. Note not all the entities supports roles access control;
        see the API endpoints to know which entities support them.
    NewRole:
      title: New role access control
      required:
      - name
      - rules
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        description:
          $ref: '#/components/schemas/Description'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NewRule'
      description: New role represents the authorization level that a user has access
        to. A role contains a list of rules to define the access control. Note not
        all the entities supports roles access control; see the API endpoints to know
        which entities support them.
    Rule:
      title: Rule
      required:
      - action
      - effect
      - id
      type: object
      properties:
        id:
          minimum: 0
          type: integer
          description: "This is the id of the row from the database, but for blocking\
            \ organizations we generate rules that are not in the database. When this\
            \ happens the id is allowed to be 0."
          format: uint32
        effect:
          type: string
          enum:
          - allow
        action:
          type: string
          description: It can be the normal Policy.Code or contain globs like `*`
            or `**`
        resources:
          type: array
          description: "It is the list of resources in which this Rule applies to,\
            \ the format of it is the one on the Policy.Code but with the `canonical`\
            \ of the entities like `organization:org-can:team:team-can` for an action\
            \ of `organization:team:read`"
          items:
            type: string
      description: Rules define the specific access to the platform
    NewRule:
      title: NewRule
      required:
      - action
      - effect
      type: object
      properties:
        action:
          type: string
          description: It can be the normal Policy.Code or contain globs like `*`
            or `**`
        effect:
          type: string
          enum:
          - allow
        resources:
          type: array
          description: "It is the list of resources in which this Rule applies to,\
            \ the format of it is the one on the Policy.Code but with the `canonical`\
            \ of the entities like `organization:org-can:team:team-can` for an action\
            \ of `organization:team:read`"
          items:
            type: string
      description: NewRule represents an existing or new permission or constraint
        to access to an entity of the system. A Rule is aggregated into roles in order
        to be applied.
    Policy:
      title: Policy
      required:
      - code
      - description
      - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        code:
          maxLength: 60
          minLength: 5
          pattern: "(?:[a-z]+_)*[a-z]+(?::(?:[a-z]+_)*[a-z]+)*$"
          type: string
        entities:
          type: array
          items:
            type: string
        description:
          $ref: '#/components/schemas/Description'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: Policy represents a permission or constraint to access to an entity
        of the system. A policy is aggregated into roles in order to be applied.
    CloudProvider:
      title: Cloud Provider
      required:
      - canonical
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        regions:
          type: array
          items:
            type: string
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: CloudProvider represents a cloud provider. Those cloud providers
        are used to identify the scope of projects and/or stacks.
    ErrorPayload:
      title: Error Payload
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetailsItem'
      description: |
        The payload used by the server to response to the client with an Error, those errors could be any of the ones listed [here](https://github.com/cycloidio/youdeploy-http-api/blob/develop/errors/code.go#L10), only the CODE of the error is the one that is guaranteed to not change between the same major version, the MESSAGE could change.
    ErrorDetailsItem:
      title: Error details item
      required:
      - code
      - message
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        details:
          type: array
          items:
            type: string
      description: Represents an item of the list of details of an error.
    ServiceCatalog:
      title: Service Catalog
      required:
      - author
      - canonical
      - description
      - directory
      - form_enabled
      - id
      - keywords
      - name
      - quota_enabled
      - ref
      - trusted
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        author:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            type: string
        image:
          type: string
          format: uri
        status:
          type: string
        service_catalog_source_canonical:
          $ref: '#/components/schemas/Canonical'
        form_enabled:
          type: boolean
          description: Indicates if this stack can be configured with form's or not.
            Based on the presence or not of a valid .forms.yaml file since it's creation
            or last refresh.
        quota_enabled:
          type: boolean
          description: Indicates if this stack can be configured with form's and has
            a Quota configuration.
        ref:
          type: string
        trusted:
          type: boolean
          description: If 'true' the ServiceCatalog is from the main organization
            and can be trusted.
        directory:
          type: string
          description: Directory where the ServiceCatalog configuration is found.
        technologies:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalogTechnology'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalogDependency'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        import_status:
          type: string
          description: The import process status.
          enum:
          - succeeded
          - failed
          - importing
        readme:
          type: string
          description: Readme of the stack
      description: Represents the Service Catalog item
    ServiceCatalogConfig:
      title: Service Catalog Configuration
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SCConfigUseCaseConfig'
      description: Represents a Service Catalog's Config item
    SCConfigUseCaseConfig:
      title: Use Case Configuration
      required:
      - cloud_provider
      - description
      - name
      - pipeline
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        description:
          $ref: '#/components/schemas/Description'
        cloud_provider:
          type: string
        pipeline:
          $ref: '#/components/schemas/SCConfigPipelineConfig'
        ansible:
          $ref: '#/components/schemas/SCConfigTechConfig'
        terraform:
          $ref: '#/components/schemas/SCConfigTechConfig'
        forms:
          $ref: '#/components/schemas/FormUseCase'
      description: Represents the Service Catalog Configuration for a given Use Case
    SCConfigPipelineConfig:
      title: Pipeline Configuration
      required:
      - pipeline
      - variables
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/SCConfigPathConfig'
        variables:
          $ref: '#/components/schemas/SCConfigPathDestConfig'
      description: Represents the Service Catalog Configuration for a Pipeline of
        a given Use Case
    SCConfigTechConfig:
      title: Tech Configuration
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SCConfigPathDestConfig'
      description: Represents the Service Catalog Configuration for a Technology of
        a given Use Case
    SCConfigPathConfig:
      title: Path Configuration
      required:
      - content
      - path
      type: object
      properties:
        path:
          type: string
        content:
          type: string
      description: Represents a Configuration which holds Path and Content
    SCConfigPathDestConfig:
      title: Path and Destination Configuration
      required:
      - content
      - destination
      - path
      type: object
      properties:
        path:
          type: string
        destination:
          type: string
        content:
          type: string
      description: "Represents a Configuration which holds Path, Destination and Content"
    SCConfigFormData:
      title: Form Data
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: array
          items:
            $ref: '#/components/schemas/FormEntity'
      description: Represents the Data related to Forms that is stored in a SC Configuration
        for a given Use Case
    NewServiceCatalog:
      title: Service Catalog
      required:
      - author
      - description
      - keywords
      - name
      - service_catalog_source_canonical
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        author:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            type: string
        image:
          type: string
          format: uri
        status:
          type: string
        service_catalog_source_canonical:
          $ref: '#/components/schemas/Canonical'
        technologies:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalogTechnology'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalogDependency'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: Represents the Service Catalog item
    NewServiceCatalogFromTemplate:
      title: Service Catalog
      required:
      - canonical
      - name
      - service_catalog_source_canonical
      - use_case
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        author:
          type: string
        service_catalog_source_canonical:
          $ref: '#/components/schemas/Canonical'
        use_case:
          type: string
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: Represents the Service Catalog item
    ServiceCatalogTechnology:
      title: ServiceCatalogTechnology
      type: object
      properties:
        technology:
          type: string
        version:
          type: string
      description: ServiceCatalogTechnology is a Technology of the Service Catalog
    ServiceCatalogDependency:
      title: ServiceCatalogDependency
      type: object
      properties:
        ref:
          type: string
        required:
          type: boolean
      description: Service Catalog Dependency identifies ServiceCatalog being dependency
        of other
    ServiceCatalogDependenciesValidationResult:
      title: ServiceCatalogValidationResult
      required:
      - errors
      - warnings
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
      description: The result of the Service Catalog dependencies validation. If errors
        and warnings are empty then it means that the dependencies are respected.
    SCConfig:
      title: SC Config
      required:
      - configs
      type: object
      properties:
        configs:
          type: array
          description: Config files that will be created
          items:
            $ref: '#/components/schemas/ConfigFile'
      description: This entity is being used for automatic creation of SC config
    ConfigFile:
      title: SC config file
      required:
      - content
      - path
      type: object
      properties:
        path:
          type: string
        content:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
      description: This object contains SC config file name and its content
    ServiceCatalogSource:
      title: ServiceCatalogSource
      required:
      - canonical
      - id
      - name
      - owner
      - stack_count
      - url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        refreshed_at:
          minimum: 0
          type: integer
          description: The last time the Service Catalog Source was (successfully)
            refreshed.
          format: uint64
        stack_count:
          minimum: 0
          type: integer
          format: uint32
        changes:
          $ref: '#/components/schemas/ServiceCatalogChanges'
        service_catalogs:
          type: array
          description: Represents list of service catalogs in the service catalog
            source. Not used during update action on a service catalog source.
          items:
            $ref: '#/components/schemas/ServiceCatalog'
    NewServiceCatalogSource:
      title: NewServiceCatalogSource
      required:
      - branch
      - name
      - url
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        owner:
          $ref: '#/components/schemas/Owner'
    UpdateServiceCatalogSource:
      title: UpdateServiceCatalogSource
      required:
      - name
      - url
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        owner:
          $ref: '#/components/schemas/Owner'
    ServiceCatalogChanges:
      title: ServiceCatalogChanges
      required:
      - created
      - deleted
      - updated
      type: object
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalog'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalog'
        deleted:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCatalog'
      description: Represents list of service catalogs changes during the refresh
        of a service catalog source.
    Credential:
      title: Credential
      required:
      - canonical
      - id
      - keys
      - name
      - path
      #- body
      - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - swift
          - vmware
        path:
          type: string
        #body:
          #$ref: '#/components/schemas/CredentialRaw'
        description:
          $ref: '#/components/schemas/Description'
        keys:
          type: array
          description: List of all the keys available for the Credential
          items:
            type: string
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        in_use:
          $ref: '#/components/schemas/CredentialInUse'
      description: Represents the Credential
    NewCredential:
      title: Credential
      required:
      - name
      - path
      - body
      - type
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - swift
          - vmware
        path:
          pattern: "[a-zA-z0-9_\\-./]"
          type: string
        body:
          $ref: '#/components/schemas/CredentialRaw'
        description:
          $ref: '#/components/schemas/Description'
        owner:
          $ref: '#/components/schemas/Owner'
      description: Represents the Credential
    UpdateCredential:
      title: Credential
      required:
      - canonical
      - name
      - path
      - body
      - type
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - vmware
        path:
          pattern: "[a-zA-z0-9_\\-./]"
          type: string
        body:
          $ref: '#/components/schemas/CredentialRaw'
        description:
          $ref: '#/components/schemas/Description'
        owner:
          $ref: '#/components/schemas/Owner'
      description: Represents the Credential
    CredentialSimple:
      title: Credential Simple
      required:
      - canonical
      - id
      - keys
      - name
      - path
      - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - swift
          - vmware
        path:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        keys:
          type: array
          description: List of all the keys available for the Credential
          items:
            type: string
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        in_use:
          $ref: '#/components/schemas/CredentialInUse'
        owner:
          $ref: '#/components/schemas/User'
      description: Represents the Credential without the raw and owner
    CredentialRaw:
      title: Credential Raw
      type: object
      properties:
        raw:
          type: object
          additionalProperties: true
          #properties: {}
        ssh_key:
          type: string
        access_key:
          type: string
        secret_key:
          type: string
        account_name:
          type: string
        json_key:
          type: string
        username:
          type: string
        password:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        subscription_id:
          type: string
        tenant_id:
          type: string
        ca_cert:
          type: string
        domain_id:
          type: string
        auth_url:
          type: string
      description: All the possible fields inside it
    CredentialInUse:
      title: Credential in use
      type: object
      properties:
        service_catalog_sources:
          type: array
          items:
            $ref: '#/components/schemas/InUseServiceCatalogSource'
        config_repositories:
          type: array
          items:
            $ref: '#/components/schemas/InUseConfigRepository'
        external_backends:
          type: array
          items:
            $ref: '#/components/schemas/InUseExternalBackend'
      description: |
        InUse represents the resources that are using provided credential.
    InUseServiceCatalogSource:
      title: InUseServiceCatalogSource
      required:
      - canonical
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
      description: Represents a Service catalog source that's using credential
    InUseConfigRepository:
      title: InUseConfigRepository
      required:
      - canonical
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
      description: Represents a Config repository that's using credential
    InUseProject:
      title: InUseProject
      required:
      - canonical
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
      description: Represents a project that's using credential
    InUseEnvironment:
      title: InUseEnvironment
      required:
      - canonical
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
      description: Represents an environment that's using credential
    InUseExternalBackend:
      title: InUseExternalBackend
      required:
      - engine
      - project
      - purpose
      type: object
      properties:
        purpose:
          type: string
        engine:
          type: string
        project:
          $ref: '#/components/schemas/InUseProject'
        environment:
          $ref: '#/components/schemas/InUseEnvironment'
      description: Represents a external backend that's using credential
    ConfigRepository:
      title: ConfigRepository
      required:
      - canonical
      - default
      - id
      - name
      - url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        default:
          $ref: '#/components/schemas/Default'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    NewConfigRepository:
      title: NewConfigRepository
      required:
      - branch
      - credential_canonical
      - default
      - name
      - url
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        default:
          $ref: '#/components/schemas/Default'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
    UpdateConfigRepository:
      title: UpdateConfigRepository
      required:
      - branch
      - credential_canonical
      - default
      - name
      - url
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        url:
          $ref: '#/components/schemas/GitURL'
        branch:
          $ref: '#/components/schemas/Branch'
        default:
          $ref: '#/components/schemas/Default'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
    AWSInfrastructureResourcesAggregation:
      title: AWS Infrastructure Resources Aggregation
      type: object
      properties:
        instances:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        vpcs:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        images:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        security_groups:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        subnets:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        volumes:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        snapshots:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        cache_clusters:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        load_balancers_v1:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        load_balancers_v2:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        db_instances:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
        buckets:
          $ref: '#/components/schemas/InfrastructureResourcesAggregationItem'
    InfrastructureResourcesAggregationItem:
      title: Infrastructure Resource Aggregation Item
      required:
      - total_amount
      type: object
      properties:
        total_amount:
          type: integer
          description: The number of items of the specific type of resource.
          format: uint32
      description: Contains aggregated data of a single type of an infrastructure
        resource.
    AWSInfrastructureResourceInstance:
      title: AWS Infrastructure Instance Resource
      type: object
      description: "This object contains the items described in the instance data\
        \ type described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Instance.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceVPC:
      title: AWS Infrastructure VPC Resource
      type: object
      description: "This object contains the items described in the VPC data type\
        \ described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Vpc.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceSubnet:
      title: AWS Infrastructure subnet Resource
      type: object
      description: "This object contains the items described in the subnet data type\
        \ described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Subnet.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceSecurityGroup:
      title: AWS Infrastructure security group Resource
      type: object
      description: "This object contains the items described in the security group\
        \ data type described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SecurityGroup.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceImage:
      title: AWS Infrastructure image Resource
      type: object
      description: "This object contains the items described in the image data type\
        \ described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Image.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceVolume:
      title: AWS Infrastructure volume Resource
      type: object
      description: "This object contains the items described in the volume data type\
        \ described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Volume.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceSnapshot:
      title: AWS Infrastructure snapshot Resource
      type: object
      description: "This object contains the items described in the snapshot data\
        \ type described in https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Snapshot.html\
        \ Tags property is set, for guaranteeing that the respond will always have\
        \ the property of the type array, not allowing null in case that the resource\
        \ doesn't have any, hence an empty array is used in such case. This object\
        \ will contain a property named 'Tags' which is of the type defined by the\
        \ schema definition '#/definitions/AWSTags'"
    AWSInfrastructureResourceElasticacheCluster:
      title: AWS Infrastructure Elasticache cluster Resource
      type: object
      description: This object contains the items described in the ElastiCache cluster
        data type described in https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CacheCluster.html
        but it also contains its associated tags which are documented in the properties
        of this object definition. This object will contain a property named 'Tags'
        which is of the type defined by the schema definition '#/definitions/AWSTags'
    AWSInfrastructureResourceLoadBalancerV1:
      title: AWS Infrastructure load balancer (ELB) Resource
      type: object
      description: This object contains the items described in the load balancer (ELB)
        data type described in https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_LoadBalancerDescription.html
        but it also contains its associated tags which are documented in the properties
        of this object definition. This object will contain a property named 'Tags'
        which is of the type defined by the schema definition '#/definitions/AWSTags'
    AWSInfrastructureResourceLoadBalancerV2:
      title: AWS Infrastructure load balancer (ELB v2 or a.k.a ALB) Resource
      type: object
      description: This object contains the items described in the load balancer (ELB
        v2 or a.k.a ALB) data type described in https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_LoadBalancer.html
        but it also contains its associated tags which are documented in the properties
        of this object definition. This object will contain a property named 'Tags'
        which is of the type defined by the schema definition '#/definitions/AWSTags'
    AWSInfrastructureResourceDBInstance:
      title: AWS Infrastructure RDS DB instance Resource
      type: object
      description: This object contains the items described in the RDS DB instance
        data type described in https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DBInstance.html
        but it also contains its associated tags which are documented in the properties
        of this object definition. This object will contain a property named 'Tags'
        which is of the type defined by the schema definition '#/definitions/AWSTags'
    AWSInfrastructureResourceBucket:
      title: AWS Infrastructure S3 bucket Resource
      type: object
      description: This object contains the items described in the S3 bucket data
        type described in but it also contains its associated tags which are documented
        in the properties of this object definition. This object will contain a property
        named 'Tags' which is of the type defined by the schema definition '#/definitions/AWSTags'
    CostGroupDefinitions:
      title: CostGroupDefinitions
      required:
      - group
      - key
      type: object
      properties:
        group:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z]+$"
          type: string
        key:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z]+$"
          type: string
      description: "This object contains the items describe in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#GroupDefinition\
        \ It also grouping the costs based on different elements: az, services, tags,\
        \ etc"
    CostResultByTime:
      title: CostResultByTime
      required:
      - estimated
      - groups
      - period
      - total
      - unit
      type: object
      properties:
        estimated:
          type: boolean
        groups:
          type: array
          items:
            $ref: '#/components/schemas/CostGroup'
        period:
          $ref: '#/components/schemas/CostTimePeriod'
        total:
          maxLength: 100
          minLength: 3
          pattern: "^[0-9]+.[0-9]+$"
          type: string
        unit:
          maxLength: 3
          minLength: 2
          pattern: "^[a-zA-Z]+$"
          type: string
      description: "This object contains the items described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#ResultByTime\
        \ It is basically containing information about the cost per group(s) and per\
        \ granularity (daily/monthly) over the period of time selected. The total\
        \ and unit fields have bee modified to fit our requirements, while the groups\
        \ hold the information about each iteration over the time range."
    CostTimePeriod:
      title: CostTimePeriod
      required:
      - begin
      - end
      type: object
      properties:
        begin:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
          type: string
        end:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
          type: string
      description: "This object contains the items described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#DateInterval\
        \ It defines the beginning and the end of the time frame for which, the API\
        \ should gather costs."
    CostGroup:
      title: CostGroup
      required:
      - amount
      - keys
      - unit
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
        amount:
          maxLength: 100
          minLength: 3
          pattern: "^[0-9]+.[0-9]+$"
          type: string
        unit:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]+$"
          type: string
      description: This object contains the items described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#Group
        The groups hold the information about the price per key(s) for each iteration
        over the time range requested.
    Environment:
      title: Environment
      required:
      - canonical
      - created_at
      - id
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          maxLength: 100
          minLength: 1
          pattern: "^[\\da-zA-Z]+(?:[\\da-zA-Z\\-._]+[\\da-zA-Z]|[\\da-zA-Z])$"
          type: string
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider'
        use_case:
          $ref: '#/components/schemas/Canonical'
      description: Represent an environment with may be related to a Project and Pipeline
    NewEnvironment:
      title: NewEnvironment
      required:
      - canonical
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        cloud_provider_canonical:
          $ref: '#/components/schemas/Canonical'
      description: Represent an entity necessary for environment creation
    LogSource:
      title: A log source
      required:
      - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
      description: The data associated to a log's source. Each log source is the context
        of a list of entries which are registered through the time.
    LogSourceEntry:
      title: Log entry
      required:
      - host
      - message
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          description: The timestamp extracted from the original log entry in order
            to be homogeneous to all the different supported underlying log systems.
          format: uint64
        host:
          minLength: 1
          type: string
          description: The host registered with the log's entry.
        message:
          minLength: 1
          type: string
          description: The original (i.e. raw) log's entry.
      description: A log's entry which pertains to a specific log's source.
    ExternalBackend:
      title: External backend
      required:
      - default
      - purpose
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        purpose:
          type: string
        default:
          $ref: '#/components/schemas/Default'
        jwt:
          type: string
          description: JWT is a credential identifying this EB for a public interaction
            right now it's only filled when the Purpose == RemoteTFState as we'll
            use it for the Inventory.
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
#        aws_storage:
#          $ref: '#/components/schemas/AWSStorage'
#        gcp_storage:
#          $ref: '#/components/schemas/GCPStorage'
#        swift_storage:
#          $ref: '#/components/schemas/SwiftStorage'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: "An external backend contains the configuration needed in order\
        \ to be plugged into the Cycloid system. A backend is a general purpose concept,\
        \ but Cycloid specifies which ones are supported and the list of those which\
        \ are supported for every concrete feature."
    NewExternalBackend:
      title: New External backend
      required:
      - purpose
      - engine
      type: object
      properties:
        purpose:
          type: string
          enum:
          - remote_tfstate
        engine:
          type: string
          enum:
            - aws_storage
            - gcp_storage
            - swift_storage
        default:
          $ref: '#/components/schemas/Default'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        aws_storage:
          $ref: '#/components/schemas/AWSStorage'
        gcp_storage:
          $ref: '#/components/schemas/GCPStorage'
        swift_storage:
          $ref: '#/components/schemas/SwiftStorage'
      description: "An external backend contains the configuration needed in order\
        \ to be plugged into the Cycloid system. A backend is a general purpose concept,\
        \ but Cycloid specifies which ones are supported and the list of those which\
        \ are supported for every concrete feature."
    UpdateExternalBackend:
      title: Update External backend
      required:
      - purpose
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        purpose:
          type: string
          enum:
          - remote_tfstate
        default:
          $ref: '#/components/schemas/Default'
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        aws_storage:
          $ref: '#/components/schemas/AWSStorage'
        gcp_storage:
          $ref: '#/components/schemas/GCPStorage'
        swift_storage:
          $ref: '#/components/schemas/SwiftStorage'
      description: "An external backend contains the configuration needed in order\
        \ to be plugged into the Cycloid system. A backend is a general purpose concept,\
        \ but Cycloid specifies which ones are supported and the list of those which\
        \ are supported for every concrete feature."
    AWSStorage:
      title: AWSStorage
      description: |
        Representation of AWS storage for external backend.
        Must be matched with a credential of the "aws" type.
      type: object
      properties:
        region:
          type: string
          description: |
            The AWS region where the resource exists
        bucket:
          type: string
          description: |
            The AWS bucket containing objects
        key:
          type: string
          description: |
            The S3 Key uniquely identifies an object in a bucket
        endpoint:
          type: string
          description: |
            A custom endpoint for the S3 API (default: s3.amazonaws.com)
        s3_force_path_style:
          type: boolean
          description: |
            Always use path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)
        skip_verify_ssl:
          type: boolean
          description: |
            Set this to `true` to not verify SSL certificates
    GCPStorage:
      title: GCPStorage
      description: |
        Representation of GCP remote tf state for external backend.
        Must be matched with a credential of the "gcp" type.
      type: object
      properties:
        bucket:
          type: string
          description: |
            The GCP bucket containing objects
        object:
          type: string
          description: |
            The GCP object uniquely identifying an object in a bucket,
            will be required if the EB is not default
    SwiftStorage:
      title: SwiftStorage
      description: |
        Representation of Swift remote tf state for external backend.
        Must be matched with a credential of the "swift" type.
      type: object
      properties:
        container:
          type: string
          description: |
            The Swift container containing objects
        object:
          type: string
          description: |
            The swift object uniquely identifying an object in a container,
            will be required if the EB is not default
        skip_verify_ssl:
          type: boolean
          description: |
            Set this to `true` to not verify SSL certificates
        region:
          type: string
          description: |
            The Swift region where the resource exists
    Event:
      title: An event
      required:
      - id
      - message
      - severity
      - tags
      - timestamp
      - title
      - type
      type: object
      properties:
        id:
          type: integer
          description: The unique ID of the event from the database.
          format: uint32
        timestamp:
          type: integer
          description: The timestamp when the event was created in milliseconds.
          format: uint64
        type:
          type: string
          description: The type of the event
          enum:
          - Cycloid
          - AWS
          - Monitoring
          - Custom
        title:
          minLength: 1
          type: string
          description: The title of the event.
        message:
          minLength: 1
          type: string
          description: The message associated to the event.
        icon:
          minLength: 3
          type: string
          description: "[A Font Awesome class name](https://fontawesome.com/icons)"
        severity:
          type: string
          description: The severity associated to the event.
          enum:
          - info
          - warn
          - err
          - crit
        tags:
          type: array
          description: The list of tags associated to the event.
          items:
            $ref: '#/components/schemas/Tag'
        color:
          maxLength: 20
          minLength: 3
          pattern: "[a-z]+"
          type: string
          description: "The HTML color associated to the event. The valid colors are\
            \ the ones listed in the  CSS 2 specification: https://www.w3.org/TR/CSS2/syndata.html#value-def-color.\
            \ Only the keyword are accepted, the hexadecimal values are not valid."
      description: A event which has registered an activity in the Cycloid platform.
    NewEvent:
      title: A new event
      required:
      - message
      - severity
      - tags
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the event
          enum:
          - Cycloid
          - AWS
          - Monitoring
          - Custom
        title:
          minLength: 1
          type: string
          description: The title of the event.
        message:
          minLength: 1
          type: string
          description: The message associated to the event.
        icon:
          minLength: 3
          type: string
          description: "[A Font Awesome class name](https://fontawesome.com/icons)"
        severity:
          type: string
          description: tThe severity associated to the event.
          enum:
          - info
          - warn
          - err
          - crit
        tags:
          type: array
          description: The list of tags associated to the event.
          items:
            $ref: '#/components/schemas/Tag'
        color:
          maxLength: 20
          minLength: 3
          pattern: "[a-z]+"
          type: string
          description: "The HTML color associated to the event. The valid colors are\
            \ the ones listed in the  CSS 2 specification: https://www.w3.org/TR/CSS2/syndata.html#value-def-color.\
            \ Only the keyword are accepted, the hexadecimal values are not valid."
      description: A new event to register in the Cycloid platform.
    Tag:
      title: Key and value pair
      required:
      - key
      - value
      type: object
      properties:
        key:
          maxLength: 254
          minLength: 1
          type: string
        value:
          maxLength: 254
          pattern: "^(?:[\\w\\-+=.:/@ ]*)$"
          type: string
      description: "Key and value pair defined with the widely adopted name, tag."
    TerraformProvider:
      title: Provider
      required:
      - abbreviation
      - canonical
      - cloud
      - name
      - schema
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
        abbreviation:
          type: string
        cloud:
          type: boolean
        schema:
          type: object
          properties: {}
      description: Provider of infrastructure
    TerraformProviderSimple:
      title: TerraformProviderSimple
      required:
      - abbreviation
      - canonical
      - cloud
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
        abbreviation:
          type: string
        cloud:
          type: boolean
      description: Provider of infrastructure without the config
    TerraformProviderResource:
      title: Resource
      required:
      - attributes
      - canonical
      - category
      - description
      - is_edge
      - is_node
      - keywords
      - schema
      - short_description
      type: object
      properties:
        canonical:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
        schema:
          type: object
          properties: {}
        is_node:
          type: boolean
        is_edge:
          type: boolean
        image:
          type: string
          format: uri
        category:
          type: string
        short_description:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/TerraformProviderResourceAttributes'
      description: A Resource of a Provider
    TerraformProviderResourceAttributes:
      title: ResourceAttributes
      type: object
      properties:
        important:
          type: array
          items:
            type: string
        status:
          type: string
        normalized_status:
          type: object
          properties: {}
          description: "Is a KV where the K is the resource possible value and the\
            \ Value is the normalized value of it. The current possible values are\
            \ \"unknown\", \"pending\", \"running\", \"stopping\""
      description: Holds specific logic of some attributes
    TerraformProviderResourceSimple:
      title: ResourceSimple
      required:
      - attributes
      - canonical
      - category
      - description
      - is_edge
      - is_node
      - keywords
      - short_description
      type: object
      properties:
        canonical:
          minLength: 3
          pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
          type: string
        is_node:
          type: boolean
        is_edge:
          type: boolean
        image:
          type: string
          format: uri
        short_description:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        category:
          type: string
        keywords:
          type: array
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/TerraformProviderResourceAttributes'
      description: A Resource of a Provider without the config
    TerraformJSONConfig:
      title: TerraformJSONConfig
      required:
      - config
      type: object
      properties:
        config:
          type: object
          properties: {}
      description: The JSON config for Terraform
    TerraformHCLConfig:
      title: TerraformHCLConfig
      required:
      - config
      type: object
      properties:
        config:
          type: string
      description: The HCL config for Terraform
    TerraformValidationResult:
      title: TerraformValidationResult
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      description: "The result of the validation, if errors is empty means that is\
        \ correct"
    TerraformJSONDiagram:
      title: TerraformDiagram
      type: object
      description: The JSON Diagram structure
    TerraformImage:
      title: TerraformImage
      required:
      - image
      type: object
      properties:
        image:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
      description: The Image from the TF structure
    UserEmail:
      title: User email address
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
      description: The user's email address
    UserGuide:
      title: User guide JSON schema
      type: object
      description: The user's guide progress JSON schema
    Infrastructure:
      title: Infrastructure
      required:
      - config
      - graph
      type: object
      properties:
        graph:
          $ref: '#/components/schemas/InfrastructureGraph'
        config:
          $ref: '#/components/schemas/InfrastructureConfig'
      description: Holds all the Infrastructure of the project in an environment
    InfrastructureConfig:
      title: InfrastructureConfig
      type: object
      description: Holds all the Infrastructure config of the TFState
    InfrastructureGraph:
      title: InfrastructureGraph
      required:
      - edges
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/InfrastructureGraphNode'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/InfrastructureGraphEdge'
      description: Holds all the Infrastructure of the project in an environment in
        Graph format
    InfrastructureGraphNode:
      title: Infrastructure
      required:
      - canonical
      - id
      - position
      - resource
      type: object
      properties:
        id:
          type: string
        canonical:
          type: string
        position:
          type: array
          description: "It holds [x,y]"
          items:
            type: integer
            format: uint64
        resource:
          $ref: '#/components/schemas/TerraformProviderResourceSimple'
      description: Holds the information of a Node of the Graph
    InfrastructureGraphEdge:
      title: Infrastructure
      required:
      - canonicals
      - id
      - source
      - target
      type: object
      properties:
        id:
          type: string
        source:
          type: string
        target:
          type: string
        canonicals:
          type: array
          items:
            type: string
      description: Holds the information of an Edge of the Graph
    Summary:
      title: Summary of the organization
      required:
      - config_repositories
      - credentials
      - pipelines
      - projects
      - roles
      - service_catalog_sources
      - service_catalogs
      - teams
      - users
      type: object
      properties:
        projects:
          type: integer
          format: uint64
        pipelines:
          type: integer
          format: uint64
        credentials:
          type: integer
          format: uint64
        service_catalog_sources:
          type: integer
          format: uint64
        config_repositories:
          type: integer
          format: uint64
        teams:
          type: integer
          format: uint64
        users:
          type: integer
          format: uint64
        roles:
          type: integer
          format: uint64
        service_catalogs:
          type: integer
          format: uint64
    APIKey:
      title: API key
      required:
      - canonical
      - id
      - last_seven
      - name
      - rules
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        token:
          type: string
          description: "The actual API key in the format of JWT token, returned only\
            \ upon creation."
        last_seven:
          type: string
          description: The last seven characters of API key. Allows user to differentiate
            between keys.
        id:
          $ref: '#/components/schemas/ID'
        owner:
          $ref: '#/components/schemas/User'
        last_used:
          type: integer
          description: This field contains the date of the last usage of the API key
          format: uint64
      description: "The entity which represents the information of an API key. The\
        \ \"token\" field is only filled once, upon creation"
    NewAPIKey:
      title: Create API key
      required:
      - name
      - rules
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NewRule'
        owner:
          type: string
          description: |
            User canonical that owns this API key. If omitted then the person creating this
            credential will be assigned as owner. When a user is the owner of an API key he has
            all the permissions on it.
      description: The entity which represents the information of a new API key.
    UpdateAPIKey:
      title: Update API key
      required:
      - name
      type: object
      properties:
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        owner:
          type: string
          description: |
            User canonical that owns this API key. Only the owner or an
            organization admin can update such a field. When a user is the owner
            of a API key it has all the permission on it.
      description: "The entity which represents the information of the API key to\
        \ be updated. \nThe API key rules are immutable and cannot be changed.\n"
    InfraPolicy:
      title: InfraPolicy
      required:
      - body
      - canonical
      - created_at
      - description
      - enabled
      - id
      - name
      - severity
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created_at:
          type: integer
          format: uint64
        updated_at:
          type: integer
          format: uint64
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        canonical:
          $ref: '#/components/schemas/Canonical'
        owner:
          $ref: '#/components/schemas/User'
        body:
          type: string
          description: The body field is the code in plain text that defines the rules
            for the policy.
        severity:
          type: string
          description: |
            It defines the enforcement level. It must be used from the caller of the InfraPolicy
            validation endpoint to apply the specific logic in case of not respected InfraPolicies.
            Uses critical to block the changes.
            Uses warning to block the changes but allow to override manually.
            Uses advisory to allow them but a notification must be send.
          enum:
          - critical
          - warning
          - advisory
        enabled:
          type: boolean
      description: The policy to control operations across infrastructure.
    NewInfraPolicy:
      title: Create InfraPolicy
      required:
      - body
      - name
      - owner
      - severity
      type: object
      properties:
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        canonical:
          $ref: '#/components/schemas/Canonical'
        owner:
          $ref: '#/components/schemas/Canonical'
        body:
          type: string
          description: The body field is the code in plain text that defines the rules
            for the policy.
        severity:
          type: string
          enum:
          - critical
          - warning
          - advisory
        enabled:
          type: boolean
      description: Create a new policy to control operations across infrastructure.
    UpdateInfraPolicy:
      title: Update InfraPolicy
      required:
      - body
      - description
      - enabled
      - name
      - owner
      - severity
      type: object
      properties:
        name:
          minLength: 3
          type: string
        description:
          $ref: '#/components/schemas/Description'
        owner:
          $ref: '#/components/schemas/Owner'
        body:
          type: string
          description: The body field is the code in plain text that defines the rules
            for the policy.
        severity:
          type: string
          enum:
          - critical
          - warning
          - advisory
        enabled:
          type: boolean
      description: Update a policy to control operations across infrastructure.
    InfraPoliciesValidationResult:
      title: Infra policies validation results.
      type: object
      properties:
        criticals:
          type: array
          items:
            $ref: '#/components/schemas/InfraPoliciesValidationResultItem'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/InfraPoliciesValidationResultItem'
        advisories:
          type: array
          items:
            $ref: '#/components/schemas/InfraPoliciesValidationResultItem'
      description: The set of not respected rules for the checked policies.
    InfraPoliciesValidationResultItem:
      required:
      - infra_policy
      type: object
      properties:
        infra_policy:
          $ref: '#/components/schemas/InfraPolicy'
        reasons:
          type: array
          description: |
            The messages about the reason of the validation failure
            that's written in the InfraPolicy's Body of the failed rule.
          items:
            type: string
      description: |
        InfraPoliciesValidationResultItem represents a checked rule
        with a failed result generated from the validation process.
    Subscription:
      title: Subscription
      required:
      - expires_at
      - plan
      type: object
      properties:
        expires_at:
          minimum: 0
          type: integer
          format: uint64
        plan:
          $ref: '#/components/schemas/SubscriptionPlan'
        members_count:
          minimum: 0
          type: integer
          format: uint64
        current_members:
          minimum: 0
          type: integer
          format: uint64
      description: |
        It reflects the relation between an Organization and a Plan which
        could be the Free Trial or others, for more info check https://www.cycloid.io/pricing
    NewSubscription:
      title: New Subscription
      required:
      - plan_canonical
      type: object
      properties:
        plan_canonical:
          $ref: '#/components/schemas/Canonical'
      description: It reflects the creation of a Subscription
    SubscriptionPlan:
      title: SubscriptionPlan
      required:
      - canonical
      - name
      type: object
      properties:
        name:
          minLength: 3
          type: string
        canonical:
          $ref: '#/components/schemas/Canonical'
      description: It reflects the Plan used for the subscription
    Invitation:
      title: Invitation
      required:
      - created_at
      - email
      - id
      - role
      - state
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        email:
          type: string
          format: email
        state:
          type: string
          enum:
          - pending
          - accepted
          - declined
        role:
          $ref: '#/components/schemas/Role'
        invitee:
          $ref: '#/components/schemas/UserAccount'
        invited_by:
          $ref: '#/components/schemas/MemberOrg'
        resent_at:
          minimum: 0
          type: integer
          format: uint64
      description: It represents an Invitation to join an Organization.
    PendingInvite:
      title: PendingInvite
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
      description: Contains the email used for the invitation
    CanDoInput:
      title: CanDoInput
      required:
      - action
      - entity_canonicals
      type: object
      properties:
        action:
          type: string
        entity_canonicals:
          type: array
          description: List of the canonicals to the Resource excluding the Organization
          items:
            type: string
      description: The input of the 'can_do' endpoint
    CanDoOutput:
      title: CanDoOutput
      required:
      - ok
      type: object
      properties:
        ok:
          type: boolean
        entity_canonicals:
          type: array
          items:
            type: string
      description: The output of the 'can_do' endpoint
    CostEstimationResult:
      title: CostEstimationResult
      required:
      - resource_estimates
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: Name of the current estimation
        info:
          type: string
          description: "Extra details regarding estimation - usually related to no\
            \ known resources, unknown providers, etc."
        resource_estimates:
          type: array
          items:
            $ref: '#/components/schemas/CostEstimationResourceEstimate'
        skipped_resource_addresses:
          type: array
          description: |
            A list of addresses of resources that were skipped from the estimation process. A resource might be skipped
            due to being invalid or unsupported by Terracost.
          items:
            type: string
        prior_cost:
          type: string
          description: Prior monthly cost of the plan in decimal form.
        planned_cost:
          type: string
          description: Planned monthly cost of the plan in decimal form.
        prior_hourly_cost:
          type: string
          description: Prior hourly cost of the plan in decimal form.
        planned_hourly_cost:
          type: string
          description: Planned hourly cost of the plan in decimal form.
      description: The result of cost estimation.
    CostEstimationResourceEstimate:
      title: CostEstimationResourceEstimate
      required:
      - address
      - components
      - provider
      - type
      type: object
      properties:
        provider:
          type: string
          description: The resource's cloud provider.
        type:
          type: string
          description: Type of the resource.
        address:
          type: string
          description: Unique identifier of the resource.
        image:
          type: string
          description: Path to the image of the resource
          format: uri
        components:
          type: array
          description: List of resource cost components.
          items:
            $ref: '#/components/schemas/CostEstimationComponent'
        prior_cost:
          type: string
          description: Prior monthly cost of the resource estimate in decimal form.
        planned_cost:
          type: string
          description: Planned monthly cost of the resource estimate in decimal form.
        prior_hourly_cost:
          type: string
          description: Prior hourly cost of the resource estimate in decimal form.
        planned_hourly_cost:
          type: string
          description: Planned hourly cost of the resource estimate in decimal form.
      description: Estimate for a single cloud resource.
    CostEstimationComponent:
      title: CostEstimationComponent
      required:
      - label
      - rate
      type: object
      properties:
        label:
          type: string
          description: Human-readable label of the component.
        rate:
          type: string
          description: Monthly rate per unit.
        unit:
          type: string
          description: Unit of estimation.
        usage:
          type: boolean
          description: If the price is from usage or configuration
        prior:
          $ref: '#/components/schemas/CostEstimationComponentState'
        planned:
          $ref: '#/components/schemas/CostEstimationComponentState'
      description: Cost component of a cloud resource estimate.
    CostEstimationComponentState:
      title: CostEstimationComponentState
      required:
      - cost
      - details
      - hourly_cost
      - quantity
      type: object
      properties:
        quantity:
          type: integer
          description: Quantity of units.
          format: uint32
        details:
          type: array
          description: List of items on which the cost is dependent.
          items:
            type: string
        cost:
          type: string
          description: Monthly cost of the component state in decimal form.
        hourly_cost:
          type: string
          description: Hourly cost of the component state in decimal form.
      description: Either a Prior or Planned cost component state.
    CloudCostManagementProjectResources:
      title: CloudCostManagementProjectResources
      required:
      - cost
      - project
      - providers
      type: object
      properties:
        cost:
          type: number
          description: Cost for the project in the period
        project:
          type: string
        providers:
          type: array
          items:
            $ref: '#/components/schemas/CloudCostManagementProjectProviderResources'
      description: |
        The new resources and associated cost for a project in a period of time.
    CloudCostManagementProjectProviderResources:
      title: CloudCostManagementProjectProviderResources
      required:
      - co2e
      - cost
      - kwh
      - new_resources
      - provider
      - resources
      type: object
      properties:
        cost:
          type: number
          description: Cost of the project for the provider
        kwh:
          type: number
          description: "Energy consumption for the project and provider, in kwh"
        co2e:
          type: number
          description: "CO2e emissions for the project and provider, in metric tons"
        provider:
          type: string
        resources:
          type: integer
        new_resources:
          type: integer
      description: |
        Trend for a project
    CloudCostManagementDashboard:
      title: CloudCostManagementDashboard
      required:
      - filter_values
      - project_resources
      - projects
      - providers
      type: object
      properties:
        total_cost:
          type: number
        total_kwh:
          type: number
        total_co2e:
          type: number
        providers:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
        projects:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
        project_resources:
          type: array
          items:
            $ref: '#/components/schemas/CloudCostManagementProjectResources'
        filter_values:
          $ref: '#/components/schemas/CloudCostManagementFilterValues'
      description: "The dashboard of the Cloud Cost Management, it contains\n- a histogram\
        \ of the cost in the period aggregated by provider and\n  by time granularity\n\
        - a histogram of the cost aggregated by the top projects and providers\n \
        \ and filtered by the top projects\n- a list of resources and relative cost\
        \ for each top projects\n- a map containing  properties that can be specified\
        \ filtering the \n  returned results, with a set of valid values for each.\n"
    CloudCostManagementProviderDetails:
      title: CloudCostManagementProviderDetails
      required:
      - cost_histogram
      type: object
      properties:
        cost_histogram:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
        filter_values:
          $ref: '#/components/schemas/CloudCostManagementFilterValues'
      description: |
        Description of the costs of a specific provider
    CloudCostManagementProjectsDashboard:
      title: CloudCostManagementProjectsDashboard
      required:
      - project_providers
      - projects
      type: object
      properties:
        project_providers:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
        projects:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
      description: "The projects dashboard of the Cloud Cost Management, it contains\n\
        - a histogram of the cost aggregated by date and project \n- a histogram of\
        \ cost aggregated by projects and providers\n"
    CloudCostManagementProviders:
      title: CloudCostManagementProviders
      required:
      - cost_histogram
      type: object
      properties:
        cost_histogram:
          $ref: '#/components/schemas/CloudCostManagementHistogram'
      description: |
        Date histogram of the cost of all the providers
    CloudCostManagementHistogram:
      title: CloudCostManagementHistogram
      required:
      - buckets
      - co2e
      - cost
      - kwh
      type: object
      properties:
        cost:
          type: number
          description: The total cost for the period.
        kwh:
          type: number
          description: "The total energy consumption for the period, in kwh."
        co2e:
          type: number
          description: "The total CO2e emissions for the period, in metric tons."
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/CloudCostManagementBucket'
      description: The histogram of the costs for a period composed of buckets that
        aggregate the costs.
    CloudCostManagementBucket:
      title: CloudCostManagementBucket
      required:
      - co2e
      - cost
      - kwh
      - value
      type: object
      properties:
        cost:
          type: number
        value:
          type: string
          description: "The value of the aggregation term, for example if we aggregate\
            \ cost \nby region aggregate_value can be us-east-2, if we aggregate by\
            \ project\nthis can be cool_project_number_42, by service can be S3 or\
            \ EC2, etc..\n"
        kwh:
          type: number
          description: "The total energy consumption for the aggregated usage, in\
            \ kwh"
        co2e:
          type: number
          description: "The total CO2e emissions for the aggregated usage, in metric\
            \ tons."
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/CloudCostManagementBucket'
      description: "A sum of the cost generated in a period aggregated by one or more\
        \ terms,\nfor example if we aggregate costs by project here we have all the\
        \ cost \ngenerated by a specific project in the period of time defined by\
        \ the \nfilters of the histogram.  In case the filter specifies more than\
        \ one \naggregation term this type will recursively contain the other levels\
        \ of \naggregation.\n"
    CloudCostManagementFilterValues:
      title: CloudCostManagementFilterValues
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        projects:
          type: array
          items:
            type: string
        environments:
          type: array
          items:
            type: string
        services:
          type: array
          items:
            type: string
        master_accounts:
          type: array
          items:
            type: string
        linked_accounts:
          type: array
          items:
            type: string
        regions:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: string
        instance_types:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        currencies:
          type: array
          items:
            type: string
        tags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      description: |
        A collection of the values for which the cost can be filtered, i.e. all
        the providers, services, regions, etc... for one org.
    TerraformPlanInput:
      title: TerraformPlanInput
      required:
      - tfplan
      type: object
      properties:
        tfplan:
          type: string
          description: "Terraform plan file in escaped JSON format. See more: https://www.terraform.io/internals/json-format"
      description: Input for endpoints that require a Terraform plan.
    KPI:
      title: KPI
      required:
      - canonical
      - config
      - created_at
      - description
      - error
      - id
      - name
      - type
      - updated_at
      - widget
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          minLength: 3
          type: string
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - build_avg_time
          - build_frequency
          - build_history
          - code_coverage
          - time_to_release
        widget:
          type: string
          enum:
          - bars
          - stackbars
          - doughnut
          - history
          - line
          - pie
          - summary
        config:
          type: object
          properties: {}
          description: |
            The config represent some extra parameters which are required for the configuration of certain KPIs. Please refer to the documentation for more details.
        description:
          $ref: '#/components/schemas/Description'
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        pipeline_name:
          type: string
        job_name:
          type: string
        error:
          type: string
          description: "If an error occurred in the last import, that field will be\
            \ filled with the message of the error"
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        data_set:
          type: array
          description: "The data is represented in CSV format. Depending on the widget\
            \ configured for the KPI, the format may vary. For more information please\
            \ refer to our product documentation."
          items:
            type: object
            properties: {}
        favorite:
          type: boolean
      description: A KPI
    NewKPI:
      title: New KPI
      required:
      - name
      - type
      - widget
      type: object
      properties:
        name:
          minLength: 3
          type: string
        canonical:
          $ref: '#/components/schemas/Canonical'
        type:
          type: string
          enum:
          - build_avg_time
          - build_frequency
          - build_history
          - code_coverage
          - time_to_release
        widget:
          type: string
          enum:
          - bars
          - stackbars
          - doughnut
          - history
          - line
          - pie
          - summary
        config:
          type: object
          properties: {}
          description: |
            The config represent some extra parameters which are required for the configuration of certain KPIs. Please refer to the documentation for more details.
        description:
          $ref: '#/components/schemas/Description'
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
        pipeline_name:
          type: string
        job_name:
          type: string
      description: A KPI's configuration that needs to be saved
    Country:
      title: Country
      required:
      - code
      - name
      type: object
      properties:
        code:
          pattern: "^[A-Z]{2}$"
          type: string
        name:
          $ref: '#/components/schemas/Name'
      description: Single country Representation
    NewLicence:
      title: Licence
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: Licence's key in the JWT format
      description: Object containing licence parameters
    Licence:
      title: Licence
      required:
      - company_name
      - created_at
      - current_members
      - email_address
      - expires_at
      - key
      - members_count
      - on_prem
      - updated_at
      - version
      type: object
      properties:
        key:
          type: string
          description: Licence's key in the JWT format
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        company_name:
          type: string
        email_address:
          type: string
        members_count:
          minimum: 0
          type: integer
          format: uint64
        expires_at:
          minimum: 0
          type: integer
          format: uint64
        version:
          type: string
        on_prem:
          type: boolean
        current_members:
          minimum: 0
          type: integer
          format: uint64
      description: Object containing licence parameters
    NewInfraImport:
      title: New Infra Import
      required:
      - configuration
      - credential_canonical
      - stack
      type: object
      properties:
        module_variables:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: It's a KV where the key is the resource name and the value
            is the list (array) of attributes to include as part of the module
        tags:
          type: array
          description: List of tags to filter with format NAME:VALUE
          items:
            type: string
        include:
          type: array
          description: "List of resources to import, these names are the ones on TF\
            \ (ex: aws_instance). If not set then it means that all the resources\
            \ will be imported"
          items:
            type: string
        targets:
          type: array
          description: "List of resources to import via ID, those IDs are the ones\
            \ documented on Terraform that are needed to Import. The format is 'aws_instance.ID'"
          items:
            type: string
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        stack:
          $ref: '#/components/schemas/NewServiceCatalog'
        project:
          $ref: '#/components/schemas/NewInfraImportProject'
        environment:
          $ref: '#/components/schemas/NewEnvironment'
        external_backend:
          $ref: '#/components/schemas/NewInfraImportExternalBackend'
        configuration:
          $ref: '#/components/schemas/CloudProviderConfiguration'
      description: Entry that represents all the data needed to import a stack
    InfraImportResourceBody:
      title: Provider Resources body
      required:
      - configuration
      - credential_canonical
      type: object
      properties:
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        configuration:
          $ref: '#/components/schemas/CloudProviderConfiguration'
        tags:
          type: array
          items:
            type: string
      description: Entry that represents all the data needed for fetching resource
    InfraImportResourcesBody:
      title: Provider's Resources body
      required:
      - configuration
      - credential_canonical
      type: object
      properties:
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        configuration:
          $ref: '#/components/schemas/CloudProviderConfiguration'
      description: Entry that represents all the data needed for fetching resources
    CloudProviderConfiguration:
      required:
      - type
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
    CloudProviderAWSConfiguration:
      description: |
        Representation of AWS configuration
      allOf:
      - $ref: '#/components/schemas/CloudProviderConfiguration'
      - required:
        - region
        type: object
        properties:
          region:
            type: string
            description: |
              The AWS region where the resource exists
    CloudProviderGCPConfiguration:
      description: |
        Representation of Google configuration
      allOf:
      - $ref: '#/components/schemas/CloudProviderConfiguration'
      - required:
        - project
        - region
        type: object
        properties:
          region:
            type: string
            description: |
              The Google region where the resource exists
          project:
            type: string
            description: |
              The Google project where the resource exists
    CloudProviderAzureConfiguration:
      description: |
        Representation of Azure configuration
      allOf:
      - $ref: '#/components/schemas/CloudProviderConfiguration'
      - required:
        - environment
        - resource_group_names
        type: object
        properties:
          resource_group_names:
            minItems: 1
            type: array
            description: |
              The Azure resource group name of the configuration
            items:
              type: string
          environment:
            type: string
            description: |
              The Azure environment of the configuration
    CloudProviderVMWareVSphereConfiguration:
      description: |
        Representation of VMware vSphere configuration
      allOf:
      - $ref: '#/components/schemas/CloudProviderConfiguration'
      - required:
        - allow_unverified_ssl
        - server
        type: object
        properties:
          server:
            type: string
            description: "This is the vCenter Server FQDN or IP Address for vSphere\
              \ API operations \n"
          allow_unverified_ssl:
            type: boolean
            description: |
              Used to disable verification of server's SSL certificate.
    NewInfraImportProject:
      title: Create Project for the Infra Import
      required:
      - config_repository_canonical
      - name
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          minLength: 1
          type: string
        description:
          $ref: '#/components/schemas/Description'
        config_repository_canonical:
          $ref: '#/components/schemas/Canonical'
      description: The entity which represents the information of a new project.
    NewInfraImportExternalBackend:
      title: New External backend
      required:
      - configuration
      type: object
      properties:
        credential_canonical:
          $ref: '#/components/schemas/Canonical'
        aws_storage:
          $ref: '#/components/schemas/AWSStorage'
        gcp_storage:
          $ref: '#/components/schemas/GCPStorage'
        swift_storage:
          $ref: '#/components/schemas/SwiftStorage'
      description: "An external backend contains the configuration needed in order\
        \ to be plugged into the Cycloid system. A backend is a general purpose concept,\
        \ but Cycloid specifies which ones are supported and the list of those which\
        \ are supported for every concrete feature."
    InfraImport:
      title: Infra Import
      required:
      - error
      - logs
      - service_catalog_ref
      - status
      type: object
      properties:
        status:
          type: string
          description: The import process status.
          enum:
          - succeeded
          - failed
          - importing
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        service_catalog_ref:
          type: string
          description: "It's the ref of the Service Catalog, like 'cycloidio:stack-magento'"
        logs:
          type: string
        error:
          type: string
      description: |
        The entity which represents the information of for the import of a new Stack or Project.
    InfraImportPreset:
      title: InfraImportPreset
      required:
      - name
      - resources
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        resources:
          type: array
          items:
            type: string
      description: |
        Infra Import's pre-configured group with Resources commonly used together in a specific context.
    InfraImportResource:
      title: Infra Import Resource
      required:
      - id
      type: object
      properties:
        id:
          type: string
      description: |
        The representation of the Infra Import's Resource of a Cloud Provider.
    CloudCostManagementAccount:
      title: CloudCostManagementAccount
      required:
      - account_id
      - canonical
      - cloud_provider
      - created_at
      - enabled
      - id
      - name
      - status
      - updated_at
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        account_id:
          type: string
          description: The ID of an account on the CP
        parent_account_id:
          type: string
          description: The ID of the parent account on the CP
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        last_ingestion_started_at:
          minimum: 0
          type: integer
          format: uint64
        last_ingestion_ended_at:
          minimum: 0
          type: integer
          format: uint64
        id:
          $ref: '#/components/schemas/ID'
        external_backend:
          $ref: '#/components/schemas/ExternalBackend'
        credential:
          $ref: '#/components/schemas/CredentialSimple'
        status:
          type: string
          enum:
          - idle
          - error
          - import
        status_message:
          type: string
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider'
        enabled:
          type: boolean
        phase:
          type: string
          enum:
          - green
          - blue
        unfinalized_period:
          type: string
      description: Object containing Cloud Cost Management account parameters
    CloudCostManagementAccountParent:
      title: CloudCostManagementAccountParent
      required:
      - account_id
      - canonical
      - cloud_provider
      - created_at
      - enabled
      - id
      - name
      - status
      - updated_at
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        account_id:
          type: string
          description: The ID of an account on the CP
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        last_ingestion_started_at:
          minimum: 0
          type: integer
          format: uint64
        last_ingestion_ended_at:
          minimum: 0
          type: integer
          format: uint64
        id:
          $ref: '#/components/schemas/ID'
        status:
          type: string
          enum:
          - idle
          - error
          - import
        status_message:
          type: string
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider'
        enabled:
          type: boolean
      description: |
        Object containing Cloud Cost Management parent account parameters. The difference
        between it and CloudCostManagementAccount is that parent has no EB/Credential
        displayed, as it's not necessary
    CloudCostManagementLinkedAccount:
      title: CloudCostManagementLinkedAccount
      required:
      - account_id
      - cloud_provider
      - id
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account_id:
          type: string
          description: ID of the account in the cloud provider
        name:
          $ref: '#/components/schemas/Name'
        cloud_provider:
          type: string
          description: |
            The cloud provider canonical that this project is using - between the
            supported ones.
      description: |
        An account that is linked to a Cloud Cost Management account in the cloud
        provider. It is not managed by Cloud Cost Management, but appears in the cost records.
    UpdateCloudCostManagementLinkedAccount:
      title: Update CloudCostManagementLinkedAccount
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
      description: "Attributes of a CCM linked accout that can be updated by a user.\
        \ \n"
    NewCloudCostManagementAccount:
      title: Create CloudCostManagementAccount
      required:
      - external_backend
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        external_backend:
          $ref: '#/components/schemas/NewExternalBackend'
      description: |
        Create a new Cloud Cost Management account to connect CP.
        If a canonical is missing, the one from credential will be applied
    NewCloudCostManagementAccountChild:
      title: Create CloudCostManagementAccountChild
      required:
      - credential_canonical
      - parent_account_id
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        parent_account_id:
          type: string
          description: The ID of the parent account on the CP
        credential_canonical:
          type: string
          description: Canonical of  the credentials used
      description: "Create a new Cloud Cost Management Child account. This count has\
        \ no \nExternalBackend since it is not ingesting data.\nIf a canonical is\
        \ missing, the one from credential will be applied\n"
    UpdateCloudCostManagementAccount:
      title: Update CloudCostManagementAccount
      required:
      - enabled
      - external_backend
      type: object
      properties:
        enabled:
          type: boolean
        name:
          $ref: '#/components/schemas/Name'
        external_backend:
          $ref: '#/components/schemas/UpdateExternalBackend'
      description: Update a Cloud Cost Management account to connect CP.
    CloudCostManagementTagMapping:
      title: CloudCostManagementTagMapping
      required:
      - created_at
      - id
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        project_tags:
          type: array
          items:
            type: string
        project_regex:
          type: string
        environment_tags:
          type: array
          items:
            type: string
        environment_regex:
          type: string
        all_tags:
          type: array
          description: This is a list of all the tag keys in the DB for the Org
          items:
            type: string
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: "Object containing Cloud Cost Management tag mapping. The mapping\
        \ is used to \nidentify resources belonging to projects and environments across\
        \ cloud\nproviders. The mapping can be a set of tag keys or a regexp to capture\n\
        tag keys.\n"
    UpdateCloudCostManagementTagMapping:
      title: Create or Update CloudCostManagementTagMapping
      type: object
      properties:
        project_tags:
          type: array
          items:
            type: string
        project_regex:
          type: string
        environment_tags:
          type: array
          items:
            type: string
        environment_regex:
          type: string
      description: Create or Update a Cloud Cost Management tag mapping for projects
        and environments
    State:
      title: State
      type: object
      properties:
        terraform_version:
          type: string
        version:
          type: integer
          format: uint32
        serial:
          type: integer
          format: uint32
        lineage:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/StateResource'
        outputs:
          type: object
          properties: {}
      description: The State of an Inventory of the Project's environment
    StateResource:
      title: State Resource
      type: object
      properties:
        provider:
          type: string
        type:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        module:
          type: string
        mode:
          type: string
        instances:
          type: array
          items:
            $ref: '#/components/schemas/StateResourceInstances'
        image:
          type: string
          description: Image of the resource type
          format: uri
        category:
          type: string
          description: Category of the resource type
        short_description:
          type: string
          description: Short description of the resource type documentation
        description:
          $ref: '#/components/schemas/Description'
        keywords:
          type: array
          description: Set of keywords to categorize the resource type
          items:
            type: string
        project_canonical:
          type: string
          description: Project canonical in which this resource is used
      description: The Resource of a State in the Inventory of the Project's environment
    StateResourceInstances:
      title: State Resource Instances
      type: object
      properties:
        attributes:
          type: object
          properties: {}
        custom_attributes:
          type: object
          properties: {}
      description: The Instances inside Resources of a State in the Inventory of the
        Project's environment
    StateLock:
      title: State Lock
      type: object
      properties:
        id:
          type: string
        operation:
          type: string
        info:
          type: string
        who:
          type: string
        version:
          type: string
        created:
          type: string
      description: The Lock management of a State in the Inventory of the Project's
        environment
    NewInventoryResource:
      title: New Inventory Resource
      required:
      - label
      - name
      - provider
      - type
      type: object
      properties:
        provider:
          type: string
          description: The provider of the created Resource
        type:
          type: string
          description: The type of the resource
        name:
          $ref: '#/components/schemas/Name'
        custom_attributes:
          type: object
          properties: {}
          description: "List of attributes (key value object) of the Resource, can\
            \ be anything"
          example:
            custom: attribute
            another: one
        label:
          type: string
          description: A way to distinguish and categorize resources
          example: my-label
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu cores that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
      description: The Resource of the Inventory representing an element of your infrastructure
    InventoryResource:
      title: Inventory Resource
      required:
      - name
      - provider
      - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        provider:
          type: string
          description: The provider of the created Resource
        type:
          type: string
          description: The type of the resource
        name:
          $ref: '#/components/schemas/Name'
        mode:
          type: string
          description: The way this resource is handled
        module:
          type: string
          description: The module it belongs to
        custom_attributes:
          type: object
          properties: {}
          description: "List of attributes of the Resource, can be anything"
        label:
          type: string
          description: A way to distinguish and categorize resources
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
        attributes:
          type: object
          properties: {}
        image:
          type: string
          description: Image of the resource type
          format: uri
        category:
          type: string
          description: Category of the resource type
        short_description:
          type: string
          description: Short description of the resource type documentation
        description:
          $ref: '#/components/schemas/Description'
        keywords:
          type: array
          description: Set of keywords to categorize the resource type
          items:
            type: string
        project_canonical:
          $ref: '#/components/schemas/ProjectCanonical'
        environment_canonical:
          $ref: '#/components/schemas/EnvironmentCanonical'
      description: The Resource of the Inventory representing an element of your infrastructure
    InventoryResourceLabel:
      title: Inventory Resource Label
      required:
      - cpu
      - memory
      - name
      - storage
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        memory:
          minimum: 0
          type: integer
          description: The aggregated amount of memory of resources having the label
            in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The aggregated amount of cpu of resources having the label
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The aggregated amount of storage of resources having the label
            in MB
          format: uint64
      description: Aggregated information of resources having a label
    NewResourcePool:
      title: New Resource Pool
      required:
      - label
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        label:
          type: string
      description: The Resource Pool defines the basic needs to create/update a resource
        pool
    ResourcePool:
      title: Resource Pool
      required:
      - allocated_cpu
      - allocated_memory
      - allocated_storage
      - canonical
      - cpu
      - label
      - memory
      - name
      - storage
      - used_cpu
      - used_memory
      - used_storage
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          $ref: '#/components/schemas/Name'
        canonical:
          $ref: '#/components/schemas/Canonical'
        label:
          type: string
          description: The label to which match the resources
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
        used_memory:
          minimum: 0
          type: integer
          description: The amount of memory that is used in MB
          format: uint64
        used_cpu:
          minimum: 0
          type: integer
          description: The amount of CPU that is used in units
          format: uint64
        used_storage:
          minimum: 0
          type: integer
          description: The amount of Storage that is used in MB
          format: uint64
        allocated_memory:
          minimum: 0
          type: integer
          description: The amount of memory that is allocated (quotas defined) in
            MB
          format: uint64
        allocated_cpu:
          minimum: 0
          type: integer
          description: The amount of CPU that is allocated (quotas defined) in units
          format: uint64
        allocated_storage:
          minimum: 0
          type: integer
          description: The amount of Storage that is allocated (quotas defined) in
            MB
          format: uint64
      description: A Resource Pool holds the information of all the Resources that
        have the same label. The Used is the amount used by Projects using Quotas
        and Allocated is the amount declared by Quotas
    NewQuota:
      title: New Quota
      required:
      - cpu
      - memory
      - resource_pool_canonical
      - storage
      - team_canonical
      type: object
      properties:
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
        resource_pool_canonical:
          $ref: '#/components/schemas/Canonical'
        team_canonical:
          $ref: '#/components/schemas/Canonical'
      description: The Quota defines the basic needs to create a quota
    UpdateQuota:
      title: Update Quota
      required:
      - cpu
      - memory
      - storage
      type: object
      properties:
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
      description: The Quota defines the basic needs to update a create
    Quota:
      title: Quota
      required:
      - cpu
      - id
      - memory
      - resource_pool
      - storage
      - team
      - used_cpu
      - used_memory
      - used_storage
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
        used_memory:
          minimum: 0
          type: integer
          description: The amount of memory that is used in MB
          format: uint64
        used_cpu:
          minimum: 0
          type: integer
          description: The amount of CPU that is used in units
          format: uint64
        used_storage:
          minimum: 0
          type: integer
          description: The amount of Storage that is used in MB
          format: uint64
        team:
          $ref: '#/components/schemas/SimpleTeam'
        resource_pool:
          $ref: '#/components/schemas/ResourcePool'
      description: A Quota holds the information of the restrictions applied to a
        Team having as source a Resource Pool
    ProjectEnvironmentConsumption:
      title: ProjectEnvironmentConsumption
      required:
      - cpu
      - environment
      - id
      - memory
      - project
      - storage
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        memory:
          minimum: 0
          type: integer
          description: The amount of memory that it has in MB
          format: uint64
        cpu:
          minimum: 0
          type: integer
          description: The amount of cpu that it has in units
          format: uint64
        storage:
          minimum: 0
          type: integer
          description: The amount of storage that it has in MB
          format: uint64
        project:
          $ref: '#/components/schemas/ProjectSimple'
        environment:
          $ref: '#/components/schemas/Environment'
      description: The Consumption of a Project in an Environment
    ProjectSimple:
      title: ProjectSimple
      required:
      - canonical
      - created_at
      - id
      - name
      - updated_at
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        description:
          $ref: '#/components/schemas/Description'
        owner:
          $ref: '#/components/schemas/User'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        import_status:
          type: string
          description: The import process status.
          enum:
          - succeeded
          - failed
          - importing
        favorite:
          type: boolean
      description: The entity which represents minimal information of a project.
    Appearance:
      title: Appearance
      required:
      - canonical
      - color
      - display_name
      - favicon
      - footer
      - logo
      - name
      - tab_title
      type: object
      properties:
        canonical:
          $ref: '#/components/schemas/Canonical'
        name:
          $ref: '#/components/schemas/Name'
        display_name:
          maxLength: 50
          minLength: 1
          type: string
        tab_title:
          maxLength: 50
          minLength: 1
          type: string
        color:
          required:
          - b
          - g
          - r
          type: object
          properties:
            r:
              maximum: 255
              minimum: 0
              type: integer
              description: Red color value of the RGB color
              format: uint32
            g:
              maximum: 255
              minimum: 0
              type: integer
              description: Green color value of the RGB color
              format: uint32
            b:
              maximum: 255
              minimum: 0
              type: integer
              description: Blue color value of the RGB color
              format: uint32
        logo:
          type: string
          format: uri
        favicon:
          type: string
          format: uri
        footer:
          maxLength: 1000
          minLength: 0
          type: string
        is_active:
          type: boolean
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      description: "An Appearance holds the values of the branding configuration,\
        \ which are rendered across an organization"
    NewAppearance:
      title: Appearance
      required:
      - color
      - display_name
      - favicon
      - footer
      - logo
      - name
      - tab_title
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        display_name:
          maxLength: 50
          minLength: 1
          type: string
        tab_title:
          maxLength: 50
          minLength: 1
          type: string
        color:
          required:
          - b
          - g
          - r
          type: object
          properties:
            r:
              maximum: 255
              minimum: 0
              type: integer
              description: Red color value of the RGB color
              format: uint32
            g:
              maximum: 255
              minimum: 0
              type: integer
              description: Green color value of the RGB color
              format: uint32
            b:
              maximum: 255
              minimum: 0
              type: integer
              description: Blue color value of the RGB color
              format: uint32
        logo:
          type: string
          format: uri
        favicon:
          type: string
          format: uri
        footer:
          maxLength: 1000
          minLength: 0
          type: string
      description: "An Appearance holds the values of the branding configuration,\
        \ which are rendered across an organization"
    Canonical:
      title: Canonical
      maxLength: 100
      minLength: 3
      pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
      type: string
      description: The canonical of an entity
    ProjectCanonical:
      title: ProjectCanonical
      maxLength: 100
      minLength: 1
      pattern: "(^[a-z0-9]+(([a-z0-9\\-_]+)?[a-z0-9]+)?$)"
      type: string
      description: The canonical of an entity
    EnvironmentCanonical:
      title: EnvironmentCanonical
      maxLength: 100
      minLength: 1
      pattern: "^[\\da-zA-Z]+(?:(?:[\\da-zA-Z\\-._]+)?[\\da-zA-Z])?$"
      type: string
      description: The canonical of an entity
    AppearanceCanonical:
      maxLength: 100
      minLength: 1
      pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
      type: string
    Description:
      title: Description
      type: string
      description: The description of an entity
    Owner:
      type: string
      maxLength: 100
      minLength: 3
      pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
      description: |
        User canonical that owns this entity. If omitted then the person creating this
        entity will be assigned as owner. When a user is the owner of the entity he has
        all the permissions on it.
        In case of API keys, the owner of API key is assigned as an owner. If 
        API key has no owner, then no owner is set for entity as well.
    GitURL:
      pattern: '^((/|~)[^/]*)+.(\.git)|(([\w\]+@[\w\.]+))(:(//)?)([\w\.@\:/\-~]+)(/)?'
      type: string
      description: |
        GitURL represents all git URL formats we accept.
    Branch:
      type: string
      description: Branch needs to be valid git repository branch
    Name:
      type: string
      minLength: 1
      description: The name of an entity
    ID:
      minimum: 1
      type: integer
      format: uint32
      description: ID represents the id of the entity
    CreatedAt:
      minimum: 0
      type: integer
      format: uint64
      description: The time of creation of the entity
    UpdatedAt:
      minimum: 0
      type: integer
      format: uint64
      description: The time of the last update of the entity
    Default:
      type: boolean
      description: Whether the given entity is default one
  responses:
    not_found_entity_in_path:
      description: The response sent when any of the entities present in the path
        is not found.
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - message: Entity not found
              code: NotFoundEntity
    not_enough_permissions:
      description: "The authenticated user cannot perform the operation because, it\
        \ doesn't have permissions for such operation."
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - message: Not enough permissions to perform the operation
              code: Unauthorized
    unexpected_error:
      description: "The response sent when an unexpected error happened, as known\
        \ as an internal server error."
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - message: Server Internal error
              code: Unexpected
    unprocessable_entity:
      description: All the custom errors that are generated from the Cycloid API
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - message: some error
              code: SomeCode
    unauthenticated:
      description: The user cannot be authenticated with the credentials which she/he
        has used.
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - code: Unauthenticated
              message: invalid credentials
    required_content_length_header:
      description: The request has a body but it doesn't have a Content-Length header.
      content: {}
    retry_operation:
      description: The operation couldn't be executed or completed and it should retried.
      headers:
        Retry-After:
          description: The number of seconds to wait until retry the request
          schema:
            type: integer
            format: uint16
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - code: RetryOperation
              message: Operation must be retried.
    locked_state:
      description: The operation couldn't be executed or completed because the state
        is locked.
      headers:
        Content-Length:
          description: The length of the response body in octets (8-bit bytes).
          schema:
            type: integer
            format: uint64
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorPayload'
          example:
            errors:
            - message: some error
              code: SomeCode
  parameters:
    page_index:
      name: page_index
      in: query
      description: The page number to request. The first page is 1.
      schema:
        type: integer
        format: uint32
        default: 1
    page_size:
      name: page_size
      in: query
      description: The number of items at most which the response can have.
      schema:
        type: integer
        format: uint32
        default: 1000
    default:
      name: default
      in: query
      description: Value describing whether to return default
      schema:
        $ref: '#/components/schemas/Default'
    organization_canonical_query:
      name: organization_canonical
      in: query
      description: A canonical of a organization used for filtering.
      schema:
        $ref: '#/components/schemas/Canonical'
    child_canonical_query:
      name: child_canonical
      in: query
      description: A canonical of a child organization used for filtering.
      schema:
        $ref: '#/components/schemas/Description'
    project_query:
      name: project
      in: query
      description: A canonical of a project used for filtering.
      schema:
        $ref: '#/components/schemas/ProjectCanonical'
    project_name_query:
      name: project_name
      in: query
      description: Search by project's name
      schema:
        $ref: '#/components/schemas/Name'
    project_created_at_query:
      name: project_created_at
      in: query
      description: Search by project's creation date
      schema:
        type: integer
        format: uint64
    project_description_query:
      name: project_description
      in: query
      description: Search by project's description
      schema:
        $ref: '#/components/schemas/Description'
    project_config_repository_canonical_query:
      name: project_config_repository_canonical
      in: query
      description: Search by project's config repository's canonical
      schema:
        $ref: '#/components/schemas/Canonical'
    team_name_query:
      name: team_name
      in: query
      description: Search by team's name
      schema:
        type: string
    team_created_at_query:
      name: team_created_at
      in: query
      description: Search by team's creation date
      schema:
        type: integer
        format: uint64
    team_description_query:
      name: team_description
      in: query
      description: Search by team's description
      schema:
        type: string
    service_catalog_status_query:
      name: service_catalog_status
      in: query
      description: The status of the catalog service used for filtering.
      schema:
        type: string
    service_catalog_own_query:
      name: service_catalog_own
      in: query
      description: |
        Filters the Service Catalogs to only show the ones owned by the User Organization
      schema:
        type: boolean
    service_catalog_trusted_query:
      name: service_catalog_trusted
      in: query
      description: |
        Filters the Service Catalogs to only show the ones that are from trusted source (Cycloid)
      schema:
        type: boolean
    service_catalog_template_query:
      name: service_catalog_template
      in: query
      description: |
        Filters the Service Catalogs to only show the ones that are templates
      schema:
        type: boolean
        default: false
    owner_query:
      name: user_id
      in: query
      description: Search by entity's owner
      schema:
        type: integer
        format: uint32
    order_by_query:
      name: order_by
      in: query
      description: |
        Allows to order the list of items. Example usage: field_name:asc
      schema:
        type: string
    concourse_page_since:
      name: concourse_page_since
      in: query
      description: The time after which we should look for entities to return.
      schema:
        type: integer
        format: uint64
        default: 0
    concourse_page_until:
      name: concourse_page_until
      in: query
      description: The time before which we should look for entities to return.
      schema:
        type: integer
        format: uint64
        default: 0
    concourse_page_limit:
      name: concourse_page_limit
      in: query
      description: The number of items at most which the response can have.
      schema:
        type: integer
        format: uint64
        default: 10
    cost_tag_key:
      name: key
      in: query
      description: The key of a tag
      schema:
        maxLength: 127
        minLength: 3
        pattern: "^[\\w\\-+=.:/@ ]+$"
        type: string
    cost_tag_key_value_filter:
      name: tag
      in: query
      description: The key and value of a tag concatenated by a ;.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          maxLength: 127
          minLength: 4
          pattern: "^[^;]+;[^;]+$"
          type: string
    cost_granularity_filter:
      name: granularity
      in: query
      description: "Sets the cost granularity, it can be month, week, day."
      required: true
      allowEmptyValue: false
      schema:
        type: string
        enum:
        - month
        - week
        - day
    cost_metrics_filter:
      name: metrics
      in: query
      description: |-
        Which metrics are returned in the query. For more information about blended and unblended rates, see https://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/.
        Valid values are BlendedCost, UnblendedCost, and UsageQuantity.
        If you return the UsageQuantity metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate usageQuantity across all of EC2, the results aren't meaningful because EC2 compute hours and data transfer are measured in different units (for example, hours vs. GB). To get more meaningful UsageQuantity metrics, filter by UsageType or UsageTypeGroups.
      required: true
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - BlendedCost
          - UnblendedCost
          - UsageQuantity
    cost_begin_filter:
      name: begin
      in: query
      description: Sets the start date for retrieving AWS costs. The start date is
        inclusive.
      required: true
      schema:
        type: string
        format: date
    cost_end_filter:
      name: end
      in: query
      description: Sets the end dates for retrieving AWS costs. The end date is exclusive.
      required: true
      schema:
        type: string
        format: date
    cost_currency_filter:
      name: currency
      in: query
      description: The currency required for the results.
      required: true
      schema:
        type: string
        enum:
        - USD
        - EUR
        - CNY
        - GBP
    cost_projects_filter:
      name: projects
      in: query
      description: The names of the projects that you can use to filter your results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_environments_filter:
      name: environments
      in: query
      description: The names of the environments that you can use to filter your results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_services_filter:
      name: services
      in: query
      description: The names of the services that you can use to filter and group
        your results.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_categories_filter:
      name: categories
      in: query
      description: The names of the categories that you can use to filter and group
        your results.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
          - other
          - compute
          - storage
          - database
          - dev_tools
          - networking
          - analytics
          - containers
          - machine_learning
          - multimedia
          - security
    cost_dashboard_filter_values:
      name: dashboard
      in: query
      description: Specifies if the filter values are for the dashboard
      schema:
        type: boolean
        default: false
    cloud_provider_account_id:
      name: cloud_provider_account_id
      in: path
      description: The id of an account in the Cloud Provider.
      required: true
      schema:
        type: string
    cost_linked_accounts_filter:
      name: linked_accounts
      in: query
      description: The ids of the linked accounts that you can use to filter your
        results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_master_accounts_filter:
      name: master_accounts
      in: query
      description: The ids of the master accounts that you can use to filter your
        results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_providers_filter:
      name: providers
      in: query
      description: The names of the providers that you can use to filter your results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_regions_filter:
      name: regions
      in: query
      description: The names of the regions that you can use to filter your results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_resources_filter:
      name: resources
      in: query
      description: The names of the resources that you can use to filter your results
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cost_resource_tagging_filter:
      name: resource_tagging
      in: query
      description: Filter results by only tagged or not tagged resources
      schema:
        type: string
        enum:
        - tagged_resources
        - untagged_resources
    cost_group_by_filter:
      name: group_by
      in: query
      description: "Represents a group when you specify a group by criteria, or in\
        \ the response to a query with a specific grouping."
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - environment
          - service
          - instance_type
          - category
          - location
          - linked_account
          - project
          - record_type
    cost_record_type_filter:
      name: record_types
      in: query
      description: The type of records that you can use to filter your results. For
        example usage or credit.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    organization_canonical:
      name: organization_canonical
      in: path
      description: A canonical of an organization.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    environment_query:
      name: environment
      in: query
      description: The environment canonical to use a query filter
      schema:
        $ref: '#/components/schemas/EnvironmentCanonical'
    environment_canonical:
      name: environment_canonical
      in: path
      description: The environment canonical to use as part of a path
      required: true
      schema:
        $ref: '#/components/schemas/EnvironmentCanonical'
    kpi_canonical:
      name: kpi_canonical
      in: path
      description: A canonical of a kpi.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    cache_path_query:
      name: cache_path
      in: query
      description: The cache path to use as part of a clearTaskCache request
      schema:
        type: string
    team_canonical:
      name: team_canonical
      in: path
      description: A canonical of a team.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    project_canonical:
      name: project_canonical
      in: path
      description: A canonical of a project.
      required: true
      schema:
        $ref: '#/components/schemas/ProjectCanonical'
    api_key_canonical:
      name: api_key_canonical
      in: path
      description: A canonical of an API key.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    username:
      name: username
      in: path
      description: A username
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    pipeline_name:
      name: inpath_pipeline_name
      in: path
      description: A pipeline name
      required: true
      schema:
        maxLength: 100
        minLength: 1
        pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
        type: string
    pipeline_name_query:
      name: pipeline_name
      in: query
      description: A pipeline name
      required: true
      schema:
        maxLength: 100
        minLength: 1
        pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
        type: string
    concourse_pipeline_name_query:
      name: concourse_pipeline_name
      in: query
      description: A pipeline name
      schema:
        maxLength: 100
        minLength: 1
        pattern: "^[a-z0-9]+[a-z0-9\\-_.]+[a-z0-9]+$"
        type: string
    project_canonical_query:
      name: project_canonical
      in: query
      description: A list of projects' canonical to filter from
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    environment_canonical_query:
      name: environment_canonical
      in: query
      description: A list of environments' canonical to filter from
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    statuses_query:
      name: statuses
      in: query
      description: "List of statuses that you want to filter a pipeline/job with.\
        \ Pipeline can be either paused or unpaused, but jobs can be started, pending,\
        \ succeeded, failed, errored, aborted. So if any of a pipeline's job has one\
        \ of the given status, the associated pipeline will be included in the response."
      allowEmptyValue: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - aborted
          - errored
          - failed
          - paused
          - pending
          - started
          - succeeded
    build_id:
      name: build_id
      in: path
      description: A build id
      required: true
      schema:
        maxLength: 20
        minLength: 1
        pattern: "^[0-9]+$"
        type: string
    job_name:
      name: job_name
      in: path
      description: A job name
      required: true
      schema:
        maxLength: 150
        minLength: 1
        type: string
    step_name:
      name: step_name
      in: path
      description: A step name from a job task
      required: true
      schema:
        maxLength: 150
        minLength: 1
        type: string
    resource_name:
      name: resource_name
      in: path
      description: A resource name
      required: true
      schema:
        maxLength: 150
        minLength: 1
        type: string
    filter_version:
      name: filter_version
      in: query
      description: A version of a resource
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    resource_version_id:
      name: resource_version_id
      in: path
      description: A resource's version id
      required: true
      schema:
        type: integer
        format: uint64
    service_catalog_ref:
      name: service_catalog_ref
      in: path
      description: A Service Catalog name
      required: true
      schema:
        pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+:[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
        type: string
    use_case_canonical:
      name: use_case_canonical
      in: path
      description: A use case canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    credential_canonical:
      name: credential_canonical
      in: path
      description: A Credential canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    credential_canonical_query:
      name: credential_canonical
      in: query
      description: A Credential canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    credential_canonical_not_required_query:
      name: credential_canonical
      in: query
      description: A Credential canonical
      schema:
        $ref: '#/components/schemas/Canonical'
    credential_type_query:
      name: credential_type
      in: query
      description: |
        Deprecated. Please use credential_types.
        A Credential type
      schema:
        type: string
        enum:
        - ssh
        - aws
        - custom
        - azure
        - azure_storage
        - gcp
        - basic_auth
        - elasticsearch
        - swift
    credential_types_query:
      name: credential_types
      in: query
      description: Multiple Credential types
      allowEmptyValue: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - ssh
          - aws
          - custom
          - azure
          - azure_storage
          - gcp
          - basic_auth
          - elasticsearch
          - swift
    credential_options_service_query:
      name: service
      in: query
      required: true
      schema:
        type: string
        enum:
        - gcp_bigquery
    git_url_query:
      name: git_url
      in: query
      description: Git URL to repository
      required: true
      schema:
        pattern: "^((/|~)[^/]*)+.(\\.git)|(([\\w\\]+@[\\w\\.]+))(:(//)?)([\\w\\.@\\\
          :/\\-~]+)(/)?"
        type: string
    external_backend_id:
      name: external_backend_id
      in: path
      description: External Backend ID
      required: true
      schema:
        type: integer
        format: uint32
    service_catalog_source_canonical:
      name: service_catalog_source_canonical
      in: path
      description: Organization Service Catalog Sources canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    service_catalog_source_canonical_query:
      name: service_catalog_source_canonical
      in: query
      description: Organization Service Catalog Sources canonical
      schema:
        $ref: '#/components/schemas/Canonical'
    config_repository_canonical:
      name: config_repository_canonical
      in: path
      description: Organization Config Repositories canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    aws_next_token:
      name: next
      in: query
      description: The token to retrieve the next page of results
      schema:
        minLength: 1
        type: string
    aws_infrastructure_resource_query:
      name: resource
      in: query
      description: Supported AWS type of resource to query. The parameter can be specified
        several times in order to request for different kind of resources.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - instances
          - vpcs
          - images
          - security_groups
          - subnets
          - volumes
          - snapshots
          - cache_clusters
          - load_balancers_v1
          - load_balancers_v2
          - db_instances
          - buckets
    aws_tags:
      name: tag
      in: query
      description: "An amazon tag, represented as `key|value` and where `key` or `value`\
        \ could be omitted but not both, in order to select resources which has a\
        \ `key` or a `value` whatever is its counterpart. `key` nor `value` can contains\
        \ the `|` character. The parameter can be specified several times in order\
        \ to request resources which match with at least one of the `tag|value` pairs"
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          maxLength: 383
          minLength: 2
          pattern: "^(?:(?:[\\w\\-+=.:/@ ]+\\|)|(?:\\|[\\w\\-+=.:/@ ]+)|(?:[\\w\\\
            -+=.:/@ ]+\\|[\\w\\-+=.:/@ ]+))$"
          type: string
    timestamp_range_begin_query:
      name: begin
      in: query
      description: "The unix timestamp in seconds, which indicate the start of the\
        \ time range."
      schema:
        type: integer
        format: uint64
    timestamp_range_end_query:
      name: end
      in: query
      description: "The unix timestamp in seconds, which indicate the end of the time\
        \ range."
      schema:
        type: integer
        format: uint64
    timestamp_range_begin_query_ms:
      name: begin
      in: query
      description: "The unix timestamp in milliseconds, which indicate the start of\
        \ the time range."
      schema:
        type: integer
        format: uint64
    timestamp_range_end_query_ms:
      name: end
      in: query
      description: "The unix timestamp in milliseconds, which indicate the end of\
        \ the time range."
      schema:
        type: integer
        format: uint64
    raw_query:
      name: query
      in: query
      description: A free text which the content depends of the context of the API
        endpoint. Can be a free text value or a complete query expressed of supported
        query language.
      schema:
        minLength: 1
        type: string
    log_source_id:
      name: log_source_id
      in: path
      description: "A unique identifier, which group log's entries under under a context,\
        \ established by the source."
      required: true
      schema:
        minLength: 1
        type: string
    event_type:
      name: type
      in: query
      description: Specify the types of the events to be requested. The returned events
        must have one of the specified types.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
          - Cycloid
          - AWS
          - Monitoring
          - Custom
    event_severity:
      name: severity
      in: query
      description: Specify the severities of the events to be requested. The returned
        events must have one of the specified severities.
      allowEmptyValue: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
          - info
          - warn
          - err
          - crit
    provider_canonical:
      name: provider_canonical
      in: path
      description: A canonical of a Provider
      required: true
      schema:
        minLength: 3
        pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
        type: string
    resource_canonical:
      name: resource_canonical
      in: path
      description: A canonical of a Resource
      required: true
      schema:
        minLength: 3
        pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
        type: string
    role_canonical:
      name: role_canonical
      in: path
      description: Organization Role canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    verification_token:
      name: verification_token
      in: path
      description: "A token for verifying emails, invitations, etc."
      required: true
      schema:
        minLength: 5
        type: string
    authentication_token:
      name: authentication_token
      in: path
      description: A token for authenticating login vie email
      required: true
      schema:
        minLength: 5
        type: string
    social_type:
      name: social_type
      in: path
      description: The OAuth Social type
      required: true
      schema:
        type: string
        enum:
        - azuread
        - saml2
        - google
        - github
    oauth_code:
      name: oauth_code
      in: query
      description: The OAuth code returned form the Social Provider
      required: true
      schema:
        type: string
    infra_policy_canonical:
      name: infra_policy_canonical
      in: path
      description: The canonical of an InfraPolicy.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    infra_policy_canonical_query:
      name: infra_policy_canonical
      in: query
      description: Search by infra policy canonical
      schema:
        $ref: '#/components/schemas/Canonical'
    infra_policy_name_query:
      name: infra_policy_name
      in: query
      description: Search by InfraPolicy's name
      schema:
        type: string
    infra_policy_created_at_query:
      name: infra_policy_created_at
      in: query
      description: Search by InfraPolicy's creation date
      schema:
        type: integer
        format: uint64
    infra_policy_severity_query:
      name: infra_policy_severity
      in: query
      description: Search by InfraPolicy's severity
      schema:
        type: string
        enum:
        - critical
        - warning
        - advisory
    infra_policy_enabled_query:
      name: infra_policy_enabled
      in: query
      description: Search by InfraPolicy's enabled
      schema:
        type: boolean
    invitation_created_at_query:
      name: invitation_created_at
      in: query
      description: Search by Invitation's creation date
      schema:
        type: integer
        format: uint64
    invitation_state_query:
      name: invitation_state
      in: query
      description: Search by Invitation's state
      schema:
        type: string
        enum:
        - accepted
        - pending
        - declined
    invitation_id:
      name: invitation_id
      in: path
      description: Organization Invitation id.
      required: true
      schema:
        type: integer
        format: uint32
    kpi_retrieve_data:
      name: fetch_data
      in: query
      description: |
        Flag to retrieve KPIs' data upon retrieving KPIs themselves
      schema:
        type: boolean
    favorite:
      name: favorite
      in: query
      description: |
        Flag to retrieve favorite data from the members favorite list.
      schema:
        type: boolean
    cloud_cost_management_account_canonical:
      name: cloud_cost_management_account_canonical
      in: path
      description: The canonical of an CloudCostManagementAccount.
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    cloud_cost_management_account_created_at_query:
      name: cloud_cost_management_account_created_at_query
      in: query
      description: Search by Cloud Cost Management account's creation date
      schema:
        type: integer
        format: uint64
    jwt:
      name: jwt
      in: query
      description: Token with the information about state and credentials.
      required: true
      schema:
        type: string
    inventory_resource_id:
      name: inventory_resource_id
      in: path
      description: Inventory Resource ID
      required: true
      schema:
        type: integer
        format: uint32
    inventory_resource_provider_query:
      name: resources_provider
      in: query
      description: Provider of Inventory Resource
      required: true
      schema:
        type: string
    resource_pool_canonical:
      name: resource_pool_canonical
      in: path
      description: Organization Resource Pool canonical
      required: true
      schema:
        $ref: '#/components/schemas/Canonical'
    quota_id:
      name: quota_id
      in: path
      description: Quota ID
      required: true
      schema:
        type: integer
        format: uint32
    appearance_canonical:
      name: appearance_canonical
      in: path
      description: A canonical of an appearance.
      required: true
      schema:
        $ref: '#/components/schemas/AppearanceCanonical'
    service_status_canonical:
      name: service_status_canonical
      in: path
      description: The canonical of the service you want to get the status from
      required: true
      schema:
        maxLength: 100
        minLength: 3
        pattern: "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"
        type: string
    member_id:
      name: member_id
      description: A member id
      in: path
      required: true
      schema:
        type: integer
        format: uint32
  securitySchemes:
    api_key:
      type: apiKey
      description: The API authorization is done with JWT tokens
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
