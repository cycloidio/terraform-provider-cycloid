// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_external_backend

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ExternalBackendResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"aws_storage": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"bucket": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The AWS bucket containing objects\n",
						MarkdownDescription: "The AWS bucket containing objects\n",
					},
					"endpoint": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "A custom endpoint for the S3 API (default: s3.amazonaws.com)\n",
						MarkdownDescription: "A custom endpoint for the S3 API (default: s3.amazonaws.com)\n",
					},
					"key": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The S3 Key uniquely identifies an object in a bucket\n",
						MarkdownDescription: "The S3 Key uniquely identifies an object in a bucket\n",
					},
					"region": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The AWS region where the resource exists\n",
						MarkdownDescription: "The AWS region where the resource exists\n",
					},
					"s3_force_path_style": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Always use path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)\n",
						MarkdownDescription: "Always use path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)\n",
					},
					"skip_verify_ssl": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Set this to `true` to not verify SSL certificates\n",
						MarkdownDescription: "Set this to `true` to not verify SSL certificates\n",
					},
				},
				CustomType: AwsStorageType{
					ObjectType: types.ObjectType{
						AttrTypes: AwsStorageValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Representation of AWS storage for external backend.\nMust be matched with a credential of the \"aws\" type.\n",
				MarkdownDescription: "Representation of AWS storage for external backend.\nMust be matched with a credential of the \"aws\" type.\n",
			},
			"credential_canonical": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The canonical of an entity",
				MarkdownDescription: "The canonical of an entity",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
				},
			},
			"default": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the given entity is default one",
				MarkdownDescription: "Whether the given entity is default one",
			},
			"engine": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"aws_storage",
						"gcp_storage",
						"swift_storage",
					),
				},
			},
			"environment_canonical": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The canonical of an entity",
				MarkdownDescription: "The canonical of an entity",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[\\da-zA-Z]+(?:(?:[\\da-zA-Z\\-._]+)?[\\da-zA-Z])?$"), ""),
				},
			},
			"external_backend_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "External Backend ID",
				MarkdownDescription: "External Backend ID",
			},
			"gcp_storage": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"bucket": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The GCP bucket containing objects\n",
						MarkdownDescription: "The GCP bucket containing objects\n",
					},
					"object": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The GCP object uniquely identifying an object in a bucket,\nwill be required if the EB is not default\n",
						MarkdownDescription: "The GCP object uniquely identifying an object in a bucket,\nwill be required if the EB is not default\n",
					},
				},
				CustomType: GcpStorageType{
					ObjectType: types.ObjectType{
						AttrTypes: GcpStorageValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Representation of GCP remote tf state for external backend.\nMust be matched with a credential of the \"gcp\" type.\n",
				MarkdownDescription: "Representation of GCP remote tf state for external backend.\nMust be matched with a credential of the \"gcp\" type.\n",
			},
			"organization_canonical": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A canonical of an organization.",
				MarkdownDescription: "A canonical of an organization.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"), ""),
				},
			},
			"project_canonical": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The canonical of an entity",
				MarkdownDescription: "The canonical of an entity",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("(^[a-z0-9]+(([a-z0-9\\-_]+)?[a-z0-9]+)?$)"), ""),
				},
			},
			"purpose": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"remote_tfstate",
					),
				},
			},
			"swift_storage": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"container": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The Swift container containing objects\n",
						MarkdownDescription: "The Swift container containing objects\n",
					},
					"object": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The swift object uniquely identifying an object in a container,\nwill be required if the EB is not default\n",
						MarkdownDescription: "The swift object uniquely identifying an object in a container,\nwill be required if the EB is not default\n",
					},
					"region": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The Swift region where the resource exists\n",
						MarkdownDescription: "The Swift region where the resource exists\n",
					},
					"skip_verify_ssl": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Set this to `true` to not verify SSL certificates\n",
						MarkdownDescription: "Set this to `true` to not verify SSL certificates\n",
					},
				},
				CustomType: SwiftStorageType{
					ObjectType: types.ObjectType{
						AttrTypes: SwiftStorageValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Representation of Swift remote tf state for external backend.\nMust be matched with a credential of the \"swift\" type.\n",
				MarkdownDescription: "Representation of Swift remote tf state for external backend.\nMust be matched with a credential of the \"swift\" type.\n",
			},
		},
	}
}

type ExternalBackendModel struct {
	AwsStorage            AwsStorageValue   `tfsdk:"aws_storage"`
	CredentialCanonical   types.String      `tfsdk:"credential_canonical"`
	Default               types.Bool        `tfsdk:"default"`
	Engine                types.String      `tfsdk:"engine"`
	EnvironmentCanonical  types.String      `tfsdk:"environment_canonical"`
	ExternalBackendId     types.Int64       `tfsdk:"external_backend_id"`
	GcpStorage            GcpStorageValue   `tfsdk:"gcp_storage"`
	OrganizationCanonical types.String      `tfsdk:"organization_canonical"`
	ProjectCanonical      types.String      `tfsdk:"project_canonical"`
	Purpose               types.String      `tfsdk:"purpose"`
	SwiftStorage          SwiftStorageValue `tfsdk:"swift_storage"`
}

var _ basetypes.ObjectTypable = AwsStorageType{}

type AwsStorageType struct {
	basetypes.ObjectType
}

func (t AwsStorageType) Equal(o attr.Type) bool {
	other, ok := o.(AwsStorageType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AwsStorageType) String() string {
	return "AwsStorageType"
}

func (t AwsStorageType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return nil, diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	endpointAttribute, ok := attributes["endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoint is missing from object`)

		return nil, diags
	}

	endpointVal, ok := endpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoint expected to be basetypes.StringValue, was: %T`, endpointAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	s3ForcePathStyleAttribute, ok := attributes["s3_force_path_style"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`s3_force_path_style is missing from object`)

		return nil, diags
	}

	s3ForcePathStyleVal, ok := s3ForcePathStyleAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`s3_force_path_style expected to be basetypes.BoolValue, was: %T`, s3ForcePathStyleAttribute))
	}

	skipVerifySslAttribute, ok := attributes["skip_verify_ssl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify_ssl is missing from object`)

		return nil, diags
	}

	skipVerifySslVal, ok := skipVerifySslAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify_ssl expected to be basetypes.BoolValue, was: %T`, skipVerifySslAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AwsStorageValue{
		Bucket:           bucketVal,
		Endpoint:         endpointVal,
		Key:              keyVal,
		Region:           regionVal,
		S3ForcePathStyle: s3ForcePathStyleVal,
		SkipVerifySsl:    skipVerifySslVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAwsStorageValueNull() AwsStorageValue {
	return AwsStorageValue{
		state: attr.ValueStateNull,
	}
}

func NewAwsStorageValueUnknown() AwsStorageValue {
	return AwsStorageValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAwsStorageValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AwsStorageValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AwsStorageValue Attribute Value",
				"While creating a AwsStorageValue value, a missing attribute value was detected. "+
					"A AwsStorageValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AwsStorageValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AwsStorageValue Attribute Type",
				"While creating a AwsStorageValue value, an invalid attribute value was detected. "+
					"A AwsStorageValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AwsStorageValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AwsStorageValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AwsStorageValue Attribute Value",
				"While creating a AwsStorageValue value, an extra attribute value was detected. "+
					"A AwsStorageValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AwsStorageValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAwsStorageValueUnknown(), diags
	}

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	endpointAttribute, ok := attributes["endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoint is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	endpointVal, ok := endpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoint expected to be basetypes.StringValue, was: %T`, endpointAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	s3ForcePathStyleAttribute, ok := attributes["s3_force_path_style"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`s3_force_path_style is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	s3ForcePathStyleVal, ok := s3ForcePathStyleAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`s3_force_path_style expected to be basetypes.BoolValue, was: %T`, s3ForcePathStyleAttribute))
	}

	skipVerifySslAttribute, ok := attributes["skip_verify_ssl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify_ssl is missing from object`)

		return NewAwsStorageValueUnknown(), diags
	}

	skipVerifySslVal, ok := skipVerifySslAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify_ssl expected to be basetypes.BoolValue, was: %T`, skipVerifySslAttribute))
	}

	if diags.HasError() {
		return NewAwsStorageValueUnknown(), diags
	}

	return AwsStorageValue{
		Bucket:           bucketVal,
		Endpoint:         endpointVal,
		Key:              keyVal,
		Region:           regionVal,
		S3ForcePathStyle: s3ForcePathStyleVal,
		SkipVerifySsl:    skipVerifySslVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAwsStorageValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AwsStorageValue {
	object, diags := NewAwsStorageValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAwsStorageValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AwsStorageType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAwsStorageValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAwsStorageValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAwsStorageValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAwsStorageValueMust(AwsStorageValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AwsStorageType) ValueType(ctx context.Context) attr.Value {
	return AwsStorageValue{}
}

var _ basetypes.ObjectValuable = AwsStorageValue{}

type AwsStorageValue struct {
	Bucket           basetypes.StringValue `tfsdk:"bucket"`
	Endpoint         basetypes.StringValue `tfsdk:"endpoint"`
	Key              basetypes.StringValue `tfsdk:"key"`
	Region           basetypes.StringValue `tfsdk:"region"`
	S3ForcePathStyle basetypes.BoolValue   `tfsdk:"s3_force_path_style"`
	SkipVerifySsl    basetypes.BoolValue   `tfsdk:"skip_verify_ssl"`
	state            attr.ValueState
}

func (v AwsStorageValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["bucket"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["endpoint"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["s3_force_path_style"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["skip_verify_ssl"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Bucket.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bucket"] = val

		val, err = v.Endpoint.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["endpoint"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.S3ForcePathStyle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["s3_force_path_style"] = val

		val, err = v.SkipVerifySsl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_verify_ssl"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AwsStorageValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AwsStorageValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AwsStorageValue) String() string {
	return "AwsStorageValue"
}

func (v AwsStorageValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"bucket":              basetypes.StringType{},
			"endpoint":            basetypes.StringType{},
			"key":                 basetypes.StringType{},
			"region":              basetypes.StringType{},
			"s3_force_path_style": basetypes.BoolType{},
			"skip_verify_ssl":     basetypes.BoolType{},
		},
		map[string]attr.Value{
			"bucket":              v.Bucket,
			"endpoint":            v.Endpoint,
			"key":                 v.Key,
			"region":              v.Region,
			"s3_force_path_style": v.S3ForcePathStyle,
			"skip_verify_ssl":     v.SkipVerifySsl,
		})

	return objVal, diags
}

func (v AwsStorageValue) Equal(o attr.Value) bool {
	other, ok := o.(AwsStorageValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bucket.Equal(other.Bucket) {
		return false
	}

	if !v.Endpoint.Equal(other.Endpoint) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.S3ForcePathStyle.Equal(other.S3ForcePathStyle) {
		return false
	}

	if !v.SkipVerifySsl.Equal(other.SkipVerifySsl) {
		return false
	}

	return true
}

func (v AwsStorageValue) Type(ctx context.Context) attr.Type {
	return AwsStorageType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AwsStorageValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bucket":              basetypes.StringType{},
		"endpoint":            basetypes.StringType{},
		"key":                 basetypes.StringType{},
		"region":              basetypes.StringType{},
		"s3_force_path_style": basetypes.BoolType{},
		"skip_verify_ssl":     basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = GcpStorageType{}

type GcpStorageType struct {
	basetypes.ObjectType
}

func (t GcpStorageType) Equal(o attr.Type) bool {
	other, ok := o.(GcpStorageType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GcpStorageType) String() string {
	return "GcpStorageType"
}

func (t GcpStorageType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return nil, diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return nil, diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GcpStorageValue{
		Bucket: bucketVal,
		Object: objectVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewGcpStorageValueNull() GcpStorageValue {
	return GcpStorageValue{
		state: attr.ValueStateNull,
	}
}

func NewGcpStorageValueUnknown() GcpStorageValue {
	return GcpStorageValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGcpStorageValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GcpStorageValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GcpStorageValue Attribute Value",
				"While creating a GcpStorageValue value, a missing attribute value was detected. "+
					"A GcpStorageValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GcpStorageValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GcpStorageValue Attribute Type",
				"While creating a GcpStorageValue value, an invalid attribute value was detected. "+
					"A GcpStorageValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GcpStorageValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GcpStorageValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GcpStorageValue Attribute Value",
				"While creating a GcpStorageValue value, an extra attribute value was detected. "+
					"A GcpStorageValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GcpStorageValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGcpStorageValueUnknown(), diags
	}

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return NewGcpStorageValueUnknown(), diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return NewGcpStorageValueUnknown(), diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	if diags.HasError() {
		return NewGcpStorageValueUnknown(), diags
	}

	return GcpStorageValue{
		Bucket: bucketVal,
		Object: objectVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewGcpStorageValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GcpStorageValue {
	object, diags := NewGcpStorageValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGcpStorageValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GcpStorageType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGcpStorageValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGcpStorageValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGcpStorageValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGcpStorageValueMust(GcpStorageValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GcpStorageType) ValueType(ctx context.Context) attr.Value {
	return GcpStorageValue{}
}

var _ basetypes.ObjectValuable = GcpStorageValue{}

type GcpStorageValue struct {
	Bucket basetypes.StringValue `tfsdk:"bucket"`
	Object basetypes.StringValue `tfsdk:"object"`
	state  attr.ValueState
}

func (v GcpStorageValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["bucket"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["object"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Bucket.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bucket"] = val

		val, err = v.Object.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["object"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GcpStorageValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GcpStorageValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GcpStorageValue) String() string {
	return "GcpStorageValue"
}

func (v GcpStorageValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"bucket": basetypes.StringType{},
			"object": basetypes.StringType{},
		},
		map[string]attr.Value{
			"bucket": v.Bucket,
			"object": v.Object,
		})

	return objVal, diags
}

func (v GcpStorageValue) Equal(o attr.Value) bool {
	other, ok := o.(GcpStorageValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bucket.Equal(other.Bucket) {
		return false
	}

	if !v.Object.Equal(other.Object) {
		return false
	}

	return true
}

func (v GcpStorageValue) Type(ctx context.Context) attr.Type {
	return GcpStorageType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GcpStorageValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bucket": basetypes.StringType{},
		"object": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SwiftStorageType{}

type SwiftStorageType struct {
	basetypes.ObjectType
}

func (t SwiftStorageType) Equal(o attr.Type) bool {
	other, ok := o.(SwiftStorageType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SwiftStorageType) String() string {
	return "SwiftStorageType"
}

func (t SwiftStorageType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	containerAttribute, ok := attributes["container"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`container is missing from object`)

		return nil, diags
	}

	containerVal, ok := containerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`container expected to be basetypes.StringValue, was: %T`, containerAttribute))
	}

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return nil, diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	skipVerifySslAttribute, ok := attributes["skip_verify_ssl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify_ssl is missing from object`)

		return nil, diags
	}

	skipVerifySslVal, ok := skipVerifySslAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify_ssl expected to be basetypes.BoolValue, was: %T`, skipVerifySslAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SwiftStorageValue{
		Container:     containerVal,
		Object:        objectVal,
		Region:        regionVal,
		SkipVerifySsl: skipVerifySslVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSwiftStorageValueNull() SwiftStorageValue {
	return SwiftStorageValue{
		state: attr.ValueStateNull,
	}
}

func NewSwiftStorageValueUnknown() SwiftStorageValue {
	return SwiftStorageValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSwiftStorageValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SwiftStorageValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SwiftStorageValue Attribute Value",
				"While creating a SwiftStorageValue value, a missing attribute value was detected. "+
					"A SwiftStorageValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SwiftStorageValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SwiftStorageValue Attribute Type",
				"While creating a SwiftStorageValue value, an invalid attribute value was detected. "+
					"A SwiftStorageValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SwiftStorageValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SwiftStorageValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SwiftStorageValue Attribute Value",
				"While creating a SwiftStorageValue value, an extra attribute value was detected. "+
					"A SwiftStorageValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SwiftStorageValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSwiftStorageValueUnknown(), diags
	}

	containerAttribute, ok := attributes["container"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`container is missing from object`)

		return NewSwiftStorageValueUnknown(), diags
	}

	containerVal, ok := containerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`container expected to be basetypes.StringValue, was: %T`, containerAttribute))
	}

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return NewSwiftStorageValueUnknown(), diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewSwiftStorageValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	skipVerifySslAttribute, ok := attributes["skip_verify_ssl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verify_ssl is missing from object`)

		return NewSwiftStorageValueUnknown(), diags
	}

	skipVerifySslVal, ok := skipVerifySslAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verify_ssl expected to be basetypes.BoolValue, was: %T`, skipVerifySslAttribute))
	}

	if diags.HasError() {
		return NewSwiftStorageValueUnknown(), diags
	}

	return SwiftStorageValue{
		Container:     containerVal,
		Object:        objectVal,
		Region:        regionVal,
		SkipVerifySsl: skipVerifySslVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSwiftStorageValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SwiftStorageValue {
	object, diags := NewSwiftStorageValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSwiftStorageValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SwiftStorageType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSwiftStorageValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSwiftStorageValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSwiftStorageValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSwiftStorageValueMust(SwiftStorageValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SwiftStorageType) ValueType(ctx context.Context) attr.Value {
	return SwiftStorageValue{}
}

var _ basetypes.ObjectValuable = SwiftStorageValue{}

type SwiftStorageValue struct {
	Container     basetypes.StringValue `tfsdk:"container"`
	Object        basetypes.StringValue `tfsdk:"object"`
	Region        basetypes.StringValue `tfsdk:"region"`
	SkipVerifySsl basetypes.BoolValue   `tfsdk:"skip_verify_ssl"`
	state         attr.ValueState
}

func (v SwiftStorageValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["container"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["object"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["skip_verify_ssl"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Container.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["container"] = val

		val, err = v.Object.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["object"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.SkipVerifySsl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_verify_ssl"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SwiftStorageValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SwiftStorageValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SwiftStorageValue) String() string {
	return "SwiftStorageValue"
}

func (v SwiftStorageValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"container":       basetypes.StringType{},
			"object":          basetypes.StringType{},
			"region":          basetypes.StringType{},
			"skip_verify_ssl": basetypes.BoolType{},
		},
		map[string]attr.Value{
			"container":       v.Container,
			"object":          v.Object,
			"region":          v.Region,
			"skip_verify_ssl": v.SkipVerifySsl,
		})

	return objVal, diags
}

func (v SwiftStorageValue) Equal(o attr.Value) bool {
	other, ok := o.(SwiftStorageValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Container.Equal(other.Container) {
		return false
	}

	if !v.Object.Equal(other.Object) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.SkipVerifySsl.Equal(other.SkipVerifySsl) {
		return false
	}

	return true
}

func (v SwiftStorageValue) Type(ctx context.Context) attr.Type {
	return SwiftStorageType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SwiftStorageValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"container":       basetypes.StringType{},
		"object":          basetypes.StringType{},
		"region":          basetypes.StringType{},
		"skip_verify_ssl": basetypes.BoolType{},
	}
}
